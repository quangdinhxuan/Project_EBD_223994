
RTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08009d78  08009d78  00019d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c8  0800a2c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d0  0800a2d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ed8  200001d8  0800a4b0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050b0  0800a4b0  000250b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e031  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a3  00000000  00000000  0002e27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00030a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009df  00000000  00000000  00031748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004044  00000000  00000000  00032127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e29a  00000000  00000000  0003616b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f20d  00000000  00000000  00044405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ac0  00000000  00000000  000d3614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d80d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d60 	.word	0x08009d60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009d60 	.word	0x08009d60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <uart_init>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void uart_init()
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <uart_init+0xd4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <uart_init+0xd4>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <uart_init+0xd4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
	//chon PB6,PB7
	uint32_t* MODER = (uint32_t*)(GPIOB_ADDRESS_BASE + 0x00);
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <uart_init+0xd8>)
 8001024:	61fb      	str	r3, [r7, #28]
	//PB6,PB7
	*MODER &= ~((0b11 << 12) |( 0b11 << 14));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	601a      	str	r2, [r3, #0]
	*MODER |= ((0b10 << 12) |( 0b10 << 14));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	601a      	str	r2, [r3, #0]
	//ALTERNATIVE FUNCTION
	uint32_t* AFRL = (uint32_t*)(GPIOB_ADDRESS_BASE + 0x20);
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <uart_init+0xdc>)
 8001040:	61bb      	str	r3, [r7, #24]
	//CLEAR PB6,PB7
	*AFRL &= ~((0xf << 24) | (0xf << 28));
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	601a      	str	r2, [r3, #0]
	//AF07 NEN DICH 7
	*AFRL |= ((7 << 24) | (7 << 28));
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f043 42ee 	orr.w	r2, r3, #1996488704	; 0x77000000
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	601a      	str	r2, [r3, #0]


	//baund-rate=9600
	// parity: even
	// data length: 8bit
	__HAL_RCC_USART1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <uart_init+0xd4>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <uart_init+0xd4>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <uart_init+0xd4>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
	uint32_t* BRR = (uint32_t*)(UART1_ADDRESS_BASE + 0x08);
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <uart_init+0xe0>)
 8001078:	617b      	str	r3, [r7, #20]
	//104,166667=16000000/(9600*160)
	//3=0.166667*16 fraction part
	//Baud_rate 19.6.3
	*BRR |= (104 << 4) | (3 << 0);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001082:	f043 0303 	orr.w	r3, r3, #3
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	6013      	str	r3, [r2, #0]
	uint32_t* CR1 = (uint32_t*)(UART1_ADDRESS_BASE + 0x0c);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <uart_init+0xe4>)
 800108c:	613b      	str	r3, [r7, #16]
	//12 xac dinh length(8 or 9 bits co parity hay k)
	//10 xac dinh parity
	*CR1 |= (1 << 12) | (1 << 10);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]
	//9 chon even hay odd parity neu 0 thi co the ko can
	*CR1 &= ~(1 << 9);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]
	//3 transmit,2 receive,13 enable uart
//	*CR1 |= (1 << 5);//enable interrupt, rxne=1
//	uint32_t*ISER1=(uint32_t*)(0xe000e104) ;
//	*ISER1|=(1<<(37-32));
	uint32_t*CR3=(uint32_t*)(0x40011014);
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <uart_init+0xe8>)
 80010a8:	60fb      	str	r3, [r7, #12]
	*CR3|=(1<<6);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]


	*CR1 |= (1 << 13) | (1 << 3) | (1 << 2);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010be:	f043 030c 	orr.w	r3, r3, #12
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	6013      	str	r3, [r2, #0]



}
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020420 	.word	0x40020420
 80010e0:	40011008 	.word	0x40011008
 80010e4:	4001100c 	.word	0x4001100c
 80010e8:	40011014 	.word	0x40011014

080010ec <USART1_IRQHandler>:
char rx_buf[1024];
int rx_index=0;
void USART1_IRQHandler()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)(UART1_ADDRESS_BASE + 0x00);
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USART1_IRQHandler+0x3c>)
 80010f4:	607b      	str	r3, [r7, #4]
	//DR DATA REGISTER
		uint32_t* DR = (uint32_t*)(UART1_ADDRESS_BASE + 0x04);
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <USART1_IRQHandler+0x40>)
 80010f8:	603b      	str	r3, [r7, #0]
		rx_buf[rx_index++]=*DR;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <USART1_IRQHandler+0x44>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	490a      	ldr	r1, [pc, #40]	; (8001130 <USART1_IRQHandler+0x44>)
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	b2c1      	uxtb	r1, r0
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <USART1_IRQHandler+0x48>)
 800110c:	54d1      	strb	r1, [r2, r3]
		*SR &=~(1<<5);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 0220 	bic.w	r2, r3, #32
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40011000 	.word	0x40011000
 800112c:	40011004 	.word	0x40011004
 8001130:	200005f4 	.word	0x200005f4
 8001134:	200001f4 	.word	0x200001f4

08001138 <uart_send_1_byte>:
void uart_send_1_byte(char data)
{//SR STATUS REGISTER
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR = (uint32_t*)(UART1_ADDRESS_BASE + 0x00);
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <uart_send_1_byte+0x44>)
 8001144:	60fb      	str	r3, [r7, #12]
//DR DATA REGISTER
	uint32_t* DR = (uint32_t*)(UART1_ADDRESS_BASE + 0x04);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <uart_send_1_byte+0x48>)
 8001148:	60bb      	str	r3, [r7, #8]
	//Xet transmit empty thi moi trans
	while (((*SR >> 7) & 1) != 1);
 800114a:	bf00      	nop
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f9      	beq.n	800114c <uart_send_1_byte+0x14>
	*DR = data;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	601a      	str	r2, [r3, #0]
	//6 la transmit complete
	while (((*SR >> 6) & 1) != 1);
 800115e:	bf00      	nop
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <uart_send_1_byte+0x28>

}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40011000 	.word	0x40011000
 8001180:	40011004 	.word	0x40011004

08001184 <uart_send_string>:
void uart_send_string(char* str)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	int str_len = strlen(str);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f877 	bl	8000280 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < str_len; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	e009      	b.n	80011b0 <uart_send_string+0x2c>
		uart_send_1_byte(str[i]);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffc7 	bl	8001138 <uart_send_1_byte>
	for (int i = 0; i < str_len; i++) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <uart_send_string+0x18>
	}

}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <printlog>:
	uint8_t data = *DR;
	return data;

}
void printlog(char*format,...)
{
 80011c2:	b40f      	push	{r0, r1, r2, r3}
 80011c4:	b580      	push	{r7, lr}
 80011c6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80011ca:	af00      	add	r7, sp, #0
char buf[1024]={0};
 80011cc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011d0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 f985 	bl	80064f0 <memset>
char buf_len=0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
va_list _ArgList;
va_start(_ArgList,format);
 80011ec:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80011f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011f4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80011f8:	601a      	str	r2, [r3, #0]
vsprintf(buf,format,_ArgList);
 80011fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011fe:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001202:	f107 0008 	add.w	r0, r7, #8
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 800120c:	f005 f966 	bl	80064dc <vsiprintf>
uart_send_string(buf);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ffb5 	bl	8001184 <uart_send_string>
va_end(_ArgList);
buf_len=strlen(buf);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f82e 	bl	8000280 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
for(int i=0;i<buf_len;i++)
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001230:	e00f      	b.n	8001252 <printlog+0x90>
{
	uart_send_1_byte(buf[i]);
 8001232:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001236:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800123a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff78 	bl	8001138 <uart_send_1_byte>
for(int i=0;i<buf_len;i++)
 8001248:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001252:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001256:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800125a:	429a      	cmp	r2, r3
 800125c:	dbe9      	blt.n	8001232 <printlog+0x70>
}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <custom_printf>:
void custom_printf(char*format,...)
{
 8001270:	b40f      	push	{r0, r1, r2, r3}
 8001272:	b580      	push	{r7, lr}
 8001274:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001278:	af00      	add	r7, sp, #0
char buf[1024]={0};
 800127a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800127e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	3304      	adds	r3, #4
 8001288:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 f92e 	bl	80064f0 <memset>
va_list _ArgList;
va_start(_ArgList,format);
 8001294:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001298:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800129c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80012a0:	601a      	str	r2, [r3, #0]
vsprintf(buf,format,_ArgList);
 80012a2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80012a6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80012aa:	f107 0008 	add.w	r0, r7, #8
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 80012b4:	f005 f912 	bl	80064dc <vsiprintf>
uart_send_string(buf);
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff61 	bl	8001184 <uart_send_string>
va_end(_ArgList);
}
 80012c2:	bf00      	nop
 80012c4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80012c8:	46bd      	mov	sp, r7
 80012ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ce:	b004      	add	sp, #16
 80012d0:	4770      	bx	lr
	...

080012d4 <led_toggle>:
		//clear pin in led to 0
		*GPIOD_ODR &=~(1<<led);
	}
}
void led_toggle(uint8_t led)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR =(uint32_t*)(0x40020C14);
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <led_toggle+0x58>)
 80012e0:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOD_IDR =(uint32_t*)(0x40020C10);
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <led_toggle+0x5c>)
 80012e4:	60bb      	str	r3, [r7, #8]
		if(((*GPIOD_IDR>>led)&1)==1){
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <led_toggle+0x3a>


		*GPIOD_ODR &=~(1<<led);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	601a      	str	r2, [r3, #0]
		else
		{

			*GPIOD_ODR |=(1<<led);
		}
}
 800130c:	e008      	b.n	8001320 <led_toggle+0x4c>
			*GPIOD_ODR |=(1<<led);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40020c14 	.word	0x40020c14
 8001330:	40020c10 	.word	0x40020c10
 8001334:	00000000 	.word	0x00000000

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 faa2 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f85c 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f000 f8b8 	bl	80014b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
uart_init();
 8001348:	f7ff fe5a 	bl	8001000 <uart_init>
printlog("xin chao:%f \r\n",3.14);
 800134c:	a329      	add	r3, pc, #164	; (adr r3, 80013f4 <main+0xbc>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <main+0x80>)
 8001354:	f7ff ff35 	bl	80011c2 <printlog>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001358:	f001 f9e2 	bl	8002720 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensor_queue */
  sensor_queueHandle = osMessageQueueNew (16, sizeof(float), &sensor_queue_attributes);
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <main+0x84>)
 800135e:	2104      	movs	r1, #4
 8001360:	2010      	movs	r0, #16
 8001362:	f001 fad4 	bl	800290e <osMessageQueueNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <main+0x88>)
 800136a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task01 */
  task01Handle = osThreadNew(func1, NULL, &task01_attributes);
 800136c:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <main+0x8c>)
 800136e:	2100      	movs	r1, #0
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <main+0x90>)
 8001372:	f001 fa1f 	bl	80027b4 <osThreadNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <main+0x94>)
 800137a:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(func2, NULL, &task02_attributes);
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <main+0x98>)
 800137e:	2100      	movs	r1, #0
 8001380:	4814      	ldr	r0, [pc, #80]	; (80013d4 <main+0x9c>)
 8001382:	f001 fa17 	bl	80027b4 <osThreadNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <main+0xa0>)
 800138a:	6013      	str	r3, [r2, #0]

  /* creation of task03 */
  task03Handle = osThreadNew(func3, NULL, &task03_attributes);
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <main+0xa4>)
 800138e:	2100      	movs	r1, #0
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <main+0xa8>)
 8001392:	f001 fa0f 	bl	80027b4 <osThreadNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <main+0xac>)
 800139a:	6013      	str	r3, [r2, #0]

  /* creation of task04 */
  task04Handle = osThreadNew(func4, NULL, &task04_attributes);
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <main+0xb0>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <main+0xb4>)
 80013a2:	f001 fa07 	bl	80027b4 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <main+0xb8>)
 80013aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ac:	f001 f9dc 	bl	8002768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <main+0x78>
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	08009da8 	.word	0x08009da8
 80013bc:	08009e74 	.word	0x08009e74
 80013c0:	20000608 	.word	0x20000608
 80013c4:	08009de4 	.word	0x08009de4
 80013c8:	08001541 	.word	0x08001541
 80013cc:	200005f8 	.word	0x200005f8
 80013d0:	08009e08 	.word	0x08009e08
 80013d4:	08001559 	.word	0x08001559
 80013d8:	200005fc 	.word	0x200005fc
 80013dc:	08009e2c 	.word	0x08009e2c
 80013e0:	08001595 	.word	0x08001595
 80013e4:	20000600 	.word	0x20000600
 80013e8:	08009e50 	.word	0x08009e50
 80013ec:	080015c9 	.word	0x080015c9
 80013f0:	20000604 	.word	0x20000604
 80013f4:	51eb851f 	.word	0x51eb851f
 80013f8:	40091eb8 	.word	0x40091eb8

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2230      	movs	r2, #48	; 0x30
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 f870 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <SystemClock_Config+0xb4>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <SystemClock_Config+0xb4>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <SystemClock_Config+0xb4>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <SystemClock_Config+0xb8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <SystemClock_Config+0xb8>)
 8001446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <SystemClock_Config+0xb8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fcff 	bl	8001e70 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001478:	f000 f8ae 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f000 ff62 	bl	8002360 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014a2:	f000 f899 	bl	80015d8 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	; 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_GPIO_Init+0x80>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <MX_GPIO_Init+0x80>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_GPIO_Init+0x80>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_GPIO_Init+0x80>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <MX_GPIO_Init+0x80>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_GPIO_Init+0x80>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <MX_GPIO_Init+0x84>)
 800150e:	f000 fc95 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001512:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_GPIO_Init+0x84>)
 800152c:	f000 fb02 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40020c00 	.word	0x40020c00

08001540 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	led_toggle(LED_GREEN);
 8001548:	200c      	movs	r0, #12
 800154a:	f7ff fec3 	bl	80012d4 <led_toggle>
    osDelay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f001 f9c1 	bl	80028d8 <osDelay>
	led_toggle(LED_GREEN);
 8001556:	e7f7      	b.n	8001548 <func1+0x8>

08001558 <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
  /* Infinite loop */
  for(;;)
  { int temp=0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  osMessageQueueGet(sensor_queueHandle, &temp, 0, HAL_MAX_DELAY);
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <func2+0x34>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f107 010c 	add.w	r1, r7, #12
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
 8001570:	2200      	movs	r2, #0
 8001572:	f001 fa9f 	bl	8002ab4 <osMessageQueueGet>
  custom_printf("hello world:%d\r\n",temp);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <func2+0x38>)
 800157c:	f7ff fe78 	bl	8001270 <custom_printf>
	     osDelay(1500);
 8001580:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001584:	f001 f9a8 	bl	80028d8 <osDelay>
  { int temp=0;
 8001588:	e7ea      	b.n	8001560 <func2+0x8>
 800158a:	bf00      	nop
 800158c:	20000608 	.word	0x20000608
 8001590:	08009db8 	.word	0x08009db8

08001594 <func3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func3 */
void func3(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func3 */
	  int sensor_value=0;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	sensor_value++;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(sensor_queueHandle, &sensor_value, 0,HAL_MAX_DELAY);
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <func3+0x30>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f107 010c 	add.w	r1, r7, #12
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2200      	movs	r2, #0
 80015b4:	f001 fa1e 	bl	80029f4 <osMessageQueuePut>
    osDelay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015bc:	f001 f98c 	bl	80028d8 <osDelay>
	sensor_value++;
 80015c0:	e7ee      	b.n	80015a0 <func3+0xc>
 80015c2:	bf00      	nop
 80015c4:	20000608 	.word	0x20000608

080015c8 <func4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func4 */
void func4(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f001 f981 	bl	80028d8 <osDelay>
 80015d6:	e7fb      	b.n	80015d0 <func4+0x8>

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_MspInit+0x54>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_MspInit+0x54>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_MspInit+0x54>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_MspInit+0x54>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_MspInit+0x54>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_MspInit+0x54>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	210f      	movs	r1, #15
 8001626:	f06f 0001 	mvn.w	r0, #1
 800162a:	f000 fa5a 	bl	8001ae2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f95c 	bl	8001928 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001670:	f002 ff2a 	bl	80044c8 <xTaskGetSchedulerState>
 8001674:	4603      	mov	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800167a:	f003 fd15 	bl	80050a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return 1;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_kill>:

int _kill(int pid, int sig)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169c:	f004 ff7a 	bl	8006594 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2216      	movs	r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_exit>:

void _exit (int status)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffe7 	bl	8001692 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c4:	e7fe      	b.n	80016c4 <_exit+0x12>

080016c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e00a      	b.n	80016ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d8:	f3af 8000 	nop.w
 80016dc:	4601      	mov	r1, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	60ba      	str	r2, [r7, #8]
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf0      	blt.n	80016d8 <_read+0x12>
  }

  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e009      	b.n	8001726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	60ba      	str	r2, [r7, #8]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	dbf1      	blt.n	8001712 <_write+0x12>
  }
  return len;
 800172e:	687b      	ldr	r3, [r7, #4]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_close>:

int _close(int file)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001760:	605a      	str	r2, [r3, #4]
  return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_isatty>:

int _isatty(int file)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f004 fee0 	bl	8006594 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20020000 	.word	0x20020000
 8001800:	00000400 	.word	0x00000400
 8001804:	2000060c 	.word	0x2000060c
 8001808:	200050b0 	.word	0x200050b0

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001836:	490e      	ldr	r1, [pc, #56]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800184c:	4c0b      	ldr	r4, [pc, #44]	; (800187c <LoopFillZerobss+0x26>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185a:	f7ff ffd7 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f004 fe9f 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7ff fd69 	bl	8001338 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001874:	0800a2d8 	.word	0x0800a2d8
  ldr r2, =_sbss
 8001878:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800187c:	200050b0 	.word	0x200050b0

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f90d 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fe94 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f917 	bl	8001b1a <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f000 f8ed 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	20000610 	.word	0x20000610

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000610 	.word	0x20000610

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e159      	b.n	8001e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8148 	bne.w	8001dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a2 	beq.w	8001dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x1fe>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x1fa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x1f6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x1f2>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f aea2 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e267      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d00c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d112      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e242      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fd12 	bl	8001950 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fd0e 	bl	8001950 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e207      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fcfe 	bl	8001950 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fcfa 	bl	8001950 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1f3      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c7      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fcb3 	bl	8001950 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff fcaf 	bl	8001950 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a8      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fc92 	bl	8001950 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002030:	f7ff fc8e 	bl	8001950 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e187      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d036      	beq.n	80020c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff fc72 	bl	8001950 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff fc6e 	bl	8001950 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e167      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
 800208e:	e01b      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fc5b 	bl	8001950 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	e00e      	b.n	80020bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209e:	f7ff fc57 	bl	8001950 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d907      	bls.n	80020bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e150      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470000 	.word	0x42470000
 80020b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ea      	bne.n	800209e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8097 	beq.w	8002204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7ff fc17 	bl	8001950 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7ff fc13 	bl	8001950 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e10c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x2ea>
 800214c:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x30c>
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800217c:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff fbd8 	bl	8001950 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7ff fbd4 	bl	8001950 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0cb      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ee      	beq.n	80021a4 <HAL_RCC_OscConfig+0x334>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7ff fbc2 	bl	8001950 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7ff fbbe 	bl	8001950 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0b5      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a1 	beq.w	8002350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d05c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d141      	bne.n	80022a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fb92 	bl	8001950 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff fb8e 	bl	8001950 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e087      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	491b      	ldr	r1, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fb67 	bl	8001950 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff fb63 	bl	8001950 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e05c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x416>
 80022a4:	e054      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fb50 	bl	8001950 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff fb4c 	bl	8001950 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e045      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e038      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d028      	beq.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d121      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cc      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d90c      	bls.n	800239c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d044      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e067      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4934      	ldr	r1, [pc, #208]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7ff fa7e 	bl	8001950 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff fa7a 	bl	8001950 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f9de 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08009e8c 	.word	0x08009e8c
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b090      	sub	sp, #64	; 0x40
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80a1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e09b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002564:	e09b      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800256a:	e098      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	627a      	str	r2, [r7, #36]	; 0x24
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002594:	2100      	movs	r1, #0
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002598:	fb03 f201 	mul.w	r2, r3, r1
 800259c:	2300      	movs	r3, #0
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a6:	fba0 1202 	umull	r1, r2, r0, r2
 80025aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ac:	460a      	mov	r2, r1
 80025ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	4413      	add	r3, r2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025c6:	f7fe fb67 	bl	8000c98 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4613      	mov	r3, r2
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d2:	e053      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	2200      	movs	r2, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	617a      	str	r2, [r7, #20]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	4652      	mov	r2, sl
 80025ec:	465b      	mov	r3, fp
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ebb2 080a 	subs.w	r8, r2, sl
 8002606:	eb63 090b 	sbc.w	r9, r3, fp
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800261a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800261e:	ebb2 0408 	subs.w	r4, r2, r8
 8002622:	eb63 0509 	sbc.w	r5, r3, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	00eb      	lsls	r3, r5, #3
 8002630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002634:	00e2      	lsls	r2, r4, #3
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	eb14 030a 	adds.w	r3, r4, sl
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	eb45 030b 	adc.w	r3, r5, fp
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	2200      	movs	r2, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	f7fe fb12 	bl	8000c98 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800268c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3740      	adds	r7, #64	; 0x40
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <__NVIC_SetPriority>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002710:	2100      	movs	r1, #0
 8002712:	f06f 0004 	mvn.w	r0, #4
 8002716:	f7ff ffcf 	bl	80026b8 <__NVIC_SetPriority>
#endif
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002726:	f3ef 8305 	mrs	r3, IPSR
 800272a:	603b      	str	r3, [r7, #0]
  return(result);
 800272c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002732:	f06f 0305 	mvn.w	r3, #5
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e00c      	b.n	8002754 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <osKernelInitialize+0x44>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <osKernelInitialize+0x44>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002748:	2300      	movs	r3, #0
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	e002      	b.n	8002754 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000614 	.word	0x20000614

08002768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276e:	f3ef 8305 	mrs	r3, IPSR
 8002772:	603b      	str	r3, [r7, #0]
  return(result);
 8002774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800277a:	f06f 0305 	mvn.w	r3, #5
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	e010      	b.n	80027a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <osKernelStart+0x48>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d109      	bne.n	800279e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800278a:	f7ff ffbf 	bl	800270c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <osKernelStart+0x48>)
 8002790:	2202      	movs	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002794:	f001 fa50 	bl	8003c38 <vTaskStartScheduler>
      stat = osOK;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	e002      	b.n	80027a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000614 	.word	0x20000614

080027b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c4:	f3ef 8305 	mrs	r3, IPSR
 80027c8:	617b      	str	r3, [r7, #20]
  return(result);
 80027ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d17e      	bne.n	80028ce <osThreadNew+0x11a>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07b      	beq.n	80028ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027da:	2318      	movs	r3, #24
 80027dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d045      	beq.n	800287a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <osThreadNew+0x48>
        name = attr->name;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <osThreadNew+0x6e>
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b38      	cmp	r3, #56	; 0x38
 8002814:	d805      	bhi.n	8002822 <osThreadNew+0x6e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <osThreadNew+0x72>
        return (NULL);
 8002822:	2300      	movs	r3, #0
 8002824:	e054      	b.n	80028d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <osThreadNew+0xa8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b5b      	cmp	r3, #91	; 0x5b
 8002844:	d90a      	bls.n	800285c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <osThreadNew+0xa8>
        mem = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e010      	b.n	800287e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10c      	bne.n	800287e <osThreadNew+0xca>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <osThreadNew+0xca>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <osThreadNew+0xca>
          mem = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e001      	b.n	800287e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d110      	bne.n	80028a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800288c:	9202      	str	r2, [sp, #8]
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fff6 	bl	800388c <xTaskCreateStatic>
 80028a0:	4603      	mov	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	e013      	b.n	80028ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d110      	bne.n	80028ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 f841 	bl	8003946 <xTaskCreate>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <osThreadNew+0x11a>
            hTask = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ce:	693b      	ldr	r3, [r7, #16]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e0:	f3ef 8305 	mrs	r3, IPSR
 80028e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <osDelay+0x1c>
    stat = osErrorISR;
 80028ec:	f06f 0305 	mvn.w	r3, #5
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e007      	b.n	8002904 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f001 f966 	bl	8003bd0 <vTaskDelay>
    }
  }

  return (stat);
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800290e:	b580      	push	{r7, lr}
 8002910:	b08a      	sub	sp, #40	; 0x28
 8002912:	af02      	add	r7, sp, #8
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291e:	f3ef 8305 	mrs	r3, IPSR
 8002922:	613b      	str	r3, [r7, #16]
  return(result);
 8002924:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002926:	2b00      	cmp	r3, #0
 8002928:	d15f      	bne.n	80029ea <osMessageQueueNew+0xdc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05c      	beq.n	80029ea <osMessageQueueNew+0xdc>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d059      	beq.n	80029ea <osMessageQueueNew+0xdc>
    mem = -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d029      	beq.n	8002996 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <osMessageQueueNew+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b4f      	cmp	r3, #79	; 0x4f
 8002950:	d90e      	bls.n	8002970 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <osMessageQueueNew+0x62>
        mem = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e014      	b.n	800299a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d110      	bne.n	800299a <osMessageQueueNew+0x8c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10c      	bne.n	800299a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <osMessageQueueNew+0x8c>
          mem = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e001      	b.n	800299a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10b      	bne.n	80029b8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2100      	movs	r1, #0
 80029aa:	9100      	str	r1, [sp, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fa2e 	bl	8002e10 <xQueueGenericCreateStatic>
 80029b4:	61f8      	str	r0, [r7, #28]
 80029b6:	e008      	b.n	80029ca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80029be:	2200      	movs	r2, #0
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa9c 	bl	8002f00 <xQueueGenericCreate>
 80029c8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <osMessageQueueNew+0xd0>
        name = attr->name;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e001      	b.n	80029e2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80029e2:	6979      	ldr	r1, [r7, #20]
 80029e4:	69f8      	ldr	r0, [r7, #28]
 80029e6:	f000 fef3 	bl	80037d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80029ea:	69fb      	ldr	r3, [r7, #28]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a0c:	f3ef 8305 	mrs	r3, IPSR
 8002a10:	617b      	str	r3, [r7, #20]
  return(result);
 8002a12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d028      	beq.n	8002a6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <osMessageQueuePut+0x36>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <osMessageQueuePut+0x36>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002a2a:	f06f 0303 	mvn.w	r3, #3
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	e038      	b.n	8002aa4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002a36:	f107 0210 	add.w	r2, r7, #16
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	69b8      	ldr	r0, [r7, #24]
 8002a40:	f000 fbba 	bl	80031b8 <xQueueGenericSendFromISR>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d003      	beq.n	8002a52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002a4a:	f06f 0302 	mvn.w	r3, #2
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e028      	b.n	8002aa4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d025      	beq.n	8002aa4 <osMessageQueuePut+0xb0>
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <osMessageQueuePut+0xbc>)
 8002a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	e01c      	b.n	8002aa4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <osMessageQueuePut+0x82>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002a76:	f06f 0303 	mvn.w	r3, #3
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e012      	b.n	8002aa4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	69b8      	ldr	r0, [r7, #24]
 8002a86:	f000 fa99 	bl	8002fbc <xQueueGenericSend>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d009      	beq.n	8002aa4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002a96:	f06f 0301 	mvn.w	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e002      	b.n	8002aa4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002a9e:	f06f 0302 	mvn.w	r3, #2
 8002aa2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aca:	f3ef 8305 	mrs	r3, IPSR
 8002ace:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <osMessageQueueGet+0x34>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <osMessageQueueGet+0x34>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002ae8:	f06f 0303 	mvn.w	r3, #3
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e037      	b.n	8002b60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	461a      	mov	r2, r3
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f000 fcd7 	bl	80034b0 <xQueueReceiveFromISR>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d003      	beq.n	8002b10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002b08:	f06f 0302 	mvn.w	r3, #2
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e027      	b.n	8002b60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <osMessageQueueGet+0xac>
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <osMessageQueueGet+0xb8>)
 8002b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	e01b      	b.n	8002b60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <osMessageQueueGet+0x80>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002b34:	f06f 0303 	mvn.w	r3, #3
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e011      	b.n	8002b60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	69b8      	ldr	r0, [r7, #24]
 8002b42:	f000 fbd5 	bl	80032f0 <xQueueReceive>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d009      	beq.n	8002b60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002b52:	f06f 0301 	mvn.w	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	e002      	b.n	8002b60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002b5a:	f06f 0302 	mvn.w	r3, #2
 8002b5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002b60:	69fb      	ldr	r3, [r7, #28]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <vApplicationGetIdleTaskMemory+0x30>)
 8002b86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	601a      	str	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000618 	.word	0x20000618
 8002ba0:	20000674 	.word	0x20000674

08002ba4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <vApplicationGetTimerTaskMemory+0x30>)
 8002bba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20000874 	.word	0x20000874
 8002bd4:	200008d0 	.word	0x200008d0

08002bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0208 	add.w	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d103      	bne.n	8002c9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e00c      	b.n	8002cb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e002      	b.n	8002ca8 <vListInsert+0x2e>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d2f6      	bcs.n	8002ca2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6852      	ldr	r2, [r2, #4]
 8002d0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d103      	bne.n	8002d20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d6a:	f002 f90b 	bl	8004f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	441a      	add	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	22ff      	movs	r2, #255	; 0xff
 8002db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d114      	bne.n	8002dea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01a      	beq.n	8002dfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3310      	adds	r3, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f9bd 	bl	800414c <xTaskRemoveFromEventList>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <xQueueGenericReset+0xcc>)
 8002dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	e009      	b.n	8002dfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3310      	adds	r3, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fef2 	bl	8002bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff feed 	bl	8002bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dfe:	f002 f8f1 	bl	8004fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	; 0x38
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <xQueueGenericCreateStatic+0x52>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <xQueueGenericCreateStatic+0x56>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <xQueueGenericCreateStatic+0x58>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	623b      	str	r3, [r7, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <xQueueGenericCreateStatic+0x7e>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericCreateStatic+0x82>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericCreateStatic+0x84>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	61fb      	str	r3, [r7, #28]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002eae:	2350      	movs	r3, #80	; 0x50
 8002eb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b50      	cmp	r3, #80	; 0x50
 8002eb6:	d00a      	beq.n	8002ece <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	61bb      	str	r3, [r7, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ece:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ee2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f83f 	bl	8002f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3730      	adds	r7, #48	; 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	613b      	str	r3, [r7, #16]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3350      	adds	r3, #80	; 0x50
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 f945 	bl	80051c8 <pvPortMalloc>
 8002f3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d011      	beq.n	8002f6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3350      	adds	r3, #80	; 0x50
 8002f4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f805 	bl	8002f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e002      	b.n	8002f96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	69b8      	ldr	r0, [r7, #24]
 8002fa6:	f7ff fecb 	bl	8002d40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xQueueGenericSend+0x32>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <xQueueGenericSend+0x40>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <xQueueGenericSend+0x44>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <xQueueGenericSend+0x46>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <xQueueGenericSend+0x60>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d103      	bne.n	800302a <xQueueGenericSend+0x6e>
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0x72>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSend+0x74>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGenericSend+0x8e>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f001 fa3d 	bl	80044c8 <xTaskGetSchedulerState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <xQueueGenericSend+0x9e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueGenericSend+0xa2>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueGenericSend+0xa4>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericSend+0xbe>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61fb      	str	r3, [r7, #28]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307a:	f001 ff83 	bl	8004f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <xQueueGenericSend+0xd4>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d129      	bne.n	80030e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003096:	f000 fa8b 	bl	80035b0 <prvCopyDataToQueue>
 800309a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f84f 	bl	800414c <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <xQueueGenericSend+0x1f8>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	e00a      	b.n	80030dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030cc:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <xQueueGenericSend+0x1f8>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030dc:	f001 ff82 	bl	8004fe4 <vPortExitCritical>
				return pdPASS;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e063      	b.n	80031ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ea:	f001 ff7b 	bl	8004fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e05c      	b.n	80031ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f889 	bl	8004214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003102:	2301      	movs	r3, #1
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003106:	f001 ff6d 	bl	8004fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310a:	f000 fdfb 	bl	8003d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800310e:	f001 ff39 	bl	8004f84 <vPortEnterCritical>
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <xQueueGenericSend+0x16c>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312e:	b25b      	sxtb	r3, r3
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d103      	bne.n	800313e <xQueueGenericSend+0x182>
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313e:	f001 ff51 	bl	8004fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003142:	1d3a      	adds	r2, r7, #4
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f878 	bl	8004240 <xTaskCheckForTimeOut>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d124      	bne.n	80031a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003158:	f000 fb22 	bl	80037a0 <prvIsQueueFull>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	3310      	adds	r3, #16
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 ff9e 	bl	80040ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003172:	f000 faad 	bl	80036d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003176:	f000 fdd3 	bl	8003d20 <xTaskResumeAll>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f47f af7c 	bne.w	800307a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <xQueueGenericSend+0x1f8>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	e772      	b.n	800307a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003196:	f000 fa9b 	bl	80036d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319a:	f000 fdc1 	bl	8003d20 <xTaskResumeAll>
 800319e:	e76c      	b.n	800307a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a2:	f000 fa95 	bl	80036d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a6:	f000 fdbb 	bl	8003d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b090      	sub	sp, #64	; 0x40
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <xQueueGenericSendFromISR+0x3c>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <xQueueGenericSendFromISR+0x40>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <xQueueGenericSendFromISR+0x42>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d103      	bne.n	8003222 <xQueueGenericSendFromISR+0x6a>
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <xQueueGenericSendFromISR+0x6e>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericSendFromISR+0x70>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	623b      	str	r3, [r7, #32]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003242:	f001 ff81 	bl	8005148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003246:	f3ef 8211 	mrs	r2, BASEPRI
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61fa      	str	r2, [r7, #28]
 800325c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800325e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <xQueueGenericSendFromISR+0xbc>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d12f      	bne.n	80032d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800328a:	f000 f991 	bl	80035b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800328e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d112      	bne.n	80032be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	3324      	adds	r3, #36	; 0x24
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff51 	bl	800414c <xTaskRemoveFromEventList>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e007      	b.n	80032ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032ce:	2301      	movs	r3, #1
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032d2:	e001      	b.n	80032d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3740      	adds	r7, #64	; 0x40
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <xQueueReceive+0x30>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	623b      	str	r3, [r7, #32]
}
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <xQueueReceive+0x3e>
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueReceive+0x42>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueReceive+0x44>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueReceive+0x5e>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61fb      	str	r3, [r7, #28]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800334e:	f001 f8bb 	bl	80044c8 <xTaskGetSchedulerState>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <xQueueReceive+0x6e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <xQueueReceive+0x72>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <xQueueReceive+0x74>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <xQueueReceive+0x8e>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61bb      	str	r3, [r7, #24]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800337e:	f001 fe01 	bl	8004f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01f      	beq.n	80033ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003392:	f000 f977 	bl	8003684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00f      	beq.n	80033c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	3310      	adds	r3, #16
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fece 	bl	800414c <xTaskRemoveFromEventList>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <xQueueReceive+0x1bc>)
 80033b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033c6:	f001 fe0d 	bl	8004fe4 <vPortExitCritical>
				return pdPASS;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e069      	b.n	80034a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033d4:	f001 fe06 	bl	8004fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033d8:	2300      	movs	r3, #0
 80033da:	e062      	b.n	80034a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 ff14 	bl	8004214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033f0:	f001 fdf8 	bl	8004fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033f4:	f000 fc86 	bl	8003d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033f8:	f001 fdc4 	bl	8004f84 <vPortEnterCritical>
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003402:	b25b      	sxtb	r3, r3
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d103      	bne.n	8003412 <xQueueReceive+0x122>
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003418:	b25b      	sxtb	r3, r3
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d103      	bne.n	8003428 <xQueueReceive+0x138>
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003428:	f001 fddc 	bl	8004fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800342c:	1d3a      	adds	r2, r7, #4
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 ff03 	bl	8004240 <xTaskCheckForTimeOut>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d123      	bne.n	8003488 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003442:	f000 f997 	bl	8003774 <prvIsQueueEmpty>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fe29 	bl	80040ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800345a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345c:	f000 f938 	bl	80036d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003460:	f000 fc5e 	bl	8003d20 <xTaskResumeAll>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d189      	bne.n	800337e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <xQueueReceive+0x1bc>)
 800346c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	e780      	b.n	800337e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800347c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347e:	f000 f927 	bl	80036d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003482:	f000 fc4d 	bl	8003d20 <xTaskResumeAll>
 8003486:	e77a      	b.n	800337e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800348a:	f000 f921 	bl	80036d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800348e:	f000 fc47 	bl	8003d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003494:	f000 f96e 	bl	8003774 <prvIsQueueEmpty>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	f43f af6f 	beq.w	800337e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3730      	adds	r7, #48	; 0x30
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000ed04 	.word	0xe000ed04

080034b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	623b      	str	r3, [r7, #32]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <xQueueReceiveFromISR+0x3a>
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <xQueueReceiveFromISR+0x3e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueReceiveFromISR+0x40>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	61fb      	str	r3, [r7, #28]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800350a:	f001 fe1d 	bl	8005148 <vPortValidateInterruptPriority>
	__asm volatile
 800350e:	f3ef 8211 	mrs	r2, BASEPRI
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	61ba      	str	r2, [r7, #24]
 8003524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02f      	beq.n	8003596 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003544:	f000 f89e 	bl	8003684 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d112      	bne.n	8003580 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	3310      	adds	r3, #16
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fdf0 	bl	800414c <xTaskRemoveFromEventList>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e007      	b.n	8003590 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003584:	3301      	adds	r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b25a      	sxtb	r2, r3
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003590:	2301      	movs	r3, #1
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
 8003594:	e001      	b.n	800359a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f383 8811 	msr	BASEPRI, r3
}
 80035a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3738      	adds	r7, #56	; 0x38
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d14d      	bne.n	8003672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 ff92 	bl	8004504 <xTaskPriorityDisinherit>
 80035e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	e043      	b.n	8003672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d119      	bne.n	8003624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6858      	ldr	r0, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	461a      	mov	r2, r3
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	f002 fff6 	bl	80065ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	441a      	add	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d32b      	bcc.n	8003672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	e026      	b.n	8003672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68d8      	ldr	r0, [r3, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	461a      	mov	r2, r3
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	f002 ffdc 	bl	80065ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	425b      	negs	r3, r3
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d207      	bcs.n	8003660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	425b      	negs	r3, r3
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d105      	bne.n	8003672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3b01      	subs	r3, #1
 8003670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800367a:	697b      	ldr	r3, [r7, #20]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d018      	beq.n	80036c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	441a      	add	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d303      	bcc.n	80036b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68d9      	ldr	r1, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	461a      	mov	r2, r3
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	f002 ff92 	bl	80065ec <memcpy>
	}
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036d8:	f001 fc54 	bl	8004f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036e4:	e011      	b.n	800370a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3324      	adds	r3, #36	; 0x24
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fd2a 	bl	800414c <xTaskRemoveFromEventList>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036fe:	f000 fe01 	bl	8004304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3b01      	subs	r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	dce9      	bgt.n	80036e6 <prvUnlockQueue+0x16>
 8003712:	e000      	b.n	8003716 <prvUnlockQueue+0x46>
					break;
 8003714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	22ff      	movs	r2, #255	; 0xff
 800371a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800371e:	f001 fc61 	bl	8004fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003722:	f001 fc2f 	bl	8004f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800372c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800372e:	e011      	b.n	8003754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d012      	beq.n	800375e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3310      	adds	r3, #16
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fd05 	bl	800414c <xTaskRemoveFromEventList>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003748:	f000 fddc 	bl	8004304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	3b01      	subs	r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003758:	2b00      	cmp	r3, #0
 800375a:	dce9      	bgt.n	8003730 <prvUnlockQueue+0x60>
 800375c:	e000      	b.n	8003760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800375e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	22ff      	movs	r2, #255	; 0xff
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003768:	f001 fc3c 	bl	8004fe4 <vPortExitCritical>
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800377c:	f001 fc02 	bl	8004f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e001      	b.n	8003792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003792:	f001 fc27 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037a8:	f001 fbec 	bl	8004f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d102      	bne.n	80037be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e001      	b.n	80037c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037c2:	f001 fc0f 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 80037c6:	68fb      	ldr	r3, [r7, #12]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e014      	b.n	800380a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <vQueueAddToRegistry+0x50>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <vQueueAddToRegistry+0x50>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <vQueueAddToRegistry+0x50>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003802:	e006      	b.n	8003812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b07      	cmp	r3, #7
 800380e:	d9e7      	bls.n	80037e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000cd0 	.word	0x20000cd0

08003824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003834:	f001 fba6 	bl	8004f84 <vPortEnterCritical>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d103      	bne.n	800384e <vQueueWaitForMessageRestricted+0x2a>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	b25b      	sxtb	r3, r3
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d103      	bne.n	8003864 <vQueueWaitForMessageRestricted+0x40>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003864:	f001 fbbe 	bl	8004fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3324      	adds	r3, #36	; 0x24
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fc3b 	bl	80040f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff26 	bl	80036d0 <prvUnlockQueue>
	}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08e      	sub	sp, #56	; 0x38
 8003890:	af04      	add	r7, sp, #16
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	623b      	str	r3, [r7, #32]
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	61fb      	str	r3, [r7, #28]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038d2:	235c      	movs	r3, #92	; 0x5c
 80038d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b5c      	cmp	r3, #92	; 0x5c
 80038da:	d00a      	beq.n	80038f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	61bb      	str	r3, [r7, #24]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01e      	beq.n	8003938 <xTaskCreateStatic+0xac>
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003912:	2300      	movs	r3, #0
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f850 	bl	80039d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003932:	f000 f8dd 	bl	8003af0 <prvAddNewTaskToReadyList>
 8003936:	e001      	b.n	800393c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800393c:	697b      	ldr	r3, [r7, #20]
	}
 800393e:	4618      	mov	r0, r3
 8003940:	3728      	adds	r7, #40	; 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003946:	b580      	push	{r7, lr}
 8003948:	b08c      	sub	sp, #48	; 0x30
 800394a:	af04      	add	r7, sp, #16
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fc34 	bl	80051c8 <pvPortMalloc>
 8003960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003968:	205c      	movs	r0, #92	; 0x5c
 800396a:	f001 fc2d 	bl	80051c8 <pvPortMalloc>
 800396e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
 800397c:	e005      	b.n	800398a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800397e:	6978      	ldr	r0, [r7, #20]
 8003980:	f001 fcee 	bl	8005360 <vPortFree>
 8003984:	e001      	b.n	800398a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d017      	beq.n	80039c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	2300      	movs	r3, #0
 800399c:	9303      	str	r3, [sp, #12]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f80e 	bl	80039d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b4:	69f8      	ldr	r0, [r7, #28]
 80039b6:	f000 f89b 	bl	8003af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e002      	b.n	80039c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039c6:	69bb      	ldr	r3, [r7, #24]
	}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	461a      	mov	r2, r3
 80039e8:	21a5      	movs	r1, #165	; 0xa5
 80039ea:	f002 fd81 	bl	80064f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039f8:	3b01      	subs	r3, #1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f023 0307 	bic.w	r3, r3, #7
 8003a06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	617b      	str	r3, [r7, #20]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01f      	beq.n	8003a6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e012      	b.n	8003a5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	7819      	ldrb	r1, [r3, #0]
 8003a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	3334      	adds	r3, #52	; 0x34
 8003a44:	460a      	mov	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b0f      	cmp	r3, #15
 8003a5e:	d9e9      	bls.n	8003a34 <prvInitialiseNewTask+0x64>
 8003a60:	e000      	b.n	8003a64 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a6c:	e003      	b.n	8003a76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	2b37      	cmp	r3, #55	; 0x37
 8003a7a:	d901      	bls.n	8003a80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a7c:	2337      	movs	r3, #55	; 0x37
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	2200      	movs	r2, #0
 8003a90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	3304      	adds	r3, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f8be 	bl	8002c18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	3318      	adds	r3, #24
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff f8b9 	bl	8002c18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	69b8      	ldr	r0, [r7, #24]
 8003ad0:	f001 f928 	bl	8004d24 <pxPortInitialiseStack>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003af8:	f001 fa44 	bl	8004f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d110      	bne.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b1c:	f000 fc16 	bl	800434c <prvInitialiseTaskLists>
 8003b20:	e00d      	b.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <prvAddNewTaskToReadyList+0xcc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d802      	bhi.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <prvAddNewTaskToReadyList+0xd4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d903      	bls.n	8003b64 <prvAddNewTaskToReadyList+0x74>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <prvAddNewTaskToReadyList+0xd4>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <prvAddNewTaskToReadyList+0xd8>)
 8003b72:	441a      	add	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff f859 	bl	8002c32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b80:	f001 fa30 	bl	8004fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <prvAddNewTaskToReadyList+0xcc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d207      	bcs.n	8003baa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <prvAddNewTaskToReadyList+0xdc>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200011e4 	.word	0x200011e4
 8003bb8:	20000d10 	.word	0x20000d10
 8003bbc:	200011f0 	.word	0x200011f0
 8003bc0:	20001200 	.word	0x20001200
 8003bc4:	200011ec 	.word	0x200011ec
 8003bc8:	20000d14 	.word	0x20000d14
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <vTaskDelay+0x60>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <vTaskDelay+0x30>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60bb      	str	r3, [r7, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c00:	f000 f880 	bl	8003d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c04:	2100      	movs	r1, #0
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fcea 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c0c:	f000 f888 	bl	8003d20 <xTaskResumeAll>
 8003c10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <vTaskDelay+0x64>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	2000120c 	.word	0x2000120c
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c46:	463a      	mov	r2, r7
 8003c48:	1d39      	adds	r1, r7, #4
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff8e 	bl	8002b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	9202      	str	r2, [sp, #8]
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	460a      	mov	r2, r1
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <vTaskStartScheduler+0xb4>)
 8003c68:	4821      	ldr	r0, [pc, #132]	; (8003cf0 <vTaskStartScheduler+0xb8>)
 8003c6a:	f7ff fe0f 	bl	800388c <xTaskCreateStatic>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <vTaskStartScheduler+0xbc>)
 8003c72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <vTaskStartScheduler+0xbc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e001      	b.n	8003c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c8c:	f000 fcfc 	bl	8004688 <xTimerCreateTimerTask>
 8003c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d116      	bne.n	8003cc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	613b      	str	r3, [r7, #16]
}
 8003caa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <vTaskStartScheduler+0xc0>)
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <vTaskStartScheduler+0xc4>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <vTaskStartScheduler+0xc8>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cc0:	f001 f8be 	bl	8004e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc4:	e00e      	b.n	8003ce4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d10a      	bne.n	8003ce4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <vTaskStartScheduler+0xaa>
}
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	08009dcc 	.word	0x08009dcc
 8003cf0:	0800431d 	.word	0x0800431d
 8003cf4:	20001208 	.word	0x20001208
 8003cf8:	20001204 	.word	0x20001204
 8003cfc:	200011f0 	.word	0x200011f0
 8003d00:	200011e8 	.word	0x200011e8

08003d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <vTaskSuspendAll+0x18>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <vTaskSuspendAll+0x18>)
 8003d10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	2000120c 	.word	0x2000120c

08003d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <xTaskResumeAll+0x118>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	603b      	str	r3, [r7, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d4c:	f001 f91a 	bl	8004f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d50:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <xTaskResumeAll+0x118>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <xTaskResumeAll+0x118>)
 8003d58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <xTaskResumeAll+0x118>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d162      	bne.n	8003e28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <xTaskResumeAll+0x11c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d05e      	beq.n	8003e28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d6a:	e02f      	b.n	8003dcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6c:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <xTaskResumeAll+0x120>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3318      	adds	r3, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe ffb7 	bl	8002cec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ffb2 	bl	8002cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <xTaskResumeAll+0x124>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <xTaskResumeAll+0x7c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <xTaskResumeAll+0x124>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <xTaskResumeAll+0x128>)
 8003daa:	441a      	add	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe ff3d 	bl	8002c32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <xTaskResumeAll+0x12c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <xTaskResumeAll+0x130>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <xTaskResumeAll+0x120>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1cb      	bne.n	8003d6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dda:	f000 fb55 	bl	8004488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <xTaskResumeAll+0x134>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dea:	f000 f847 	bl	8003e7c <xTaskIncrementTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <xTaskResumeAll+0x130>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f1      	bne.n	8003dea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <xTaskResumeAll+0x134>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <xTaskResumeAll+0x130>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <xTaskResumeAll+0x138>)
 8003e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e28:	f001 f8dc 	bl	8004fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000120c 	.word	0x2000120c
 8003e3c:	200011e4 	.word	0x200011e4
 8003e40:	200011a4 	.word	0x200011a4
 8003e44:	200011ec 	.word	0x200011ec
 8003e48:	20000d14 	.word	0x20000d14
 8003e4c:	20000d10 	.word	0x20000d10
 8003e50:	200011f8 	.word	0x200011f8
 8003e54:	200011f4 	.word	0x200011f4
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <xTaskGetTickCount+0x1c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e68:	687b      	ldr	r3, [r7, #4]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	200011e8 	.word	0x200011e8

08003e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e86:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <xTaskIncrementTick+0x148>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 808f 	bne.w	8003fae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e90:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e98:	4a4b      	ldr	r2, [pc, #300]	; (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d120      	bne.n	8003ee6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <xTaskIncrementTick+0x46>
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <xTaskIncrementTick+0x154>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <xTaskIncrementTick+0x154>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b3e      	ldr	r3, [pc, #248]	; (8003fd4 <xTaskIncrementTick+0x158>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <xTaskIncrementTick+0x158>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	f000 fad1 	bl	8004488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d349      	bcc.n	8003f84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	601a      	str	r2, [r3, #0]
					break;
 8003f02:	e03f      	b.n	8003f84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d203      	bcs.n	8003f24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f22:	e02f      	b.n	8003f84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fedf 	bl	8002cec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fed6 	bl	8002cec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <xTaskIncrementTick+0x160>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d903      	bls.n	8003f54 <xTaskIncrementTick+0xd8>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <xTaskIncrementTick+0x160>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <xTaskIncrementTick+0x164>)
 8003f62:	441a      	add	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f7fe fe61 	bl	8002c32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <xTaskIncrementTick+0x168>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b8      	bcc.n	8003ef0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	e7b5      	b.n	8003ef0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <xTaskIncrementTick+0x168>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	4915      	ldr	r1, [pc, #84]	; (8003fe0 <xTaskIncrementTick+0x164>)
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d901      	bls.n	8003fa0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <xTaskIncrementTick+0x16c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e004      	b.n	8003fb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <xTaskIncrementTick+0x170>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <xTaskIncrementTick+0x170>)
 8003fb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fb8:	697b      	ldr	r3, [r7, #20]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000120c 	.word	0x2000120c
 8003fc8:	200011e8 	.word	0x200011e8
 8003fcc:	2000119c 	.word	0x2000119c
 8003fd0:	200011a0 	.word	0x200011a0
 8003fd4:	200011fc 	.word	0x200011fc
 8003fd8:	20001204 	.word	0x20001204
 8003fdc:	200011ec 	.word	0x200011ec
 8003fe0:	20000d14 	.word	0x20000d14
 8003fe4:	20000d10 	.word	0x20000d10
 8003fe8:	200011f8 	.word	0x200011f8
 8003fec:	200011f4 	.word	0x200011f4

08003ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <vTaskSwitchContext+0xa8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <vTaskSwitchContext+0xac>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004004:	e041      	b.n	800408a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <vTaskSwitchContext+0xac>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <vTaskSwitchContext+0xb0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e010      	b.n	8004036 <vTaskSwitchContext+0x46>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <vTaskSwitchContext+0x40>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	607b      	str	r3, [r7, #4]
}
 800402c:	bf00      	nop
 800402e:	e7fe      	b.n	800402e <vTaskSwitchContext+0x3e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b01      	subs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	491b      	ldr	r1, [pc, #108]	; (80040a4 <vTaskSwitchContext+0xb4>)
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0e4      	beq.n	8004014 <vTaskSwitchContext+0x24>
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <vTaskSwitchContext+0xb4>)
 8004056:	4413      	add	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3308      	adds	r3, #8
 800406c:	429a      	cmp	r2, r3
 800406e:	d104      	bne.n	800407a <vTaskSwitchContext+0x8a>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <vTaskSwitchContext+0xb8>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <vTaskSwitchContext+0xb0>)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000120c 	.word	0x2000120c
 800409c:	200011f8 	.word	0x200011f8
 80040a0:	200011ec 	.word	0x200011ec
 80040a4:	20000d14 	.word	0x20000d14
 80040a8:	20000d10 	.word	0x20000d10

080040ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <vTaskPlaceOnEventList+0x44>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3318      	adds	r3, #24
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fe fdcd 	bl	8002c7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040e0:	2101      	movs	r1, #1
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f000 fa7c 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000d10 	.word	0x20000d10

080040f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	617b      	str	r3, [r7, #20]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <vTaskPlaceOnEventListRestricted+0x54>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3318      	adds	r3, #24
 8004122:	4619      	mov	r1, r3
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7fe fd84 	bl	8002c32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	68b8      	ldr	r0, [r7, #8]
 800413a:	f000 fa51 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
	}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000d10 	.word	0x20000d10

0800414c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60fb      	str	r3, [r7, #12]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3318      	adds	r3, #24
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fdb5 	bl	8002cec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <xTaskRemoveFromEventList+0xb0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3304      	adds	r3, #4
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fdac 	bl	8002cec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <xTaskRemoveFromEventList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d903      	bls.n	80041a8 <xTaskRemoveFromEventList+0x5c>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <xTaskRemoveFromEventList+0xb4>)
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <xTaskRemoveFromEventList+0xb8>)
 80041b6:	441a      	add	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fe fd37 	bl	8002c32 <vListInsertEnd>
 80041c4:	e005      	b.n	80041d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4619      	mov	r1, r3
 80041cc:	480e      	ldr	r0, [pc, #56]	; (8004208 <xTaskRemoveFromEventList+0xbc>)
 80041ce:	f7fe fd30 	bl	8002c32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <xTaskRemoveFromEventList+0xc0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d905      	bls.n	80041ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <xTaskRemoveFromEventList+0xc4>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e001      	b.n	80041f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041f0:	697b      	ldr	r3, [r7, #20]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000120c 	.word	0x2000120c
 8004200:	200011ec 	.word	0x200011ec
 8004204:	20000d14 	.word	0x20000d14
 8004208:	200011a4 	.word	0x200011a4
 800420c:	20000d10 	.word	0x20000d10
 8004210:	200011f8 	.word	0x200011f8

08004214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <vTaskInternalSetTimeOutState+0x24>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <vTaskInternalSetTimeOutState+0x28>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	200011fc 	.word	0x200011fc
 800423c:	200011e8 	.word	0x200011e8

08004240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004282:	f000 fe7f 	bl	8004f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <xTaskCheckForTimeOut+0xbc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d102      	bne.n	80042a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	e023      	b.n	80042ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <xTaskCheckForTimeOut+0xc0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d007      	beq.n	80042c2 <xTaskCheckForTimeOut+0x82>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e015      	b.n	80042ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d20b      	bcs.n	80042e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff9b 	bl	8004214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e004      	b.n	80042ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ee:	f000 fe79 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 80042f2:	69fb      	ldr	r3, [r7, #28]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200011e8 	.word	0x200011e8
 8004300:	200011fc 	.word	0x200011fc

08004304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <vTaskMissedYield+0x14>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	200011f8 	.word	0x200011f8

0800431c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004324:	f000 f852 	bl	80043cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <prvIdleTask+0x28>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d9f9      	bls.n	8004324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <prvIdleTask+0x2c>)
 8004332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004340:	e7f0      	b.n	8004324 <prvIdleTask+0x8>
 8004342:	bf00      	nop
 8004344:	20000d14 	.word	0x20000d14
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	e00c      	b.n	8004372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a12      	ldr	r2, [pc, #72]	; (80043ac <prvInitialiseTaskLists+0x60>)
 8004364:	4413      	add	r3, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fc36 	bl	8002bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3301      	adds	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b37      	cmp	r3, #55	; 0x37
 8004376:	d9ef      	bls.n	8004358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004378:	480d      	ldr	r0, [pc, #52]	; (80043b0 <prvInitialiseTaskLists+0x64>)
 800437a:	f7fe fc2d 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800437e:	480d      	ldr	r0, [pc, #52]	; (80043b4 <prvInitialiseTaskLists+0x68>)
 8004380:	f7fe fc2a 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004384:	480c      	ldr	r0, [pc, #48]	; (80043b8 <prvInitialiseTaskLists+0x6c>)
 8004386:	f7fe fc27 	bl	8002bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800438a:	480c      	ldr	r0, [pc, #48]	; (80043bc <prvInitialiseTaskLists+0x70>)
 800438c:	f7fe fc24 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004390:	480b      	ldr	r0, [pc, #44]	; (80043c0 <prvInitialiseTaskLists+0x74>)
 8004392:	f7fe fc21 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <prvInitialiseTaskLists+0x78>)
 8004398:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <prvInitialiseTaskLists+0x64>)
 800439a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <prvInitialiseTaskLists+0x7c>)
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <prvInitialiseTaskLists+0x68>)
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000d14 	.word	0x20000d14
 80043b0:	20001174 	.word	0x20001174
 80043b4:	20001188 	.word	0x20001188
 80043b8:	200011a4 	.word	0x200011a4
 80043bc:	200011b8 	.word	0x200011b8
 80043c0:	200011d0 	.word	0x200011d0
 80043c4:	2000119c 	.word	0x2000119c
 80043c8:	200011a0 	.word	0x200011a0

080043cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d2:	e019      	b.n	8004408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043d4:	f000 fdd6 	bl	8004f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <prvCheckTasksWaitingTermination+0x50>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fc81 	bl	8002cec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <prvCheckTasksWaitingTermination+0x54>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <prvCheckTasksWaitingTermination+0x54>)
 80043f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <prvCheckTasksWaitingTermination+0x58>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <prvCheckTasksWaitingTermination+0x58>)
 80043fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043fe:	f000 fdf1 	bl	8004fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f810 	bl	8004428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <prvCheckTasksWaitingTermination+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e1      	bne.n	80043d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200011b8 	.word	0x200011b8
 8004420:	200011e4 	.word	0x200011e4
 8004424:	200011cc 	.word	0x200011cc

08004428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4618      	mov	r0, r3
 8004440:	f000 ff8e 	bl	8005360 <vPortFree>
				vPortFree( pxTCB );
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 ff8b 	bl	8005360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800444a:	e018      	b.n	800447e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004452:	2b01      	cmp	r3, #1
 8004454:	d103      	bne.n	800445e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 ff82 	bl	8005360 <vPortFree>
	}
 800445c:	e00f      	b.n	800447e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004464:	2b02      	cmp	r3, #2
 8004466:	d00a      	beq.n	800447e <prvDeleteTCB+0x56>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <prvDeleteTCB+0x54>
	}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <prvResetNextTaskUnblockTime+0x38>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <prvResetNextTaskUnblockTime+0x3c>)
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044a0:	e008      	b.n	80044b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <prvResetNextTaskUnblockTime+0x38>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <prvResetNextTaskUnblockTime+0x3c>)
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	2000119c 	.word	0x2000119c
 80044c4:	20001204 	.word	0x20001204

080044c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <xTaskGetSchedulerState+0x34>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044d6:	2301      	movs	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	e008      	b.n	80044ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <xTaskGetSchedulerState+0x38>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044e4:	2302      	movs	r3, #2
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	e001      	b.n	80044ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044ee:	687b      	ldr	r3, [r7, #4]
	}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	200011f0 	.word	0x200011f0
 8004500:	2000120c 	.word	0x2000120c

08004504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d056      	beq.n	80045c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <xTaskPriorityDisinherit+0xd0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d00a      	beq.n	800453a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60fb      	str	r3, [r7, #12]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	429a      	cmp	r2, r3
 800456c:	d02c      	beq.n	80045c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	2b00      	cmp	r3, #0
 8004574:	d128      	bne.n	80045c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fbb6 	bl	8002cec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <xTaskPriorityDisinherit+0xd4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <xTaskPriorityDisinherit+0xa4>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <xTaskPriorityDisinherit+0xd4>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <xTaskPriorityDisinherit+0xd8>)
 80045b6:	441a      	add	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fb37 	bl	8002c32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c8:	697b      	ldr	r3, [r7, #20]
	}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d10 	.word	0x20000d10
 80045d8:	200011ec 	.word	0x200011ec
 80045dc:	20000d14 	.word	0x20000d14

080045e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <prvAddCurrentTaskToDelayedList+0x90>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f0:	4b20      	ldr	r3, [pc, #128]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fb78 	bl	8002cec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d10a      	bne.n	800461a <prvAddCurrentTaskToDelayedList+0x3a>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4819      	ldr	r0, [pc, #100]	; (8004678 <prvAddCurrentTaskToDelayedList+0x98>)
 8004614:	f7fe fb0d 	bl	8002c32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004618:	e026      	b.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	429a      	cmp	r2, r3
 8004630:	d209      	bcs.n	8004646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe fb1b 	bl	8002c7a <vListInsert>
}
 8004644:	e010      	b.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7fe fb11 	bl	8002c7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d202      	bcs.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200011e8 	.word	0x200011e8
 8004674:	20000d10 	.word	0x20000d10
 8004678:	200011d0 	.word	0x200011d0
 800467c:	200011a0 	.word	0x200011a0
 8004680:	2000119c 	.word	0x2000119c
 8004684:	20001204 	.word	0x20001204

08004688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004692:	f000 fb07 	bl	8004ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <xTimerCreateTimerTask+0x80>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d021      	beq.n	80046e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046a6:	1d3a      	adds	r2, r7, #4
 80046a8:	f107 0108 	add.w	r1, r7, #8
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe fa77 	bl	8002ba4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	9202      	str	r2, [sp, #8]
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2302      	movs	r3, #2
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	460a      	mov	r2, r1
 80046c8:	4910      	ldr	r1, [pc, #64]	; (800470c <xTimerCreateTimerTask+0x84>)
 80046ca:	4811      	ldr	r0, [pc, #68]	; (8004710 <xTimerCreateTimerTask+0x88>)
 80046cc:	f7ff f8de 	bl	800388c <xTaskCreateStatic>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <xTimerCreateTimerTask+0x8c>)
 80046d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <xTimerCreateTimerTask+0x8c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	613b      	str	r3, [r7, #16]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20001240 	.word	0x20001240
 800470c:	08009dd4 	.word	0x08009dd4
 8004710:	0800484d 	.word	0x0800484d
 8004714:	20001244 	.word	0x20001244

08004718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	623b      	str	r3, [r7, #32]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02a      	beq.n	80047a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	dc18      	bgt.n	8004792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004760:	f7ff feb2 	bl	80044c8 <xTaskGetSchedulerState>
 8004764:	4603      	mov	r3, r0
 8004766:	2b02      	cmp	r3, #2
 8004768:	d109      	bne.n	800477e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <xTimerGenericCommand+0x98>)
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	f107 0110 	add.w	r1, r7, #16
 8004772:	2300      	movs	r3, #0
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	f7fe fc21 	bl	8002fbc <xQueueGenericSend>
 800477a:	6278      	str	r0, [r7, #36]	; 0x24
 800477c:	e012      	b.n	80047a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	f107 0110 	add.w	r1, r7, #16
 8004786:	2300      	movs	r3, #0
 8004788:	2200      	movs	r2, #0
 800478a:	f7fe fc17 	bl	8002fbc <xQueueGenericSend>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24
 8004790:	e008      	b.n	80047a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	f107 0110 	add.w	r1, r7, #16
 800479a:	2300      	movs	r3, #0
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	f7fe fd0b 	bl	80031b8 <xQueueGenericSendFromISR>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20001240 	.word	0x20001240

080047b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <prvProcessExpiredTimer+0x94>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fa8d 	bl	8002cec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d022      	beq.n	8004826 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	18d1      	adds	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	f000 f8d1 	bl	8004994 <prvInsertTimerInActiveList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01f      	beq.n	8004838 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2300      	movs	r3, #0
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	2100      	movs	r1, #0
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7ff ff88 	bl	8004718 <xTimerGenericCommand>
 8004808:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	6978      	ldr	r0, [r7, #20]
 800483e:	4798      	blx	r3
}
 8004840:	bf00      	nop
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20001238 	.word	0x20001238

0800484c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004854:	f107 0308 	add.w	r3, r7, #8
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f857 	bl	800490c <prvGetNextExpireTime>
 800485e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f803 	bl	8004870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800486a:	f000 f8d5 	bl	8004a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800486e:	e7f1      	b.n	8004854 <prvTimerTask+0x8>

08004870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800487a:	f7ff fa43 	bl	8003d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f866 	bl	8004954 <prvSampleTimeNow>
 8004888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d130      	bne.n	80048f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <prvProcessTimerOrBlockTask+0x3c>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	429a      	cmp	r2, r3
 800489c:	d806      	bhi.n	80048ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800489e:	f7ff fa3f 	bl	8003d20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff85 	bl	80047b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048aa:	e024      	b.n	80048f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <prvProcessTimerOrBlockTask+0x90>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <prvProcessTimerOrBlockTask+0x50>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <prvProcessTimerOrBlockTask+0x52>
 80048c0:	2300      	movs	r3, #0
 80048c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <prvProcessTimerOrBlockTask+0x94>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	f7fe ffa7 	bl	8003824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048d6:	f7ff fa23 	bl	8003d20 <xTaskResumeAll>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <prvProcessTimerOrBlockTask+0x98>)
 80048e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
}
 80048f0:	e001      	b.n	80048f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048f2:	f7ff fa15 	bl	8003d20 <xTaskResumeAll>
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	2000123c 	.word	0x2000123c
 8004904:	20001240 	.word	0x20001240
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <prvGetNextExpireTime+0x44>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <prvGetNextExpireTime+0x16>
 800491e:	2201      	movs	r2, #1
 8004920:	e000      	b.n	8004924 <prvGetNextExpireTime+0x18>
 8004922:	2200      	movs	r2, #0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <prvGetNextExpireTime+0x44>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e001      	b.n	8004940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20001238 	.word	0x20001238

08004954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800495c:	f7ff fa7e 	bl	8003e5c <xTaskGetTickCount>
 8004960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <prvSampleTimeNow+0x3c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d205      	bcs.n	8004978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800496c:	f000 f936 	bl	8004bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e002      	b.n	800497e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800497e:	4a04      	ldr	r2, [pc, #16]	; (8004990 <prvSampleTimeNow+0x3c>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20001248 	.word	0x20001248

08004994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d812      	bhi.n	80049e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049c8:	2301      	movs	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e01b      	b.n	8004a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <prvInsertTimerInActiveList+0x7c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7fe f94e 	bl	8002c7a <vListInsert>
 80049de:	e012      	b.n	8004a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d206      	bcs.n	80049f6 <prvInsertTimerInActiveList+0x62>
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e007      	b.n	8004a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <prvInsertTimerInActiveList+0x80>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f7fe f93a 	bl	8002c7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a06:	697b      	ldr	r3, [r7, #20]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	2000123c 	.word	0x2000123c
 8004a14:	20001238 	.word	0x20001238

08004a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a1e:	e0ca      	b.n	8004bb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da18      	bge.n	8004a58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	3304      	adds	r3, #4
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	61fb      	str	r3, [r7, #28]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4e:	6850      	ldr	r0, [r2, #4]
 8004a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f2c0 80ab 	blt.w	8004bb6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe f93b 	bl	8002cec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a76:	463b      	mov	r3, r7
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff6b 	bl	8004954 <prvSampleTimeNow>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	f200 8096 	bhi.w	8004bb4 <prvProcessReceivedCommands+0x19c>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <prvProcessReceivedCommands+0x78>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ab9 	.word	0x08004ab9
 8004a9c:	08004b2d 	.word	0x08004b2d
 8004aa0:	08004b41 	.word	0x08004b41
 8004aa4:	08004b8b 	.word	0x08004b8b
 8004aa8:	08004ab9 	.word	0x08004ab9
 8004aac:	08004ab9 	.word	0x08004ab9
 8004ab0:	08004b2d 	.word	0x08004b2d
 8004ab4:	08004b41 	.word	0x08004b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	18d1      	adds	r1, r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad8:	f7ff ff5c 	bl	8004994 <prvInsertTimerInActiveList>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d069      	beq.n	8004bb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d05e      	beq.n	8004bb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	441a      	add	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	2100      	movs	r1, #0
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f7ff fe05 	bl	8004718 <xTimerGenericCommand>
 8004b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d14f      	bne.n	8004bb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	61bb      	str	r3, [r7, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b3e:	e03a      	b.n	8004bb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	617b      	str	r3, [r7, #20]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	18d1      	adds	r1, r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b84:	f7ff ff06 	bl	8004994 <prvInsertTimerInActiveList>
					break;
 8004b88:	e015      	b.n	8004bb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f000 fbe1 	bl	8005360 <vPortFree>
 8004b9e:	e00a      	b.n	8004bb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bb2:	e000      	b.n	8004bb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <prvProcessReceivedCommands+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d39      	adds	r1, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fb96 	bl	80032f0 <xQueueReceive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af2a 	bne.w	8004a20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3730      	adds	r7, #48	; 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20001240 	.word	0x20001240

08004bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be2:	e048      	b.n	8004c76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe f875 	bl	8002cec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02e      	beq.n	8004c76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90e      	bls.n	8004c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe f81a 	bl	8002c7a <vListInsert>
 8004c46:	e016      	b.n	8004c76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	2100      	movs	r1, #0
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fd60 	bl	8004718 <xTimerGenericCommand>
 8004c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	603b      	str	r3, [r7, #0]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1b1      	bne.n	8004be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <prvSwitchTimerLists+0xc0>)
 8004c8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c8e:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6013      	str	r3, [r2, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20001238 	.word	0x20001238
 8004ca0:	2000123c 	.word	0x2000123c

08004ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004caa:	f000 f96b 	bl	8004f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <prvCheckForValidListAndQueue+0x60>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d120      	bne.n	8004cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cb6:	4814      	ldr	r0, [pc, #80]	; (8004d08 <prvCheckForValidListAndQueue+0x64>)
 8004cb8:	f7fd ff8e 	bl	8002bd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cbc:	4813      	ldr	r0, [pc, #76]	; (8004d0c <prvCheckForValidListAndQueue+0x68>)
 8004cbe:	f7fd ff8b 	bl	8002bd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <prvCheckForValidListAndQueue+0x6c>)
 8004cc4:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <prvCheckForValidListAndQueue+0x64>)
 8004cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <prvCheckForValidListAndQueue+0x70>)
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <prvCheckForValidListAndQueue+0x68>)
 8004ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <prvCheckForValidListAndQueue+0x74>)
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <prvCheckForValidListAndQueue+0x78>)
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	200a      	movs	r0, #10
 8004cda:	f7fe f899 	bl	8002e10 <xQueueGenericCreateStatic>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <prvCheckForValidListAndQueue+0x60>)
 8004ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <prvCheckForValidListAndQueue+0x60>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <prvCheckForValidListAndQueue+0x60>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	490b      	ldr	r1, [pc, #44]	; (8004d20 <prvCheckForValidListAndQueue+0x7c>)
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fd6c 	bl	80037d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cf8:	f000 f974 	bl	8004fe4 <vPortExitCritical>
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20001240 	.word	0x20001240
 8004d08:	20001210 	.word	0x20001210
 8004d0c:	20001224 	.word	0x20001224
 8004d10:	20001238 	.word	0x20001238
 8004d14:	2000123c 	.word	0x2000123c
 8004d18:	200012ec 	.word	0x200012ec
 8004d1c:	2000124c 	.word	0x2000124c
 8004d20:	08009ddc 	.word	0x08009ddc

08004d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b04      	subs	r3, #4
 8004d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b04      	subs	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b04      	subs	r3, #4
 8004d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d54:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <pxPortInitialiseStack+0x64>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b14      	subs	r3, #20
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b04      	subs	r3, #4
 8004d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f06f 0202 	mvn.w	r2, #2
 8004d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3b20      	subs	r3, #32
 8004d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	08004d8d 	.word	0x08004d8d

08004d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <prvTaskExitError+0x54>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d00a      	beq.n	8004db6 <prvTaskExitError+0x2a>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <prvTaskExitError+0x28>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
}
 8004dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dca:	bf00      	nop
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0fc      	beq.n	8004dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	2000000c 	.word	0x2000000c
	...

08004df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <pxCurrentTCBConst2>)
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f380 8809 	msr	PSP, r0
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8811 	msr	BASEPRI, r0
 8004e0a:	4770      	bx	lr
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst2>:
 8004e10:	20000d10 	.word	0x20000d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e18:	4808      	ldr	r0, [pc, #32]	; (8004e3c <prvPortStartFirstTask+0x24>)
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f380 8808 	msr	MSP, r0
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8814 	msr	CONTROL, r0
 8004e2a:	b662      	cpsie	i
 8004e2c:	b661      	cpsie	f
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	df00      	svc	0
 8004e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e3a:	bf00      	nop
 8004e3c:	e000ed08 	.word	0xe000ed08

08004e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <xPortStartScheduler+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10a      	bne.n	8004e66 <xPortStartScheduler+0x26>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e66:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <xPortStartScheduler+0x128>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10a      	bne.n	8004e86 <xPortStartScheduler+0x46>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xPortStartScheduler+0x12c>)
 8004e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <xPortStartScheduler+0x130>)
 8004eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb4:	e009      	b.n	8004eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d0ef      	beq.n	8004eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1c3 0307 	rsb	r3, r3, #7
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00a      	beq.n	8004ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <xPortStartScheduler+0x134>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f2e:	f000 f8dd 	bl	80050ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <xPortStartScheduler+0x13c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f38:	f000 f8fc 	bl	8005134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f48:	f7ff ff66 	bl	8004e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f4c:	f7ff f850 	bl	8003ff0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f50:	f7ff ff1c 	bl	8004d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00
 8004f64:	410fc271 	.word	0x410fc271
 8004f68:	410fc270 	.word	0x410fc270
 8004f6c:	e000e400 	.word	0xe000e400
 8004f70:	2000133c 	.word	0x2000133c
 8004f74:	20001340 	.word	0x20001340
 8004f78:	e000ed20 	.word	0xe000ed20
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	e000ef34 	.word	0xe000ef34

08004f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	607b      	str	r3, [r7, #4]
}
 8004f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <vPortEnterCritical+0x58>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10f      	bne.n	8004fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <vPortEnterCritical+0x5c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vPortEnterCritical+0x4a>
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <vPortExitCritical+0x50>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <vPortExitCritical+0x24>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	607b      	str	r3, [r7, #4]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <vPortExitCritical+0x50>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3b01      	subs	r3, #1
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vPortExitCritical+0x50>)
 8005010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <vPortExitCritical+0x42>
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f383 8811 	msr	BASEPRI, r3
}
 8005024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
	...

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7fe ffbe 	bl	8003ff0 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	20000d10 	.word	0x20000d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f7fe fedb 	bl	8003e7c <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <xPortSysTickHandler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005142:	bf00      	nop
 8005144:	e000ed88 	.word	0xe000ed88

08005148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800514e:	f3ef 8305 	mrs	r3, IPSR
 8005152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d914      	bls.n	8005184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <vPortValidateInterruptPriority+0x70>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <vPortValidateInterruptPriority+0x74>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	7afa      	ldrb	r2, [r7, #11]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20a      	bcs.n	8005184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <vPortValidateInterruptPriority+0x78>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <vPortValidateInterruptPriority+0x7c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d90a      	bls.n	80051aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	603b      	str	r3, [r7, #0]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vPortValidateInterruptPriority+0x60>
	}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	e000e3f0 	.word	0xe000e3f0
 80051bc:	2000133c 	.word	0x2000133c
 80051c0:	e000ed0c 	.word	0xe000ed0c
 80051c4:	20001340 	.word	0x20001340

080051c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051d4:	f7fe fd96 	bl	8003d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051d8:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <pvPortMalloc+0x180>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e0:	f000 f920 	bl	8005424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051e4:	4b59      	ldr	r3, [pc, #356]	; (800534c <pvPortMalloc+0x184>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8093 	bne.w	8005318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01d      	beq.n	8005234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051f8:	2208      	movs	r2, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f023 0307 	bic.w	r3, r3, #7
 8005210:	3308      	adds	r3, #8
 8005212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <pvPortMalloc+0x6c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	617b      	str	r3, [r7, #20]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d06e      	beq.n	8005318 <pvPortMalloc+0x150>
 800523a:	4b45      	ldr	r3, [pc, #276]	; (8005350 <pvPortMalloc+0x188>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d869      	bhi.n	8005318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005244:	4b43      	ldr	r3, [pc, #268]	; (8005354 <pvPortMalloc+0x18c>)
 8005246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005248:	4b42      	ldr	r3, [pc, #264]	; (8005354 <pvPortMalloc+0x18c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800524e:	e004      	b.n	800525a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <pvPortMalloc+0xa4>
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f1      	bne.n	8005250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <pvPortMalloc+0x180>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	429a      	cmp	r2, r3
 8005274:	d050      	beq.n	8005318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2208      	movs	r2, #8
 800527c:	4413      	add	r3, r2
 800527e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	2308      	movs	r3, #8
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	429a      	cmp	r2, r3
 8005296:	d91f      	bls.n	80052d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <pvPortMalloc+0xf8>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	613b      	str	r3, [r7, #16]
}
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052d2:	69b8      	ldr	r0, [r7, #24]
 80052d4:	f000 f908 	bl	80054e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <pvPortMalloc+0x188>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <pvPortMalloc+0x188>)
 80052e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052e6:	4b1a      	ldr	r3, [pc, #104]	; (8005350 <pvPortMalloc+0x188>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <pvPortMalloc+0x190>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d203      	bcs.n	80052fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <pvPortMalloc+0x188>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <pvPortMalloc+0x190>)
 80052f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <pvPortMalloc+0x184>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	431a      	orrs	r2, r3
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <pvPortMalloc+0x194>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	4a11      	ldr	r2, [pc, #68]	; (800535c <pvPortMalloc+0x194>)
 8005316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005318:	f7fe fd02 	bl	8003d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <pvPortMalloc+0x174>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60fb      	str	r3, [r7, #12]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <pvPortMalloc+0x172>
	return pvReturn;
 800533c:	69fb      	ldr	r3, [r7, #28]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20004f4c 	.word	0x20004f4c
 800534c:	20004f60 	.word	0x20004f60
 8005350:	20004f50 	.word	0x20004f50
 8005354:	20004f44 	.word	0x20004f44
 8005358:	20004f54 	.word	0x20004f54
 800535c:	20004f58 	.word	0x20004f58

08005360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04d      	beq.n	800540e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005372:	2308      	movs	r3, #8
 8005374:	425b      	negs	r3, r3
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <vPortFree+0xb8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <vPortFree+0x44>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <vPortFree+0x62>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60bb      	str	r3, [r7, #8]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <vPortFree+0xb8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01e      	beq.n	800540e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11a      	bne.n	800540e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <vPortFree+0xb8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053e8:	f7fe fc8c 	bl	8003d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <vPortFree+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <vPortFree+0xbc>)
 80053f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 f874 	bl	80054e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <vPortFree+0xc0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <vPortFree+0xc0>)
 8005408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800540a:	f7fe fc89 	bl	8003d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20004f60 	.word	0x20004f60
 800541c:	20004f50 	.word	0x20004f50
 8005420:	20004f5c 	.word	0x20004f5c

08005424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800542a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800542e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <prvHeapInit+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3307      	adds	r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <prvHeapInit+0xac>)
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <prvHeapInit+0xb0>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <prvHeapInit+0xb0>)
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005470:	2208      	movs	r2, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <prvHeapInit+0xb4>)
 8005484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvHeapInit+0xb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <prvHeapInit+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvHeapInit+0xb4>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvHeapInit+0xb8>)
 80054b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <prvHeapInit+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <prvHeapInit+0xc0>)
 80054be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20001344 	.word	0x20001344
 80054d4:	20004f44 	.word	0x20004f44
 80054d8:	20004f4c 	.word	0x20004f4c
 80054dc:	20004f54 	.word	0x20004f54
 80054e0:	20004f50 	.word	0x20004f50
 80054e4:	20004f60 	.word	0x20004f60

080054e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <prvInsertBlockIntoFreeList+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e002      	b.n	80054fc <prvInsertBlockIntoFreeList+0x14>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d8f7      	bhi.n	80054f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d118      	bne.n	8005570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00d      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e008      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e003      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d002      	beq.n	8005586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20004f44 	.word	0x20004f44
 8005598:	20004f4c 	.word	0x20004f4c

0800559c <__cvt>:
 800559c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	ec55 4b10 	vmov	r4, r5, d0
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	460e      	mov	r6, r1
 80055a8:	4619      	mov	r1, r3
 80055aa:	462b      	mov	r3, r5
 80055ac:	bfbb      	ittet	lt
 80055ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055b2:	461d      	movlt	r5, r3
 80055b4:	2300      	movge	r3, #0
 80055b6:	232d      	movlt	r3, #45	; 0x2d
 80055b8:	700b      	strb	r3, [r1, #0]
 80055ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055c0:	4691      	mov	r9, r2
 80055c2:	f023 0820 	bic.w	r8, r3, #32
 80055c6:	bfbc      	itt	lt
 80055c8:	4622      	movlt	r2, r4
 80055ca:	4614      	movlt	r4, r2
 80055cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055d0:	d005      	beq.n	80055de <__cvt+0x42>
 80055d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055d6:	d100      	bne.n	80055da <__cvt+0x3e>
 80055d8:	3601      	adds	r6, #1
 80055da:	2102      	movs	r1, #2
 80055dc:	e000      	b.n	80055e0 <__cvt+0x44>
 80055de:	2103      	movs	r1, #3
 80055e0:	ab03      	add	r3, sp, #12
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	ab02      	add	r3, sp, #8
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	ec45 4b10 	vmov	d0, r4, r5
 80055ec:	4653      	mov	r3, sl
 80055ee:	4632      	mov	r2, r6
 80055f0:	f001 f89a 	bl	8006728 <_dtoa_r>
 80055f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055f8:	4607      	mov	r7, r0
 80055fa:	d102      	bne.n	8005602 <__cvt+0x66>
 80055fc:	f019 0f01 	tst.w	r9, #1
 8005600:	d022      	beq.n	8005648 <__cvt+0xac>
 8005602:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005606:	eb07 0906 	add.w	r9, r7, r6
 800560a:	d110      	bne.n	800562e <__cvt+0x92>
 800560c:	783b      	ldrb	r3, [r7, #0]
 800560e:	2b30      	cmp	r3, #48	; 0x30
 8005610:	d10a      	bne.n	8005628 <__cvt+0x8c>
 8005612:	2200      	movs	r2, #0
 8005614:	2300      	movs	r3, #0
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fb fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800561e:	b918      	cbnz	r0, 8005628 <__cvt+0x8c>
 8005620:	f1c6 0601 	rsb	r6, r6, #1
 8005624:	f8ca 6000 	str.w	r6, [sl]
 8005628:	f8da 3000 	ldr.w	r3, [sl]
 800562c:	4499      	add	r9, r3
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fb fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800563a:	b108      	cbz	r0, 8005640 <__cvt+0xa4>
 800563c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005640:	2230      	movs	r2, #48	; 0x30
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	454b      	cmp	r3, r9
 8005646:	d307      	bcc.n	8005658 <__cvt+0xbc>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800564c:	1bdb      	subs	r3, r3, r7
 800564e:	4638      	mov	r0, r7
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	b004      	add	sp, #16
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	9103      	str	r1, [sp, #12]
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e7f0      	b.n	8005642 <__cvt+0xa6>

08005660 <__exponent>:
 8005660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005662:	4603      	mov	r3, r0
 8005664:	2900      	cmp	r1, #0
 8005666:	bfb8      	it	lt
 8005668:	4249      	neglt	r1, r1
 800566a:	f803 2b02 	strb.w	r2, [r3], #2
 800566e:	bfb4      	ite	lt
 8005670:	222d      	movlt	r2, #45	; 0x2d
 8005672:	222b      	movge	r2, #43	; 0x2b
 8005674:	2909      	cmp	r1, #9
 8005676:	7042      	strb	r2, [r0, #1]
 8005678:	dd2a      	ble.n	80056d0 <__exponent+0x70>
 800567a:	f10d 0207 	add.w	r2, sp, #7
 800567e:	4617      	mov	r7, r2
 8005680:	260a      	movs	r6, #10
 8005682:	4694      	mov	ip, r2
 8005684:	fb91 f5f6 	sdiv	r5, r1, r6
 8005688:	fb06 1415 	mls	r4, r6, r5, r1
 800568c:	3430      	adds	r4, #48	; 0x30
 800568e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005692:	460c      	mov	r4, r1
 8005694:	2c63      	cmp	r4, #99	; 0x63
 8005696:	f102 32ff 	add.w	r2, r2, #4294967295
 800569a:	4629      	mov	r1, r5
 800569c:	dcf1      	bgt.n	8005682 <__exponent+0x22>
 800569e:	3130      	adds	r1, #48	; 0x30
 80056a0:	f1ac 0402 	sub.w	r4, ip, #2
 80056a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056a8:	1c41      	adds	r1, r0, #1
 80056aa:	4622      	mov	r2, r4
 80056ac:	42ba      	cmp	r2, r7
 80056ae:	d30a      	bcc.n	80056c6 <__exponent+0x66>
 80056b0:	f10d 0209 	add.w	r2, sp, #9
 80056b4:	eba2 020c 	sub.w	r2, r2, ip
 80056b8:	42bc      	cmp	r4, r7
 80056ba:	bf88      	it	hi
 80056bc:	2200      	movhi	r2, #0
 80056be:	4413      	add	r3, r2
 80056c0:	1a18      	subs	r0, r3, r0
 80056c2:	b003      	add	sp, #12
 80056c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056ce:	e7ed      	b.n	80056ac <__exponent+0x4c>
 80056d0:	2330      	movs	r3, #48	; 0x30
 80056d2:	3130      	adds	r1, #48	; 0x30
 80056d4:	7083      	strb	r3, [r0, #2]
 80056d6:	70c1      	strb	r1, [r0, #3]
 80056d8:	1d03      	adds	r3, r0, #4
 80056da:	e7f1      	b.n	80056c0 <__exponent+0x60>

080056dc <_printf_float>:
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	ed2d 8b02 	vpush	{d8}
 80056e4:	b08d      	sub	sp, #52	; 0x34
 80056e6:	460c      	mov	r4, r1
 80056e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056ec:	4616      	mov	r6, r2
 80056ee:	461f      	mov	r7, r3
 80056f0:	4605      	mov	r5, r0
 80056f2:	f000 ff05 	bl	8006500 <_localeconv_r>
 80056f6:	f8d0 a000 	ldr.w	sl, [r0]
 80056fa:	4650      	mov	r0, sl
 80056fc:	f7fa fdc0 	bl	8000280 <strlen>
 8005700:	2300      	movs	r3, #0
 8005702:	930a      	str	r3, [sp, #40]	; 0x28
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	9305      	str	r3, [sp, #20]
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005710:	3307      	adds	r3, #7
 8005712:	f023 0307 	bic.w	r3, r3, #7
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	f8c8 2000 	str.w	r2, [r8]
 800571e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	f8cd 8018 	str.w	r8, [sp, #24]
 800572c:	ee08 0a10 	vmov	s16, r0
 8005730:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005738:	4b9e      	ldr	r3, [pc, #632]	; (80059b4 <_printf_float+0x2d8>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	f7fb f9fd 	bl	8000b3c <__aeabi_dcmpun>
 8005742:	bb88      	cbnz	r0, 80057a8 <_printf_float+0xcc>
 8005744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005748:	4b9a      	ldr	r3, [pc, #616]	; (80059b4 <_printf_float+0x2d8>)
 800574a:	f04f 32ff 	mov.w	r2, #4294967295
 800574e:	f7fb f9d7 	bl	8000b00 <__aeabi_dcmple>
 8005752:	bb48      	cbnz	r0, 80057a8 <_printf_float+0xcc>
 8005754:	2200      	movs	r2, #0
 8005756:	2300      	movs	r3, #0
 8005758:	4640      	mov	r0, r8
 800575a:	4649      	mov	r1, r9
 800575c:	f7fb f9c6 	bl	8000aec <__aeabi_dcmplt>
 8005760:	b110      	cbz	r0, 8005768 <_printf_float+0x8c>
 8005762:	232d      	movs	r3, #45	; 0x2d
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	4a93      	ldr	r2, [pc, #588]	; (80059b8 <_printf_float+0x2dc>)
 800576a:	4b94      	ldr	r3, [pc, #592]	; (80059bc <_printf_float+0x2e0>)
 800576c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005770:	bf94      	ite	ls
 8005772:	4690      	movls	r8, r2
 8005774:	4698      	movhi	r8, r3
 8005776:	2303      	movs	r3, #3
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	9b05      	ldr	r3, [sp, #20]
 800577c:	f023 0304 	bic.w	r3, r3, #4
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	9700      	str	r7, [sp, #0]
 8005788:	4633      	mov	r3, r6
 800578a:	aa0b      	add	r2, sp, #44	; 0x2c
 800578c:	4621      	mov	r1, r4
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f9da 	bl	8005b48 <_printf_common>
 8005794:	3001      	adds	r0, #1
 8005796:	f040 8090 	bne.w	80058ba <_printf_float+0x1de>
 800579a:	f04f 30ff 	mov.w	r0, #4294967295
 800579e:	b00d      	add	sp, #52	; 0x34
 80057a0:	ecbd 8b02 	vpop	{d8}
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	4649      	mov	r1, r9
 80057b0:	f7fb f9c4 	bl	8000b3c <__aeabi_dcmpun>
 80057b4:	b140      	cbz	r0, 80057c8 <_printf_float+0xec>
 80057b6:	464b      	mov	r3, r9
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bfbc      	itt	lt
 80057bc:	232d      	movlt	r3, #45	; 0x2d
 80057be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057c2:	4a7f      	ldr	r2, [pc, #508]	; (80059c0 <_printf_float+0x2e4>)
 80057c4:	4b7f      	ldr	r3, [pc, #508]	; (80059c4 <_printf_float+0x2e8>)
 80057c6:	e7d1      	b.n	800576c <_printf_float+0x90>
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057ce:	9206      	str	r2, [sp, #24]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	d13f      	bne.n	8005854 <_printf_float+0x178>
 80057d4:	2306      	movs	r3, #6
 80057d6:	6063      	str	r3, [r4, #4]
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	6861      	ldr	r1, [r4, #4]
 80057dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057e0:	2300      	movs	r3, #0
 80057e2:	9303      	str	r3, [sp, #12]
 80057e4:	ab0a      	add	r3, sp, #40	; 0x28
 80057e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057ea:	ab09      	add	r3, sp, #36	; 0x24
 80057ec:	ec49 8b10 	vmov	d0, r8, r9
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057f8:	4628      	mov	r0, r5
 80057fa:	f7ff fecf 	bl	800559c <__cvt>
 80057fe:	9b06      	ldr	r3, [sp, #24]
 8005800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005802:	2b47      	cmp	r3, #71	; 0x47
 8005804:	4680      	mov	r8, r0
 8005806:	d108      	bne.n	800581a <_printf_float+0x13e>
 8005808:	1cc8      	adds	r0, r1, #3
 800580a:	db02      	blt.n	8005812 <_printf_float+0x136>
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	4299      	cmp	r1, r3
 8005810:	dd41      	ble.n	8005896 <_printf_float+0x1ba>
 8005812:	f1ab 0302 	sub.w	r3, fp, #2
 8005816:	fa5f fb83 	uxtb.w	fp, r3
 800581a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800581e:	d820      	bhi.n	8005862 <_printf_float+0x186>
 8005820:	3901      	subs	r1, #1
 8005822:	465a      	mov	r2, fp
 8005824:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005828:	9109      	str	r1, [sp, #36]	; 0x24
 800582a:	f7ff ff19 	bl	8005660 <__exponent>
 800582e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005830:	1813      	adds	r3, r2, r0
 8005832:	2a01      	cmp	r2, #1
 8005834:	4681      	mov	r9, r0
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	dc02      	bgt.n	8005840 <_printf_float+0x164>
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	07d2      	lsls	r2, r2, #31
 800583e:	d501      	bpl.n	8005844 <_printf_float+0x168>
 8005840:	3301      	adds	r3, #1
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005848:	2b00      	cmp	r3, #0
 800584a:	d09c      	beq.n	8005786 <_printf_float+0xaa>
 800584c:	232d      	movs	r3, #45	; 0x2d
 800584e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005852:	e798      	b.n	8005786 <_printf_float+0xaa>
 8005854:	9a06      	ldr	r2, [sp, #24]
 8005856:	2a47      	cmp	r2, #71	; 0x47
 8005858:	d1be      	bne.n	80057d8 <_printf_float+0xfc>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1bc      	bne.n	80057d8 <_printf_float+0xfc>
 800585e:	2301      	movs	r3, #1
 8005860:	e7b9      	b.n	80057d6 <_printf_float+0xfa>
 8005862:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005866:	d118      	bne.n	800589a <_printf_float+0x1be>
 8005868:	2900      	cmp	r1, #0
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	dd0b      	ble.n	8005886 <_printf_float+0x1aa>
 800586e:	6121      	str	r1, [r4, #16]
 8005870:	b913      	cbnz	r3, 8005878 <_printf_float+0x19c>
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	07d0      	lsls	r0, r2, #31
 8005876:	d502      	bpl.n	800587e <_printf_float+0x1a2>
 8005878:	3301      	adds	r3, #1
 800587a:	440b      	add	r3, r1
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005880:	f04f 0900 	mov.w	r9, #0
 8005884:	e7de      	b.n	8005844 <_printf_float+0x168>
 8005886:	b913      	cbnz	r3, 800588e <_printf_float+0x1b2>
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	07d2      	lsls	r2, r2, #31
 800588c:	d501      	bpl.n	8005892 <_printf_float+0x1b6>
 800588e:	3302      	adds	r3, #2
 8005890:	e7f4      	b.n	800587c <_printf_float+0x1a0>
 8005892:	2301      	movs	r3, #1
 8005894:	e7f2      	b.n	800587c <_printf_float+0x1a0>
 8005896:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800589a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589c:	4299      	cmp	r1, r3
 800589e:	db05      	blt.n	80058ac <_printf_float+0x1d0>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	6121      	str	r1, [r4, #16]
 80058a4:	07d8      	lsls	r0, r3, #31
 80058a6:	d5ea      	bpl.n	800587e <_printf_float+0x1a2>
 80058a8:	1c4b      	adds	r3, r1, #1
 80058aa:	e7e7      	b.n	800587c <_printf_float+0x1a0>
 80058ac:	2900      	cmp	r1, #0
 80058ae:	bfd4      	ite	le
 80058b0:	f1c1 0202 	rsble	r2, r1, #2
 80058b4:	2201      	movgt	r2, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	e7e0      	b.n	800587c <_printf_float+0x1a0>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	055a      	lsls	r2, r3, #21
 80058be:	d407      	bmi.n	80058d0 <_printf_float+0x1f4>
 80058c0:	6923      	ldr	r3, [r4, #16]
 80058c2:	4642      	mov	r2, r8
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	d12c      	bne.n	8005928 <_printf_float+0x24c>
 80058ce:	e764      	b.n	800579a <_printf_float+0xbe>
 80058d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d4:	f240 80e0 	bls.w	8005a98 <_printf_float+0x3bc>
 80058d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058dc:	2200      	movs	r2, #0
 80058de:	2300      	movs	r3, #0
 80058e0:	f7fb f8fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d034      	beq.n	8005952 <_printf_float+0x276>
 80058e8:	4a37      	ldr	r2, [pc, #220]	; (80059c8 <_printf_float+0x2ec>)
 80058ea:	2301      	movs	r3, #1
 80058ec:	4631      	mov	r1, r6
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f af51 	beq.w	800579a <_printf_float+0xbe>
 80058f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058fc:	429a      	cmp	r2, r3
 80058fe:	db02      	blt.n	8005906 <_printf_float+0x22a>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	07d8      	lsls	r0, r3, #31
 8005904:	d510      	bpl.n	8005928 <_printf_float+0x24c>
 8005906:	ee18 3a10 	vmov	r3, s16
 800590a:	4652      	mov	r2, sl
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f af41 	beq.w	800579a <_printf_float+0xbe>
 8005918:	f04f 0800 	mov.w	r8, #0
 800591c:	f104 091a 	add.w	r9, r4, #26
 8005920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	4543      	cmp	r3, r8
 8005926:	dc09      	bgt.n	800593c <_printf_float+0x260>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	079b      	lsls	r3, r3, #30
 800592c:	f100 8107 	bmi.w	8005b3e <_printf_float+0x462>
 8005930:	68e0      	ldr	r0, [r4, #12]
 8005932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005934:	4298      	cmp	r0, r3
 8005936:	bfb8      	it	lt
 8005938:	4618      	movlt	r0, r3
 800593a:	e730      	b.n	800579e <_printf_float+0xc2>
 800593c:	2301      	movs	r3, #1
 800593e:	464a      	mov	r2, r9
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f af27 	beq.w	800579a <_printf_float+0xbe>
 800594c:	f108 0801 	add.w	r8, r8, #1
 8005950:	e7e6      	b.n	8005920 <_printf_float+0x244>
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc39      	bgt.n	80059cc <_printf_float+0x2f0>
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <_printf_float+0x2ec>)
 800595a:	2301      	movs	r3, #1
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f af19 	beq.w	800579a <_printf_float+0xbe>
 8005968:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800596c:	4313      	orrs	r3, r2
 800596e:	d102      	bne.n	8005976 <_printf_float+0x29a>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	07d9      	lsls	r1, r3, #31
 8005974:	d5d8      	bpl.n	8005928 <_printf_float+0x24c>
 8005976:	ee18 3a10 	vmov	r3, s16
 800597a:	4652      	mov	r2, sl
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af09 	beq.w	800579a <_printf_float+0xbe>
 8005988:	f04f 0900 	mov.w	r9, #0
 800598c:	f104 0a1a 	add.w	sl, r4, #26
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	425b      	negs	r3, r3
 8005994:	454b      	cmp	r3, r9
 8005996:	dc01      	bgt.n	800599c <_printf_float+0x2c0>
 8005998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599a:	e792      	b.n	80058c2 <_printf_float+0x1e6>
 800599c:	2301      	movs	r3, #1
 800599e:	4652      	mov	r2, sl
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f aef7 	beq.w	800579a <_printf_float+0xbe>
 80059ac:	f109 0901 	add.w	r9, r9, #1
 80059b0:	e7ee      	b.n	8005990 <_printf_float+0x2b4>
 80059b2:	bf00      	nop
 80059b4:	7fefffff 	.word	0x7fefffff
 80059b8:	08009e9c 	.word	0x08009e9c
 80059bc:	08009ea0 	.word	0x08009ea0
 80059c0:	08009ea4 	.word	0x08009ea4
 80059c4:	08009ea8 	.word	0x08009ea8
 80059c8:	08009eac 	.word	0x08009eac
 80059cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059d0:	429a      	cmp	r2, r3
 80059d2:	bfa8      	it	ge
 80059d4:	461a      	movge	r2, r3
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	4691      	mov	r9, r2
 80059da:	dc37      	bgt.n	8005a4c <_printf_float+0x370>
 80059dc:	f04f 0b00 	mov.w	fp, #0
 80059e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059e4:	f104 021a 	add.w	r2, r4, #26
 80059e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	eba3 0309 	sub.w	r3, r3, r9
 80059f0:	455b      	cmp	r3, fp
 80059f2:	dc33      	bgt.n	8005a5c <_printf_float+0x380>
 80059f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f8:	429a      	cmp	r2, r3
 80059fa:	db3b      	blt.n	8005a74 <_printf_float+0x398>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07da      	lsls	r2, r3, #31
 8005a00:	d438      	bmi.n	8005a74 <_printf_float+0x398>
 8005a02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a06:	eba2 0903 	sub.w	r9, r2, r3
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	4591      	cmp	r9, r2
 8005a10:	bfa8      	it	ge
 8005a12:	4691      	movge	r9, r2
 8005a14:	f1b9 0f00 	cmp.w	r9, #0
 8005a18:	dc35      	bgt.n	8005a86 <_printf_float+0x3aa>
 8005a1a:	f04f 0800 	mov.w	r8, #0
 8005a1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a22:	f104 0a1a 	add.w	sl, r4, #26
 8005a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	eba3 0309 	sub.w	r3, r3, r9
 8005a30:	4543      	cmp	r3, r8
 8005a32:	f77f af79 	ble.w	8005928 <_printf_float+0x24c>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4652      	mov	r2, sl
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f aeaa 	beq.w	800579a <_printf_float+0xbe>
 8005a46:	f108 0801 	add.w	r8, r8, #1
 8005a4a:	e7ec      	b.n	8005a26 <_printf_float+0x34a>
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4642      	mov	r2, r8
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	d1c0      	bne.n	80059dc <_printf_float+0x300>
 8005a5a:	e69e      	b.n	800579a <_printf_float+0xbe>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	9205      	str	r2, [sp, #20]
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f ae97 	beq.w	800579a <_printf_float+0xbe>
 8005a6c:	9a05      	ldr	r2, [sp, #20]
 8005a6e:	f10b 0b01 	add.w	fp, fp, #1
 8005a72:	e7b9      	b.n	80059e8 <_printf_float+0x30c>
 8005a74:	ee18 3a10 	vmov	r3, s16
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1be      	bne.n	8005a02 <_printf_float+0x326>
 8005a84:	e689      	b.n	800579a <_printf_float+0xbe>
 8005a86:	9a05      	ldr	r2, [sp, #20]
 8005a88:	464b      	mov	r3, r9
 8005a8a:	4442      	add	r2, r8
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	d1c1      	bne.n	8005a1a <_printf_float+0x33e>
 8005a96:	e680      	b.n	800579a <_printf_float+0xbe>
 8005a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a9a:	2a01      	cmp	r2, #1
 8005a9c:	dc01      	bgt.n	8005aa2 <_printf_float+0x3c6>
 8005a9e:	07db      	lsls	r3, r3, #31
 8005aa0:	d53a      	bpl.n	8005b18 <_printf_float+0x43c>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	f43f ae74 	beq.w	800579a <_printf_float+0xbe>
 8005ab2:	ee18 3a10 	vmov	r3, s16
 8005ab6:	4652      	mov	r2, sl
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	f43f ae6b 	beq.w	800579a <_printf_float+0xbe>
 8005ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ad0:	f7fb f802 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad4:	b9d8      	cbnz	r0, 8005b0e <_printf_float+0x432>
 8005ad6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ada:	f108 0201 	add.w	r2, r8, #1
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d10e      	bne.n	8005b06 <_printf_float+0x42a>
 8005ae8:	e657      	b.n	800579a <_printf_float+0xbe>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4652      	mov	r2, sl
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f ae50 	beq.w	800579a <_printf_float+0xbe>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4543      	cmp	r3, r8
 8005b04:	dcf1      	bgt.n	8005aea <_printf_float+0x40e>
 8005b06:	464b      	mov	r3, r9
 8005b08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b0c:	e6da      	b.n	80058c4 <_printf_float+0x1e8>
 8005b0e:	f04f 0800 	mov.w	r8, #0
 8005b12:	f104 0a1a 	add.w	sl, r4, #26
 8005b16:	e7f2      	b.n	8005afe <_printf_float+0x422>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	e7df      	b.n	8005ade <_printf_float+0x402>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	464a      	mov	r2, r9
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae36 	beq.w	800579a <_printf_float+0xbe>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	dcf0      	bgt.n	8005b1e <_printf_float+0x442>
 8005b3c:	e6f8      	b.n	8005930 <_printf_float+0x254>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f104 0919 	add.w	r9, r4, #25
 8005b46:	e7f4      	b.n	8005b32 <_printf_float+0x456>

08005b48 <_printf_common>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	688a      	ldr	r2, [r1, #8]
 8005b52:	690b      	ldr	r3, [r1, #16]
 8005b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bfb8      	it	lt
 8005b5c:	4613      	movlt	r3, r2
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b64:	4607      	mov	r7, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	b10a      	cbz	r2, 8005b6e <_printf_common+0x26>
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	0699      	lsls	r1, r3, #26
 8005b72:	bf42      	ittt	mi
 8005b74:	6833      	ldrmi	r3, [r6, #0]
 8005b76:	3302      	addmi	r3, #2
 8005b78:	6033      	strmi	r3, [r6, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	f015 0506 	ands.w	r5, r5, #6
 8005b80:	d106      	bne.n	8005b90 <_printf_common+0x48>
 8005b82:	f104 0a19 	add.w	sl, r4, #25
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	6832      	ldr	r2, [r6, #0]
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	dc26      	bgt.n	8005bde <_printf_common+0x96>
 8005b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b94:	1e13      	subs	r3, r2, #0
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	bf18      	it	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	0692      	lsls	r2, r2, #26
 8005b9e:	d42b      	bmi.n	8005bf8 <_printf_common+0xb0>
 8005ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	47c0      	blx	r8
 8005baa:	3001      	adds	r0, #1
 8005bac:	d01e      	beq.n	8005bec <_printf_common+0xa4>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	f003 0306 	and.w	r3, r3, #6
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	bf02      	ittt	eq
 8005bba:	68e5      	ldreq	r5, [r4, #12]
 8005bbc:	6833      	ldreq	r3, [r6, #0]
 8005bbe:	1aed      	subeq	r5, r5, r3
 8005bc0:	68a3      	ldr	r3, [r4, #8]
 8005bc2:	bf0c      	ite	eq
 8005bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc8:	2500      	movne	r5, #0
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bfc4      	itt	gt
 8005bce:	1a9b      	subgt	r3, r3, r2
 8005bd0:	18ed      	addgt	r5, r5, r3
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	341a      	adds	r4, #26
 8005bd6:	42b5      	cmp	r5, r6
 8005bd8:	d11a      	bne.n	8005c10 <_printf_common+0xc8>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e008      	b.n	8005bf0 <_printf_common+0xa8>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4652      	mov	r2, sl
 8005be2:	4649      	mov	r1, r9
 8005be4:	4638      	mov	r0, r7
 8005be6:	47c0      	blx	r8
 8005be8:	3001      	adds	r0, #1
 8005bea:	d103      	bne.n	8005bf4 <_printf_common+0xac>
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	e7c6      	b.n	8005b86 <_printf_common+0x3e>
 8005bf8:	18e1      	adds	r1, r4, r3
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	2030      	movs	r0, #48	; 0x30
 8005bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c02:	4422      	add	r2, r4
 8005c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	e7c7      	b.n	8005ba0 <_printf_common+0x58>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4622      	mov	r2, r4
 8005c14:	4649      	mov	r1, r9
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d0e6      	beq.n	8005bec <_printf_common+0xa4>
 8005c1e:	3601      	adds	r6, #1
 8005c20:	e7d9      	b.n	8005bd6 <_printf_common+0x8e>
	...

08005c24 <_printf_i>:
 8005c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	7e0f      	ldrb	r7, [r1, #24]
 8005c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c2c:	2f78      	cmp	r7, #120	; 0x78
 8005c2e:	4691      	mov	r9, r2
 8005c30:	4680      	mov	r8, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	469a      	mov	sl, r3
 8005c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c3a:	d807      	bhi.n	8005c4c <_printf_i+0x28>
 8005c3c:	2f62      	cmp	r7, #98	; 0x62
 8005c3e:	d80a      	bhi.n	8005c56 <_printf_i+0x32>
 8005c40:	2f00      	cmp	r7, #0
 8005c42:	f000 80d4 	beq.w	8005dee <_printf_i+0x1ca>
 8005c46:	2f58      	cmp	r7, #88	; 0x58
 8005c48:	f000 80c0 	beq.w	8005dcc <_printf_i+0x1a8>
 8005c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c54:	e03a      	b.n	8005ccc <_printf_i+0xa8>
 8005c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c5a:	2b15      	cmp	r3, #21
 8005c5c:	d8f6      	bhi.n	8005c4c <_printf_i+0x28>
 8005c5e:	a101      	add	r1, pc, #4	; (adr r1, 8005c64 <_printf_i+0x40>)
 8005c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c64:	08005cbd 	.word	0x08005cbd
 8005c68:	08005cd1 	.word	0x08005cd1
 8005c6c:	08005c4d 	.word	0x08005c4d
 8005c70:	08005c4d 	.word	0x08005c4d
 8005c74:	08005c4d 	.word	0x08005c4d
 8005c78:	08005c4d 	.word	0x08005c4d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c4d 	.word	0x08005c4d
 8005c84:	08005c4d 	.word	0x08005c4d
 8005c88:	08005c4d 	.word	0x08005c4d
 8005c8c:	08005c4d 	.word	0x08005c4d
 8005c90:	08005dd5 	.word	0x08005dd5
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005d8f 	.word	0x08005d8f
 8005c9c:	08005c4d 	.word	0x08005c4d
 8005ca0:	08005c4d 	.word	0x08005c4d
 8005ca4:	08005df7 	.word	0x08005df7
 8005ca8:	08005c4d 	.word	0x08005c4d
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005c4d 	.word	0x08005c4d
 8005cb4:	08005c4d 	.word	0x08005c4d
 8005cb8:	08005d97 	.word	0x08005d97
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	602a      	str	r2, [r5, #0]
 8005cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e09f      	b.n	8005e10 <_printf_i+0x1ec>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	0607      	lsls	r7, r0, #24
 8005cd6:	f103 0104 	add.w	r1, r3, #4
 8005cda:	6029      	str	r1, [r5, #0]
 8005cdc:	d501      	bpl.n	8005ce2 <_printf_i+0xbe>
 8005cde:	681e      	ldr	r6, [r3, #0]
 8005ce0:	e003      	b.n	8005cea <_printf_i+0xc6>
 8005ce2:	0646      	lsls	r6, r0, #25
 8005ce4:	d5fb      	bpl.n	8005cde <_printf_i+0xba>
 8005ce6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	da03      	bge.n	8005cf6 <_printf_i+0xd2>
 8005cee:	232d      	movs	r3, #45	; 0x2d
 8005cf0:	4276      	negs	r6, r6
 8005cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf6:	485a      	ldr	r0, [pc, #360]	; (8005e60 <_printf_i+0x23c>)
 8005cf8:	230a      	movs	r3, #10
 8005cfa:	e012      	b.n	8005d22 <_printf_i+0xfe>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	1d19      	adds	r1, r3, #4
 8005d02:	6029      	str	r1, [r5, #0]
 8005d04:	0605      	lsls	r5, r0, #24
 8005d06:	d501      	bpl.n	8005d0c <_printf_i+0xe8>
 8005d08:	681e      	ldr	r6, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <_printf_i+0xee>
 8005d0c:	0641      	lsls	r1, r0, #25
 8005d0e:	d5fb      	bpl.n	8005d08 <_printf_i+0xe4>
 8005d10:	881e      	ldrh	r6, [r3, #0]
 8005d12:	4853      	ldr	r0, [pc, #332]	; (8005e60 <_printf_i+0x23c>)
 8005d14:	2f6f      	cmp	r7, #111	; 0x6f
 8005d16:	bf0c      	ite	eq
 8005d18:	2308      	moveq	r3, #8
 8005d1a:	230a      	movne	r3, #10
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d22:	6865      	ldr	r5, [r4, #4]
 8005d24:	60a5      	str	r5, [r4, #8]
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	bfa2      	ittt	ge
 8005d2a:	6821      	ldrge	r1, [r4, #0]
 8005d2c:	f021 0104 	bicge.w	r1, r1, #4
 8005d30:	6021      	strge	r1, [r4, #0]
 8005d32:	b90e      	cbnz	r6, 8005d38 <_printf_i+0x114>
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	d04b      	beq.n	8005dd0 <_printf_i+0x1ac>
 8005d38:	4615      	mov	r5, r2
 8005d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d42:	5dc7      	ldrb	r7, [r0, r7]
 8005d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d48:	4637      	mov	r7, r6
 8005d4a:	42bb      	cmp	r3, r7
 8005d4c:	460e      	mov	r6, r1
 8005d4e:	d9f4      	bls.n	8005d3a <_printf_i+0x116>
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d10b      	bne.n	8005d6c <_printf_i+0x148>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	07de      	lsls	r6, r3, #31
 8005d58:	d508      	bpl.n	8005d6c <_printf_i+0x148>
 8005d5a:	6923      	ldr	r3, [r4, #16]
 8005d5c:	6861      	ldr	r1, [r4, #4]
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	bfde      	ittt	le
 8005d62:	2330      	movle	r3, #48	; 0x30
 8005d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d6c:	1b52      	subs	r2, r2, r5
 8005d6e:	6122      	str	r2, [r4, #16]
 8005d70:	f8cd a000 	str.w	sl, [sp]
 8005d74:	464b      	mov	r3, r9
 8005d76:	aa03      	add	r2, sp, #12
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	f7ff fee4 	bl	8005b48 <_printf_common>
 8005d80:	3001      	adds	r0, #1
 8005d82:	d14a      	bne.n	8005e1a <_printf_i+0x1f6>
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	b004      	add	sp, #16
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	4833      	ldr	r0, [pc, #204]	; (8005e64 <_printf_i+0x240>)
 8005d98:	2778      	movs	r7, #120	; 0x78
 8005d9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	6829      	ldr	r1, [r5, #0]
 8005da2:	061f      	lsls	r7, r3, #24
 8005da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da8:	d402      	bmi.n	8005db0 <_printf_i+0x18c>
 8005daa:	065f      	lsls	r7, r3, #25
 8005dac:	bf48      	it	mi
 8005dae:	b2b6      	uxthmi	r6, r6
 8005db0:	07df      	lsls	r7, r3, #31
 8005db2:	bf48      	it	mi
 8005db4:	f043 0320 	orrmi.w	r3, r3, #32
 8005db8:	6029      	str	r1, [r5, #0]
 8005dba:	bf48      	it	mi
 8005dbc:	6023      	strmi	r3, [r4, #0]
 8005dbe:	b91e      	cbnz	r6, 8005dc8 <_printf_i+0x1a4>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	f023 0320 	bic.w	r3, r3, #32
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	2310      	movs	r3, #16
 8005dca:	e7a7      	b.n	8005d1c <_printf_i+0xf8>
 8005dcc:	4824      	ldr	r0, [pc, #144]	; (8005e60 <_printf_i+0x23c>)
 8005dce:	e7e4      	b.n	8005d9a <_printf_i+0x176>
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	e7bd      	b.n	8005d50 <_printf_i+0x12c>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	6826      	ldr	r6, [r4, #0]
 8005dd8:	6961      	ldr	r1, [r4, #20]
 8005dda:	1d18      	adds	r0, r3, #4
 8005ddc:	6028      	str	r0, [r5, #0]
 8005dde:	0635      	lsls	r5, r6, #24
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	d501      	bpl.n	8005de8 <_printf_i+0x1c4>
 8005de4:	6019      	str	r1, [r3, #0]
 8005de6:	e002      	b.n	8005dee <_printf_i+0x1ca>
 8005de8:	0670      	lsls	r0, r6, #25
 8005dea:	d5fb      	bpl.n	8005de4 <_printf_i+0x1c0>
 8005dec:	8019      	strh	r1, [r3, #0]
 8005dee:	2300      	movs	r3, #0
 8005df0:	6123      	str	r3, [r4, #16]
 8005df2:	4615      	mov	r5, r2
 8005df4:	e7bc      	b.n	8005d70 <_printf_i+0x14c>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	1d1a      	adds	r2, r3, #4
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	2100      	movs	r1, #0
 8005e02:	4628      	mov	r0, r5
 8005e04:	f7fa f9ec 	bl	80001e0 <memchr>
 8005e08:	b108      	cbz	r0, 8005e0e <_printf_i+0x1ea>
 8005e0a:	1b40      	subs	r0, r0, r5
 8005e0c:	6060      	str	r0, [r4, #4]
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	2300      	movs	r3, #0
 8005e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e18:	e7aa      	b.n	8005d70 <_printf_i+0x14c>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4640      	mov	r0, r8
 8005e22:	47d0      	blx	sl
 8005e24:	3001      	adds	r0, #1
 8005e26:	d0ad      	beq.n	8005d84 <_printf_i+0x160>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	079b      	lsls	r3, r3, #30
 8005e2c:	d413      	bmi.n	8005e56 <_printf_i+0x232>
 8005e2e:	68e0      	ldr	r0, [r4, #12]
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	4298      	cmp	r0, r3
 8005e34:	bfb8      	it	lt
 8005e36:	4618      	movlt	r0, r3
 8005e38:	e7a6      	b.n	8005d88 <_printf_i+0x164>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	47d0      	blx	sl
 8005e44:	3001      	adds	r0, #1
 8005e46:	d09d      	beq.n	8005d84 <_printf_i+0x160>
 8005e48:	3501      	adds	r5, #1
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	9903      	ldr	r1, [sp, #12]
 8005e4e:	1a5b      	subs	r3, r3, r1
 8005e50:	42ab      	cmp	r3, r5
 8005e52:	dcf2      	bgt.n	8005e3a <_printf_i+0x216>
 8005e54:	e7eb      	b.n	8005e2e <_printf_i+0x20a>
 8005e56:	2500      	movs	r5, #0
 8005e58:	f104 0619 	add.w	r6, r4, #25
 8005e5c:	e7f5      	b.n	8005e4a <_printf_i+0x226>
 8005e5e:	bf00      	nop
 8005e60:	08009eae 	.word	0x08009eae
 8005e64:	08009ebf 	.word	0x08009ebf

08005e68 <_scanf_float>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	b087      	sub	sp, #28
 8005e6e:	4617      	mov	r7, r2
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	688b      	ldr	r3, [r1, #8]
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e7a:	bf83      	ittte	hi
 8005e7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e80:	195b      	addhi	r3, r3, r5
 8005e82:	9302      	strhi	r3, [sp, #8]
 8005e84:	2300      	movls	r3, #0
 8005e86:	bf86      	itte	hi
 8005e88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e8c:	608b      	strhi	r3, [r1, #8]
 8005e8e:	9302      	strls	r3, [sp, #8]
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	468b      	mov	fp, r1
 8005e94:	2500      	movs	r5, #0
 8005e96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005e9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	465e      	mov	r6, fp
 8005ea8:	46aa      	mov	sl, r5
 8005eaa:	46a9      	mov	r9, r5
 8005eac:	9501      	str	r5, [sp, #4]
 8005eae:	68a2      	ldr	r2, [r4, #8]
 8005eb0:	b152      	cbz	r2, 8005ec8 <_scanf_float+0x60>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b4e      	cmp	r3, #78	; 0x4e
 8005eb8:	d864      	bhi.n	8005f84 <_scanf_float+0x11c>
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d83c      	bhi.n	8005f38 <_scanf_float+0xd0>
 8005ebe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ec2:	b2c8      	uxtb	r0, r1
 8005ec4:	280e      	cmp	r0, #14
 8005ec6:	d93a      	bls.n	8005f3e <_scanf_float+0xd6>
 8005ec8:	f1b9 0f00 	cmp.w	r9, #0
 8005ecc:	d003      	beq.n	8005ed6 <_scanf_float+0x6e>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eda:	f1ba 0f01 	cmp.w	sl, #1
 8005ede:	f200 8113 	bhi.w	8006108 <_scanf_float+0x2a0>
 8005ee2:	455e      	cmp	r6, fp
 8005ee4:	f200 8105 	bhi.w	80060f2 <_scanf_float+0x28a>
 8005ee8:	2501      	movs	r5, #1
 8005eea:	4628      	mov	r0, r5
 8005eec:	b007      	add	sp, #28
 8005eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005ef6:	2a0d      	cmp	r2, #13
 8005ef8:	d8e6      	bhi.n	8005ec8 <_scanf_float+0x60>
 8005efa:	a101      	add	r1, pc, #4	; (adr r1, 8005f00 <_scanf_float+0x98>)
 8005efc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f00:	0800603f 	.word	0x0800603f
 8005f04:	08005ec9 	.word	0x08005ec9
 8005f08:	08005ec9 	.word	0x08005ec9
 8005f0c:	08005ec9 	.word	0x08005ec9
 8005f10:	0800609f 	.word	0x0800609f
 8005f14:	08006077 	.word	0x08006077
 8005f18:	08005ec9 	.word	0x08005ec9
 8005f1c:	08005ec9 	.word	0x08005ec9
 8005f20:	0800604d 	.word	0x0800604d
 8005f24:	08005ec9 	.word	0x08005ec9
 8005f28:	08005ec9 	.word	0x08005ec9
 8005f2c:	08005ec9 	.word	0x08005ec9
 8005f30:	08005ec9 	.word	0x08005ec9
 8005f34:	08006005 	.word	0x08006005
 8005f38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f3c:	e7db      	b.n	8005ef6 <_scanf_float+0x8e>
 8005f3e:	290e      	cmp	r1, #14
 8005f40:	d8c2      	bhi.n	8005ec8 <_scanf_float+0x60>
 8005f42:	a001      	add	r0, pc, #4	; (adr r0, 8005f48 <_scanf_float+0xe0>)
 8005f44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f48:	08005ff7 	.word	0x08005ff7
 8005f4c:	08005ec9 	.word	0x08005ec9
 8005f50:	08005ff7 	.word	0x08005ff7
 8005f54:	0800608b 	.word	0x0800608b
 8005f58:	08005ec9 	.word	0x08005ec9
 8005f5c:	08005fa5 	.word	0x08005fa5
 8005f60:	08005fe1 	.word	0x08005fe1
 8005f64:	08005fe1 	.word	0x08005fe1
 8005f68:	08005fe1 	.word	0x08005fe1
 8005f6c:	08005fe1 	.word	0x08005fe1
 8005f70:	08005fe1 	.word	0x08005fe1
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	08005fe1 	.word	0x08005fe1
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	08005fe1 	.word	0x08005fe1
 8005f84:	2b6e      	cmp	r3, #110	; 0x6e
 8005f86:	d809      	bhi.n	8005f9c <_scanf_float+0x134>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d8b2      	bhi.n	8005ef2 <_scanf_float+0x8a>
 8005f8c:	2b54      	cmp	r3, #84	; 0x54
 8005f8e:	d077      	beq.n	8006080 <_scanf_float+0x218>
 8005f90:	2b59      	cmp	r3, #89	; 0x59
 8005f92:	d199      	bne.n	8005ec8 <_scanf_float+0x60>
 8005f94:	2d07      	cmp	r5, #7
 8005f96:	d197      	bne.n	8005ec8 <_scanf_float+0x60>
 8005f98:	2508      	movs	r5, #8
 8005f9a:	e029      	b.n	8005ff0 <_scanf_float+0x188>
 8005f9c:	2b74      	cmp	r3, #116	; 0x74
 8005f9e:	d06f      	beq.n	8006080 <_scanf_float+0x218>
 8005fa0:	2b79      	cmp	r3, #121	; 0x79
 8005fa2:	e7f6      	b.n	8005f92 <_scanf_float+0x12a>
 8005fa4:	6821      	ldr	r1, [r4, #0]
 8005fa6:	05c8      	lsls	r0, r1, #23
 8005fa8:	d51a      	bpl.n	8005fe0 <_scanf_float+0x178>
 8005faa:	9b02      	ldr	r3, [sp, #8]
 8005fac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fb0:	6021      	str	r1, [r4, #0]
 8005fb2:	f109 0901 	add.w	r9, r9, #1
 8005fb6:	b11b      	cbz	r3, 8005fc0 <_scanf_float+0x158>
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	3201      	adds	r2, #1
 8005fbc:	9302      	str	r3, [sp, #8]
 8005fbe:	60a2      	str	r2, [r4, #8]
 8005fc0:	68a3      	ldr	r3, [r4, #8]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	f340 8084 	ble.w	80060e0 <_scanf_float+0x278>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	e766      	b.n	8005eae <_scanf_float+0x46>
 8005fe0:	eb1a 0f05 	cmn.w	sl, r5
 8005fe4:	f47f af70 	bne.w	8005ec8 <_scanf_float+0x60>
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	f806 3b01 	strb.w	r3, [r6], #1
 8005ff4:	e7e4      	b.n	8005fc0 <_scanf_float+0x158>
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	0610      	lsls	r0, r2, #24
 8005ffa:	f57f af65 	bpl.w	8005ec8 <_scanf_float+0x60>
 8005ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006002:	e7f4      	b.n	8005fee <_scanf_float+0x186>
 8006004:	f1ba 0f00 	cmp.w	sl, #0
 8006008:	d10e      	bne.n	8006028 <_scanf_float+0x1c0>
 800600a:	f1b9 0f00 	cmp.w	r9, #0
 800600e:	d10e      	bne.n	800602e <_scanf_float+0x1c6>
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006016:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800601a:	d108      	bne.n	800602e <_scanf_float+0x1c6>
 800601c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	f04f 0a01 	mov.w	sl, #1
 8006026:	e7e3      	b.n	8005ff0 <_scanf_float+0x188>
 8006028:	f1ba 0f02 	cmp.w	sl, #2
 800602c:	d055      	beq.n	80060da <_scanf_float+0x272>
 800602e:	2d01      	cmp	r5, #1
 8006030:	d002      	beq.n	8006038 <_scanf_float+0x1d0>
 8006032:	2d04      	cmp	r5, #4
 8006034:	f47f af48 	bne.w	8005ec8 <_scanf_float+0x60>
 8006038:	3501      	adds	r5, #1
 800603a:	b2ed      	uxtb	r5, r5
 800603c:	e7d8      	b.n	8005ff0 <_scanf_float+0x188>
 800603e:	f1ba 0f01 	cmp.w	sl, #1
 8006042:	f47f af41 	bne.w	8005ec8 <_scanf_float+0x60>
 8006046:	f04f 0a02 	mov.w	sl, #2
 800604a:	e7d1      	b.n	8005ff0 <_scanf_float+0x188>
 800604c:	b97d      	cbnz	r5, 800606e <_scanf_float+0x206>
 800604e:	f1b9 0f00 	cmp.w	r9, #0
 8006052:	f47f af3c 	bne.w	8005ece <_scanf_float+0x66>
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800605c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006060:	f47f af39 	bne.w	8005ed6 <_scanf_float+0x6e>
 8006064:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	2501      	movs	r5, #1
 800606c:	e7c0      	b.n	8005ff0 <_scanf_float+0x188>
 800606e:	2d03      	cmp	r5, #3
 8006070:	d0e2      	beq.n	8006038 <_scanf_float+0x1d0>
 8006072:	2d05      	cmp	r5, #5
 8006074:	e7de      	b.n	8006034 <_scanf_float+0x1cc>
 8006076:	2d02      	cmp	r5, #2
 8006078:	f47f af26 	bne.w	8005ec8 <_scanf_float+0x60>
 800607c:	2503      	movs	r5, #3
 800607e:	e7b7      	b.n	8005ff0 <_scanf_float+0x188>
 8006080:	2d06      	cmp	r5, #6
 8006082:	f47f af21 	bne.w	8005ec8 <_scanf_float+0x60>
 8006086:	2507      	movs	r5, #7
 8006088:	e7b2      	b.n	8005ff0 <_scanf_float+0x188>
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	0591      	lsls	r1, r2, #22
 800608e:	f57f af1b 	bpl.w	8005ec8 <_scanf_float+0x60>
 8006092:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	f8cd 9004 	str.w	r9, [sp, #4]
 800609c:	e7a8      	b.n	8005ff0 <_scanf_float+0x188>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060a8:	d006      	beq.n	80060b8 <_scanf_float+0x250>
 80060aa:	0550      	lsls	r0, r2, #21
 80060ac:	f57f af0c 	bpl.w	8005ec8 <_scanf_float+0x60>
 80060b0:	f1b9 0f00 	cmp.w	r9, #0
 80060b4:	f43f af0f 	beq.w	8005ed6 <_scanf_float+0x6e>
 80060b8:	0591      	lsls	r1, r2, #22
 80060ba:	bf58      	it	pl
 80060bc:	9901      	ldrpl	r1, [sp, #4]
 80060be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060c2:	bf58      	it	pl
 80060c4:	eba9 0101 	subpl.w	r1, r9, r1
 80060c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060cc:	bf58      	it	pl
 80060ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	f04f 0900 	mov.w	r9, #0
 80060d8:	e78a      	b.n	8005ff0 <_scanf_float+0x188>
 80060da:	f04f 0a03 	mov.w	sl, #3
 80060de:	e787      	b.n	8005ff0 <_scanf_float+0x188>
 80060e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060e4:	4639      	mov	r1, r7
 80060e6:	4640      	mov	r0, r8
 80060e8:	4798      	blx	r3
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f43f aedf 	beq.w	8005eae <_scanf_float+0x46>
 80060f0:	e6ea      	b.n	8005ec8 <_scanf_float+0x60>
 80060f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060fa:	463a      	mov	r2, r7
 80060fc:	4640      	mov	r0, r8
 80060fe:	4798      	blx	r3
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	3b01      	subs	r3, #1
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	e6ec      	b.n	8005ee2 <_scanf_float+0x7a>
 8006108:	1e6b      	subs	r3, r5, #1
 800610a:	2b06      	cmp	r3, #6
 800610c:	d825      	bhi.n	800615a <_scanf_float+0x2f2>
 800610e:	2d02      	cmp	r5, #2
 8006110:	d836      	bhi.n	8006180 <_scanf_float+0x318>
 8006112:	455e      	cmp	r6, fp
 8006114:	f67f aee8 	bls.w	8005ee8 <_scanf_float+0x80>
 8006118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800611c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006120:	463a      	mov	r2, r7
 8006122:	4640      	mov	r0, r8
 8006124:	4798      	blx	r3
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	3b01      	subs	r3, #1
 800612a:	6123      	str	r3, [r4, #16]
 800612c:	e7f1      	b.n	8006112 <_scanf_float+0x2aa>
 800612e:	9802      	ldr	r0, [sp, #8]
 8006130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006134:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006138:	9002      	str	r0, [sp, #8]
 800613a:	463a      	mov	r2, r7
 800613c:	4640      	mov	r0, r8
 800613e:	4798      	blx	r3
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	3b01      	subs	r3, #1
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800614a:	fa5f fa8a 	uxtb.w	sl, sl
 800614e:	f1ba 0f02 	cmp.w	sl, #2
 8006152:	d1ec      	bne.n	800612e <_scanf_float+0x2c6>
 8006154:	3d03      	subs	r5, #3
 8006156:	b2ed      	uxtb	r5, r5
 8006158:	1b76      	subs	r6, r6, r5
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	05da      	lsls	r2, r3, #23
 800615e:	d52f      	bpl.n	80061c0 <_scanf_float+0x358>
 8006160:	055b      	lsls	r3, r3, #21
 8006162:	d510      	bpl.n	8006186 <_scanf_float+0x31e>
 8006164:	455e      	cmp	r6, fp
 8006166:	f67f aebf 	bls.w	8005ee8 <_scanf_float+0x80>
 800616a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800616e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006172:	463a      	mov	r2, r7
 8006174:	4640      	mov	r0, r8
 8006176:	4798      	blx	r3
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	3b01      	subs	r3, #1
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	e7f1      	b.n	8006164 <_scanf_float+0x2fc>
 8006180:	46aa      	mov	sl, r5
 8006182:	9602      	str	r6, [sp, #8]
 8006184:	e7df      	b.n	8006146 <_scanf_float+0x2de>
 8006186:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	2965      	cmp	r1, #101	; 0x65
 800618e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006192:	f106 35ff 	add.w	r5, r6, #4294967295
 8006196:	6123      	str	r3, [r4, #16]
 8006198:	d00c      	beq.n	80061b4 <_scanf_float+0x34c>
 800619a:	2945      	cmp	r1, #69	; 0x45
 800619c:	d00a      	beq.n	80061b4 <_scanf_float+0x34c>
 800619e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a2:	463a      	mov	r2, r7
 80061a4:	4640      	mov	r0, r8
 80061a6:	4798      	blx	r3
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	1eb5      	subs	r5, r6, #2
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b8:	463a      	mov	r2, r7
 80061ba:	4640      	mov	r0, r8
 80061bc:	4798      	blx	r3
 80061be:	462e      	mov	r6, r5
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	f015 0510 	ands.w	r5, r5, #16
 80061c6:	d158      	bne.n	800627a <_scanf_float+0x412>
 80061c8:	7035      	strb	r5, [r6, #0]
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d11c      	bne.n	8006210 <_scanf_float+0x3a8>
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	454b      	cmp	r3, r9
 80061da:	eba3 0209 	sub.w	r2, r3, r9
 80061de:	d124      	bne.n	800622a <_scanf_float+0x3c2>
 80061e0:	2200      	movs	r2, #0
 80061e2:	4659      	mov	r1, fp
 80061e4:	4640      	mov	r0, r8
 80061e6:	f002 fc4b 	bl	8008a80 <_strtod_r>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	6821      	ldr	r1, [r4, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f011 0f02 	tst.w	r1, #2
 80061f4:	ec57 6b10 	vmov	r6, r7, d0
 80061f8:	f103 0204 	add.w	r2, r3, #4
 80061fc:	d020      	beq.n	8006240 <_scanf_float+0x3d8>
 80061fe:	9903      	ldr	r1, [sp, #12]
 8006200:	600a      	str	r2, [r1, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	e9c3 6700 	strd	r6, r7, [r3]
 8006208:	68e3      	ldr	r3, [r4, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60e3      	str	r3, [r4, #12]
 800620e:	e66c      	b.n	8005eea <_scanf_float+0x82>
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0e4      	beq.n	80061e0 <_scanf_float+0x378>
 8006216:	9905      	ldr	r1, [sp, #20]
 8006218:	230a      	movs	r3, #10
 800621a:	462a      	mov	r2, r5
 800621c:	3101      	adds	r1, #1
 800621e:	4640      	mov	r0, r8
 8006220:	f002 fcb6 	bl	8008b90 <_strtol_r>
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	9e05      	ldr	r6, [sp, #20]
 8006228:	1ac2      	subs	r2, r0, r3
 800622a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800622e:	429e      	cmp	r6, r3
 8006230:	bf28      	it	cs
 8006232:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006236:	4912      	ldr	r1, [pc, #72]	; (8006280 <_scanf_float+0x418>)
 8006238:	4630      	mov	r0, r6
 800623a:	f000 f8d5 	bl	80063e8 <siprintf>
 800623e:	e7cf      	b.n	80061e0 <_scanf_float+0x378>
 8006240:	f011 0f04 	tst.w	r1, #4
 8006244:	9903      	ldr	r1, [sp, #12]
 8006246:	600a      	str	r2, [r1, #0]
 8006248:	d1db      	bne.n	8006202 <_scanf_float+0x39a>
 800624a:	f8d3 8000 	ldr.w	r8, [r3]
 800624e:	ee10 2a10 	vmov	r2, s0
 8006252:	ee10 0a10 	vmov	r0, s0
 8006256:	463b      	mov	r3, r7
 8006258:	4639      	mov	r1, r7
 800625a:	f7fa fc6f 	bl	8000b3c <__aeabi_dcmpun>
 800625e:	b128      	cbz	r0, 800626c <_scanf_float+0x404>
 8006260:	4808      	ldr	r0, [pc, #32]	; (8006284 <_scanf_float+0x41c>)
 8006262:	f000 f9d1 	bl	8006608 <nanf>
 8006266:	ed88 0a00 	vstr	s0, [r8]
 800626a:	e7cd      	b.n	8006208 <_scanf_float+0x3a0>
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa fcc2 	bl	8000bf8 <__aeabi_d2f>
 8006274:	f8c8 0000 	str.w	r0, [r8]
 8006278:	e7c6      	b.n	8006208 <_scanf_float+0x3a0>
 800627a:	2500      	movs	r5, #0
 800627c:	e635      	b.n	8005eea <_scanf_float+0x82>
 800627e:	bf00      	nop
 8006280:	08009ed0 	.word	0x08009ed0
 8006284:	0800a265 	.word	0x0800a265

08006288 <std>:
 8006288:	2300      	movs	r3, #0
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	e9c0 3300 	strd	r3, r3, [r0]
 8006292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006296:	6083      	str	r3, [r0, #8]
 8006298:	8181      	strh	r1, [r0, #12]
 800629a:	6643      	str	r3, [r0, #100]	; 0x64
 800629c:	81c2      	strh	r2, [r0, #14]
 800629e:	6183      	str	r3, [r0, #24]
 80062a0:	4619      	mov	r1, r3
 80062a2:	2208      	movs	r2, #8
 80062a4:	305c      	adds	r0, #92	; 0x5c
 80062a6:	f000 f923 	bl	80064f0 <memset>
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <std+0x38>)
 80062ac:	6263      	str	r3, [r4, #36]	; 0x24
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <std+0x3c>)
 80062b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <std+0x40>)
 80062b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <std+0x44>)
 80062b8:	6224      	str	r4, [r4, #32]
 80062ba:	6323      	str	r3, [r4, #48]	; 0x30
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	08006429 	.word	0x08006429
 80062c4:	0800644b 	.word	0x0800644b
 80062c8:	08006483 	.word	0x08006483
 80062cc:	080064a7 	.word	0x080064a7

080062d0 <stdio_exit_handler>:
 80062d0:	4a02      	ldr	r2, [pc, #8]	; (80062dc <stdio_exit_handler+0xc>)
 80062d2:	4903      	ldr	r1, [pc, #12]	; (80062e0 <stdio_exit_handler+0x10>)
 80062d4:	4803      	ldr	r0, [pc, #12]	; (80062e4 <stdio_exit_handler+0x14>)
 80062d6:	f000 b869 	b.w	80063ac <_fwalk_sglue>
 80062da:	bf00      	nop
 80062dc:	20000010 	.word	0x20000010
 80062e0:	08008f51 	.word	0x08008f51
 80062e4:	2000001c 	.word	0x2000001c

080062e8 <cleanup_stdio>:
 80062e8:	6841      	ldr	r1, [r0, #4]
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <cleanup_stdio+0x34>)
 80062ec:	4299      	cmp	r1, r3
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	d001      	beq.n	80062f8 <cleanup_stdio+0x10>
 80062f4:	f002 fe2c 	bl	8008f50 <_fflush_r>
 80062f8:	68a1      	ldr	r1, [r4, #8]
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <cleanup_stdio+0x38>)
 80062fc:	4299      	cmp	r1, r3
 80062fe:	d002      	beq.n	8006306 <cleanup_stdio+0x1e>
 8006300:	4620      	mov	r0, r4
 8006302:	f002 fe25 	bl	8008f50 <_fflush_r>
 8006306:	68e1      	ldr	r1, [r4, #12]
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <cleanup_stdio+0x3c>)
 800630a:	4299      	cmp	r1, r3
 800630c:	d004      	beq.n	8006318 <cleanup_stdio+0x30>
 800630e:	4620      	mov	r0, r4
 8006310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006314:	f002 be1c 	b.w	8008f50 <_fflush_r>
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	20004f64 	.word	0x20004f64
 8006320:	20004fcc 	.word	0x20004fcc
 8006324:	20005034 	.word	0x20005034

08006328 <global_stdio_init.part.0>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <global_stdio_init.part.0+0x30>)
 800632c:	4c0b      	ldr	r4, [pc, #44]	; (800635c <global_stdio_init.part.0+0x34>)
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <global_stdio_init.part.0+0x38>)
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	4620      	mov	r0, r4
 8006334:	2200      	movs	r2, #0
 8006336:	2104      	movs	r1, #4
 8006338:	f7ff ffa6 	bl	8006288 <std>
 800633c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006340:	2201      	movs	r2, #1
 8006342:	2109      	movs	r1, #9
 8006344:	f7ff ffa0 	bl	8006288 <std>
 8006348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800634c:	2202      	movs	r2, #2
 800634e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006352:	2112      	movs	r1, #18
 8006354:	f7ff bf98 	b.w	8006288 <std>
 8006358:	2000509c 	.word	0x2000509c
 800635c:	20004f64 	.word	0x20004f64
 8006360:	080062d1 	.word	0x080062d1

08006364 <__sfp_lock_acquire>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sfp_lock_acquire+0x8>)
 8006366:	f000 b93f 	b.w	80065e8 <__retarget_lock_acquire_recursive>
 800636a:	bf00      	nop
 800636c:	200050a5 	.word	0x200050a5

08006370 <__sfp_lock_release>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sfp_lock_release+0x8>)
 8006372:	f000 b93a 	b.w	80065ea <__retarget_lock_release_recursive>
 8006376:	bf00      	nop
 8006378:	200050a5 	.word	0x200050a5

0800637c <__sinit>:
 800637c:	b510      	push	{r4, lr}
 800637e:	4604      	mov	r4, r0
 8006380:	f7ff fff0 	bl	8006364 <__sfp_lock_acquire>
 8006384:	6a23      	ldr	r3, [r4, #32]
 8006386:	b11b      	cbz	r3, 8006390 <__sinit+0x14>
 8006388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800638c:	f7ff bff0 	b.w	8006370 <__sfp_lock_release>
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <__sinit+0x28>)
 8006392:	6223      	str	r3, [r4, #32]
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <__sinit+0x2c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f5      	bne.n	8006388 <__sinit+0xc>
 800639c:	f7ff ffc4 	bl	8006328 <global_stdio_init.part.0>
 80063a0:	e7f2      	b.n	8006388 <__sinit+0xc>
 80063a2:	bf00      	nop
 80063a4:	080062e9 	.word	0x080062e9
 80063a8:	2000509c 	.word	0x2000509c

080063ac <_fwalk_sglue>:
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b0:	4607      	mov	r7, r0
 80063b2:	4688      	mov	r8, r1
 80063b4:	4614      	mov	r4, r2
 80063b6:	2600      	movs	r6, #0
 80063b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063bc:	f1b9 0901 	subs.w	r9, r9, #1
 80063c0:	d505      	bpl.n	80063ce <_fwalk_sglue+0x22>
 80063c2:	6824      	ldr	r4, [r4, #0]
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	d1f7      	bne.n	80063b8 <_fwalk_sglue+0xc>
 80063c8:	4630      	mov	r0, r6
 80063ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ce:	89ab      	ldrh	r3, [r5, #12]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d907      	bls.n	80063e4 <_fwalk_sglue+0x38>
 80063d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063d8:	3301      	adds	r3, #1
 80063da:	d003      	beq.n	80063e4 <_fwalk_sglue+0x38>
 80063dc:	4629      	mov	r1, r5
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	4306      	orrs	r6, r0
 80063e4:	3568      	adds	r5, #104	; 0x68
 80063e6:	e7e9      	b.n	80063bc <_fwalk_sglue+0x10>

080063e8 <siprintf>:
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b500      	push	{lr}
 80063ec:	b09c      	sub	sp, #112	; 0x70
 80063ee:	ab1d      	add	r3, sp, #116	; 0x74
 80063f0:	9002      	str	r0, [sp, #8]
 80063f2:	9006      	str	r0, [sp, #24]
 80063f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063f8:	4809      	ldr	r0, [pc, #36]	; (8006420 <siprintf+0x38>)
 80063fa:	9107      	str	r1, [sp, #28]
 80063fc:	9104      	str	r1, [sp, #16]
 80063fe:	4909      	ldr	r1, [pc, #36]	; (8006424 <siprintf+0x3c>)
 8006400:	f853 2b04 	ldr.w	r2, [r3], #4
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	a902      	add	r1, sp, #8
 800640c:	f002 fc1c 	bl	8008c48 <_svfiprintf_r>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	b01c      	add	sp, #112	; 0x70
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b003      	add	sp, #12
 800641e:	4770      	bx	lr
 8006420:	20000068 	.word	0x20000068
 8006424:	ffff0208 	.word	0xffff0208

08006428 <__sread>:
 8006428:	b510      	push	{r4, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006430:	f000 f88c 	bl	800654c <_read_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	bfab      	itete	ge
 8006438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800643a:	89a3      	ldrhlt	r3, [r4, #12]
 800643c:	181b      	addge	r3, r3, r0
 800643e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006442:	bfac      	ite	ge
 8006444:	6563      	strge	r3, [r4, #84]	; 0x54
 8006446:	81a3      	strhlt	r3, [r4, #12]
 8006448:	bd10      	pop	{r4, pc}

0800644a <__swrite>:
 800644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	461f      	mov	r7, r3
 8006450:	898b      	ldrh	r3, [r1, #12]
 8006452:	05db      	lsls	r3, r3, #23
 8006454:	4605      	mov	r5, r0
 8006456:	460c      	mov	r4, r1
 8006458:	4616      	mov	r6, r2
 800645a:	d505      	bpl.n	8006468 <__swrite+0x1e>
 800645c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006460:	2302      	movs	r3, #2
 8006462:	2200      	movs	r2, #0
 8006464:	f000 f860 	bl	8006528 <_lseek_r>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	4632      	mov	r2, r6
 8006476:	463b      	mov	r3, r7
 8006478:	4628      	mov	r0, r5
 800647a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	f000 b877 	b.w	8006570 <_write_r>

08006482 <__sseek>:
 8006482:	b510      	push	{r4, lr}
 8006484:	460c      	mov	r4, r1
 8006486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648a:	f000 f84d 	bl	8006528 <_lseek_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	bf15      	itete	ne
 8006494:	6560      	strne	r0, [r4, #84]	; 0x54
 8006496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800649a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800649e:	81a3      	strheq	r3, [r4, #12]
 80064a0:	bf18      	it	ne
 80064a2:	81a3      	strhne	r3, [r4, #12]
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__sclose>:
 80064a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064aa:	f000 b82d 	b.w	8006508 <_close_r>
	...

080064b0 <_vsiprintf_r>:
 80064b0:	b500      	push	{lr}
 80064b2:	b09b      	sub	sp, #108	; 0x6c
 80064b4:	9100      	str	r1, [sp, #0]
 80064b6:	9104      	str	r1, [sp, #16]
 80064b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	9102      	str	r1, [sp, #8]
 80064c0:	4905      	ldr	r1, [pc, #20]	; (80064d8 <_vsiprintf_r+0x28>)
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	4669      	mov	r1, sp
 80064c6:	f002 fbbf 	bl	8008c48 <_svfiprintf_r>
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	b01b      	add	sp, #108	; 0x6c
 80064d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80064d6:	bf00      	nop
 80064d8:	ffff0208 	.word	0xffff0208

080064dc <vsiprintf>:
 80064dc:	4613      	mov	r3, r2
 80064de:	460a      	mov	r2, r1
 80064e0:	4601      	mov	r1, r0
 80064e2:	4802      	ldr	r0, [pc, #8]	; (80064ec <vsiprintf+0x10>)
 80064e4:	6800      	ldr	r0, [r0, #0]
 80064e6:	f7ff bfe3 	b.w	80064b0 <_vsiprintf_r>
 80064ea:	bf00      	nop
 80064ec:	20000068 	.word	0x20000068

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_localeconv_r>:
 8006500:	4800      	ldr	r0, [pc, #0]	; (8006504 <_localeconv_r+0x4>)
 8006502:	4770      	bx	lr
 8006504:	2000015c 	.word	0x2000015c

08006508 <_close_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	; (8006524 <_close_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fb f910 	bl	8001738 <_close>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_close_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_close_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200050a0 	.word	0x200050a0

08006528 <_lseek_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_lseek_r+0x20>)
 800652c:	4604      	mov	r4, r0
 800652e:	4608      	mov	r0, r1
 8006530:	4611      	mov	r1, r2
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fb f925 	bl	8001786 <_lseek>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_lseek_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_lseek_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200050a0 	.word	0x200050a0

0800654c <_read_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d07      	ldr	r5, [pc, #28]	; (800656c <_read_r+0x20>)
 8006550:	4604      	mov	r4, r0
 8006552:	4608      	mov	r0, r1
 8006554:	4611      	mov	r1, r2
 8006556:	2200      	movs	r2, #0
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	f7fb f8b3 	bl	80016c6 <_read>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_read_r+0x1e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_read_r+0x1e>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200050a0 	.word	0x200050a0

08006570 <_write_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	; (8006590 <_write_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fb f8be 	bl	8001700 <_write>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_write_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_write_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200050a0 	.word	0x200050a0

08006594 <__errno>:
 8006594:	4b01      	ldr	r3, [pc, #4]	; (800659c <__errno+0x8>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000068 	.word	0x20000068

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4d0d      	ldr	r5, [pc, #52]	; (80065d8 <__libc_init_array+0x38>)
 80065a4:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a6:	1b64      	subs	r4, r4, r5
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	2600      	movs	r6, #0
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	4d0b      	ldr	r5, [pc, #44]	; (80065e0 <__libc_init_array+0x40>)
 80065b2:	4c0c      	ldr	r4, [pc, #48]	; (80065e4 <__libc_init_array+0x44>)
 80065b4:	f003 fbd4 	bl	8009d60 <_init>
 80065b8:	1b64      	subs	r4, r4, r5
 80065ba:	10a4      	asrs	r4, r4, #2
 80065bc:	2600      	movs	r6, #0
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	0800a2d0 	.word	0x0800a2d0
 80065dc:	0800a2d0 	.word	0x0800a2d0
 80065e0:	0800a2d0 	.word	0x0800a2d0
 80065e4:	0800a2d4 	.word	0x0800a2d4

080065e8 <__retarget_lock_acquire_recursive>:
 80065e8:	4770      	bx	lr

080065ea <__retarget_lock_release_recursive>:
 80065ea:	4770      	bx	lr

080065ec <memcpy>:
 80065ec:	440a      	add	r2, r1
 80065ee:	4291      	cmp	r1, r2
 80065f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f4:	d100      	bne.n	80065f8 <memcpy+0xc>
 80065f6:	4770      	bx	lr
 80065f8:	b510      	push	{r4, lr}
 80065fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006602:	4291      	cmp	r1, r2
 8006604:	d1f9      	bne.n	80065fa <memcpy+0xe>
 8006606:	bd10      	pop	{r4, pc}

08006608 <nanf>:
 8006608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006610 <nanf+0x8>
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	7fc00000 	.word	0x7fc00000

08006614 <quorem>:
 8006614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	6903      	ldr	r3, [r0, #16]
 800661a:	690c      	ldr	r4, [r1, #16]
 800661c:	42a3      	cmp	r3, r4
 800661e:	4607      	mov	r7, r0
 8006620:	db7e      	blt.n	8006720 <quorem+0x10c>
 8006622:	3c01      	subs	r4, #1
 8006624:	f101 0814 	add.w	r8, r1, #20
 8006628:	f100 0514 	add.w	r5, r0, #20
 800662c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800663a:	3301      	adds	r3, #1
 800663c:	429a      	cmp	r2, r3
 800663e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006646:	fbb2 f6f3 	udiv	r6, r2, r3
 800664a:	d331      	bcc.n	80066b0 <quorem+0x9c>
 800664c:	f04f 0e00 	mov.w	lr, #0
 8006650:	4640      	mov	r0, r8
 8006652:	46ac      	mov	ip, r5
 8006654:	46f2      	mov	sl, lr
 8006656:	f850 2b04 	ldr.w	r2, [r0], #4
 800665a:	b293      	uxth	r3, r2
 800665c:	fb06 e303 	mla	r3, r6, r3, lr
 8006660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006664:	0c1a      	lsrs	r2, r3, #16
 8006666:	b29b      	uxth	r3, r3
 8006668:	ebaa 0303 	sub.w	r3, sl, r3
 800666c:	f8dc a000 	ldr.w	sl, [ip]
 8006670:	fa13 f38a 	uxtah	r3, r3, sl
 8006674:	fb06 220e 	mla	r2, r6, lr, r2
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	9b00      	ldr	r3, [sp, #0]
 800667c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006680:	b292      	uxth	r2, r2
 8006682:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800668a:	f8bd 3000 	ldrh.w	r3, [sp]
 800668e:	4581      	cmp	r9, r0
 8006690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006694:	f84c 3b04 	str.w	r3, [ip], #4
 8006698:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800669c:	d2db      	bcs.n	8006656 <quorem+0x42>
 800669e:	f855 300b 	ldr.w	r3, [r5, fp]
 80066a2:	b92b      	cbnz	r3, 80066b0 <quorem+0x9c>
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	3b04      	subs	r3, #4
 80066a8:	429d      	cmp	r5, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	d32c      	bcc.n	8006708 <quorem+0xf4>
 80066ae:	613c      	str	r4, [r7, #16]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f001 f9f1 	bl	8007a98 <__mcmp>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	db22      	blt.n	8006700 <quorem+0xec>
 80066ba:	3601      	adds	r6, #1
 80066bc:	4629      	mov	r1, r5
 80066be:	2000      	movs	r0, #0
 80066c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80066c4:	f8d1 c000 	ldr.w	ip, [r1]
 80066c8:	b293      	uxth	r3, r2
 80066ca:	1ac3      	subs	r3, r0, r3
 80066cc:	0c12      	lsrs	r2, r2, #16
 80066ce:	fa13 f38c 	uxtah	r3, r3, ip
 80066d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e0:	45c1      	cmp	r9, r8
 80066e2:	f841 3b04 	str.w	r3, [r1], #4
 80066e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066ea:	d2e9      	bcs.n	80066c0 <quorem+0xac>
 80066ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066f4:	b922      	cbnz	r2, 8006700 <quorem+0xec>
 80066f6:	3b04      	subs	r3, #4
 80066f8:	429d      	cmp	r5, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	d30a      	bcc.n	8006714 <quorem+0x100>
 80066fe:	613c      	str	r4, [r7, #16]
 8006700:	4630      	mov	r0, r6
 8006702:	b003      	add	sp, #12
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	3b04      	subs	r3, #4
 800670c:	2a00      	cmp	r2, #0
 800670e:	d1ce      	bne.n	80066ae <quorem+0x9a>
 8006710:	3c01      	subs	r4, #1
 8006712:	e7c9      	b.n	80066a8 <quorem+0x94>
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	3b04      	subs	r3, #4
 8006718:	2a00      	cmp	r2, #0
 800671a:	d1f0      	bne.n	80066fe <quorem+0xea>
 800671c:	3c01      	subs	r4, #1
 800671e:	e7eb      	b.n	80066f8 <quorem+0xe4>
 8006720:	2000      	movs	r0, #0
 8006722:	e7ee      	b.n	8006702 <quorem+0xee>
 8006724:	0000      	movs	r0, r0
	...

08006728 <_dtoa_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	ed2d 8b04 	vpush	{d8-d9}
 8006730:	69c5      	ldr	r5, [r0, #28]
 8006732:	b093      	sub	sp, #76	; 0x4c
 8006734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006738:	ec57 6b10 	vmov	r6, r7, d0
 800673c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006740:	9107      	str	r1, [sp, #28]
 8006742:	4604      	mov	r4, r0
 8006744:	920a      	str	r2, [sp, #40]	; 0x28
 8006746:	930d      	str	r3, [sp, #52]	; 0x34
 8006748:	b975      	cbnz	r5, 8006768 <_dtoa_r+0x40>
 800674a:	2010      	movs	r0, #16
 800674c:	f000 fe2a 	bl	80073a4 <malloc>
 8006750:	4602      	mov	r2, r0
 8006752:	61e0      	str	r0, [r4, #28]
 8006754:	b920      	cbnz	r0, 8006760 <_dtoa_r+0x38>
 8006756:	4bae      	ldr	r3, [pc, #696]	; (8006a10 <_dtoa_r+0x2e8>)
 8006758:	21ef      	movs	r1, #239	; 0xef
 800675a:	48ae      	ldr	r0, [pc, #696]	; (8006a14 <_dtoa_r+0x2ec>)
 800675c:	f002 fc64 	bl	8009028 <__assert_func>
 8006760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006764:	6005      	str	r5, [r0, #0]
 8006766:	60c5      	str	r5, [r0, #12]
 8006768:	69e3      	ldr	r3, [r4, #28]
 800676a:	6819      	ldr	r1, [r3, #0]
 800676c:	b151      	cbz	r1, 8006784 <_dtoa_r+0x5c>
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	604a      	str	r2, [r1, #4]
 8006772:	2301      	movs	r3, #1
 8006774:	4093      	lsls	r3, r2
 8006776:	608b      	str	r3, [r1, #8]
 8006778:	4620      	mov	r0, r4
 800677a:	f000 ff07 	bl	800758c <_Bfree>
 800677e:	69e3      	ldr	r3, [r4, #28]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	1e3b      	subs	r3, r7, #0
 8006786:	bfbb      	ittet	lt
 8006788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800678c:	9303      	strlt	r3, [sp, #12]
 800678e:	2300      	movge	r3, #0
 8006790:	2201      	movlt	r2, #1
 8006792:	bfac      	ite	ge
 8006794:	f8c8 3000 	strge.w	r3, [r8]
 8006798:	f8c8 2000 	strlt.w	r2, [r8]
 800679c:	4b9e      	ldr	r3, [pc, #632]	; (8006a18 <_dtoa_r+0x2f0>)
 800679e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067a2:	ea33 0308 	bics.w	r3, r3, r8
 80067a6:	d11b      	bne.n	80067e0 <_dtoa_r+0xb8>
 80067a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067b4:	4333      	orrs	r3, r6
 80067b6:	f000 8593 	beq.w	80072e0 <_dtoa_r+0xbb8>
 80067ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067bc:	b963      	cbnz	r3, 80067d8 <_dtoa_r+0xb0>
 80067be:	4b97      	ldr	r3, [pc, #604]	; (8006a1c <_dtoa_r+0x2f4>)
 80067c0:	e027      	b.n	8006812 <_dtoa_r+0xea>
 80067c2:	4b97      	ldr	r3, [pc, #604]	; (8006a20 <_dtoa_r+0x2f8>)
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	9800      	ldr	r0, [sp, #0]
 80067ce:	b013      	add	sp, #76	; 0x4c
 80067d0:	ecbd 8b04 	vpop	{d8-d9}
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	4b90      	ldr	r3, [pc, #576]	; (8006a1c <_dtoa_r+0x2f4>)
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	3303      	adds	r3, #3
 80067de:	e7f3      	b.n	80067c8 <_dtoa_r+0xa0>
 80067e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	ec51 0b17 	vmov	r0, r1, d7
 80067ea:	eeb0 8a47 	vmov.f32	s16, s14
 80067ee:	eef0 8a67 	vmov.f32	s17, s15
 80067f2:	2300      	movs	r3, #0
 80067f4:	f7fa f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f8:	4681      	mov	r9, r0
 80067fa:	b160      	cbz	r0, 8006816 <_dtoa_r+0xee>
 80067fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067fe:	2301      	movs	r3, #1
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8568 	beq.w	80072da <_dtoa_r+0xbb2>
 800680a:	4b86      	ldr	r3, [pc, #536]	; (8006a24 <_dtoa_r+0x2fc>)
 800680c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	e7da      	b.n	80067cc <_dtoa_r+0xa4>
 8006816:	aa10      	add	r2, sp, #64	; 0x40
 8006818:	a911      	add	r1, sp, #68	; 0x44
 800681a:	4620      	mov	r0, r4
 800681c:	eeb0 0a48 	vmov.f32	s0, s16
 8006820:	eef0 0a68 	vmov.f32	s1, s17
 8006824:	f001 fa4e 	bl	8007cc4 <__d2b>
 8006828:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800682c:	4682      	mov	sl, r0
 800682e:	2d00      	cmp	r5, #0
 8006830:	d07f      	beq.n	8006932 <_dtoa_r+0x20a>
 8006832:	ee18 3a90 	vmov	r3, s17
 8006836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800683a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800683e:	ec51 0b18 	vmov	r0, r1, d8
 8006842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800684a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800684e:	4619      	mov	r1, r3
 8006850:	2200      	movs	r2, #0
 8006852:	4b75      	ldr	r3, [pc, #468]	; (8006a28 <_dtoa_r+0x300>)
 8006854:	f7f9 fd20 	bl	8000298 <__aeabi_dsub>
 8006858:	a367      	add	r3, pc, #412	; (adr r3, 80069f8 <_dtoa_r+0x2d0>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fed3 	bl	8000608 <__aeabi_dmul>
 8006862:	a367      	add	r3, pc, #412	; (adr r3, 8006a00 <_dtoa_r+0x2d8>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fd18 	bl	800029c <__adddf3>
 800686c:	4606      	mov	r6, r0
 800686e:	4628      	mov	r0, r5
 8006870:	460f      	mov	r7, r1
 8006872:	f7f9 fe5f 	bl	8000534 <__aeabi_i2d>
 8006876:	a364      	add	r3, pc, #400	; (adr r3, 8006a08 <_dtoa_r+0x2e0>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fec4 	bl	8000608 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7f9 fd08 	bl	800029c <__adddf3>
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	f7fa f96a 	bl	8000b68 <__aeabi_d2iz>
 8006894:	2200      	movs	r2, #0
 8006896:	4683      	mov	fp, r0
 8006898:	2300      	movs	r3, #0
 800689a:	4630      	mov	r0, r6
 800689c:	4639      	mov	r1, r7
 800689e:	f7fa f925 	bl	8000aec <__aeabi_dcmplt>
 80068a2:	b148      	cbz	r0, 80068b8 <_dtoa_r+0x190>
 80068a4:	4658      	mov	r0, fp
 80068a6:	f7f9 fe45 	bl	8000534 <__aeabi_i2d>
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	f7fa f913 	bl	8000ad8 <__aeabi_dcmpeq>
 80068b2:	b908      	cbnz	r0, 80068b8 <_dtoa_r+0x190>
 80068b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068b8:	f1bb 0f16 	cmp.w	fp, #22
 80068bc:	d857      	bhi.n	800696e <_dtoa_r+0x246>
 80068be:	4b5b      	ldr	r3, [pc, #364]	; (8006a2c <_dtoa_r+0x304>)
 80068c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	ec51 0b18 	vmov	r0, r1, d8
 80068cc:	f7fa f90e 	bl	8000aec <__aeabi_dcmplt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d04e      	beq.n	8006972 <_dtoa_r+0x24a>
 80068d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068d8:	2300      	movs	r3, #0
 80068da:	930c      	str	r3, [sp, #48]	; 0x30
 80068dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068de:	1b5b      	subs	r3, r3, r5
 80068e0:	1e5a      	subs	r2, r3, #1
 80068e2:	bf45      	ittet	mi
 80068e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80068e8:	9305      	strmi	r3, [sp, #20]
 80068ea:	2300      	movpl	r3, #0
 80068ec:	2300      	movmi	r3, #0
 80068ee:	9206      	str	r2, [sp, #24]
 80068f0:	bf54      	ite	pl
 80068f2:	9305      	strpl	r3, [sp, #20]
 80068f4:	9306      	strmi	r3, [sp, #24]
 80068f6:	f1bb 0f00 	cmp.w	fp, #0
 80068fa:	db3c      	blt.n	8006976 <_dtoa_r+0x24e>
 80068fc:	9b06      	ldr	r3, [sp, #24]
 80068fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006902:	445b      	add	r3, fp
 8006904:	9306      	str	r3, [sp, #24]
 8006906:	2300      	movs	r3, #0
 8006908:	9308      	str	r3, [sp, #32]
 800690a:	9b07      	ldr	r3, [sp, #28]
 800690c:	2b09      	cmp	r3, #9
 800690e:	d868      	bhi.n	80069e2 <_dtoa_r+0x2ba>
 8006910:	2b05      	cmp	r3, #5
 8006912:	bfc4      	itt	gt
 8006914:	3b04      	subgt	r3, #4
 8006916:	9307      	strgt	r3, [sp, #28]
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	f1a3 0302 	sub.w	r3, r3, #2
 800691e:	bfcc      	ite	gt
 8006920:	2500      	movgt	r5, #0
 8006922:	2501      	movle	r5, #1
 8006924:	2b03      	cmp	r3, #3
 8006926:	f200 8085 	bhi.w	8006a34 <_dtoa_r+0x30c>
 800692a:	e8df f003 	tbb	[pc, r3]
 800692e:	3b2e      	.short	0x3b2e
 8006930:	5839      	.short	0x5839
 8006932:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006936:	441d      	add	r5, r3
 8006938:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800693c:	2b20      	cmp	r3, #32
 800693e:	bfc1      	itttt	gt
 8006940:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006944:	fa08 f803 	lslgt.w	r8, r8, r3
 8006948:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800694c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006950:	bfd6      	itet	le
 8006952:	f1c3 0320 	rsble	r3, r3, #32
 8006956:	ea48 0003 	orrgt.w	r0, r8, r3
 800695a:	fa06 f003 	lslle.w	r0, r6, r3
 800695e:	f7f9 fdd9 	bl	8000514 <__aeabi_ui2d>
 8006962:	2201      	movs	r2, #1
 8006964:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006968:	3d01      	subs	r5, #1
 800696a:	920e      	str	r2, [sp, #56]	; 0x38
 800696c:	e76f      	b.n	800684e <_dtoa_r+0x126>
 800696e:	2301      	movs	r3, #1
 8006970:	e7b3      	b.n	80068da <_dtoa_r+0x1b2>
 8006972:	900c      	str	r0, [sp, #48]	; 0x30
 8006974:	e7b2      	b.n	80068dc <_dtoa_r+0x1b4>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	eba3 030b 	sub.w	r3, r3, fp
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	f1cb 0300 	rsb	r3, fp, #0
 8006982:	9308      	str	r3, [sp, #32]
 8006984:	2300      	movs	r3, #0
 8006986:	930b      	str	r3, [sp, #44]	; 0x2c
 8006988:	e7bf      	b.n	800690a <_dtoa_r+0x1e2>
 800698a:	2300      	movs	r3, #0
 800698c:	9309      	str	r3, [sp, #36]	; 0x24
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc52      	bgt.n	8006a3a <_dtoa_r+0x312>
 8006994:	2301      	movs	r3, #1
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	461a      	mov	r2, r3
 800699c:	920a      	str	r2, [sp, #40]	; 0x28
 800699e:	e00b      	b.n	80069b8 <_dtoa_r+0x290>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e7f3      	b.n	800698c <_dtoa_r+0x264>
 80069a4:	2300      	movs	r3, #0
 80069a6:	9309      	str	r3, [sp, #36]	; 0x24
 80069a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069aa:	445b      	add	r3, fp
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	3301      	adds	r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	9304      	str	r3, [sp, #16]
 80069b4:	bfb8      	it	lt
 80069b6:	2301      	movlt	r3, #1
 80069b8:	69e0      	ldr	r0, [r4, #28]
 80069ba:	2100      	movs	r1, #0
 80069bc:	2204      	movs	r2, #4
 80069be:	f102 0614 	add.w	r6, r2, #20
 80069c2:	429e      	cmp	r6, r3
 80069c4:	d93d      	bls.n	8006a42 <_dtoa_r+0x31a>
 80069c6:	6041      	str	r1, [r0, #4]
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fd9f 	bl	800750c <_Balloc>
 80069ce:	9000      	str	r0, [sp, #0]
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d139      	bne.n	8006a48 <_dtoa_r+0x320>
 80069d4:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <_dtoa_r+0x308>)
 80069d6:	4602      	mov	r2, r0
 80069d8:	f240 11af 	movw	r1, #431	; 0x1af
 80069dc:	e6bd      	b.n	800675a <_dtoa_r+0x32>
 80069de:	2301      	movs	r3, #1
 80069e0:	e7e1      	b.n	80069a6 <_dtoa_r+0x27e>
 80069e2:	2501      	movs	r5, #1
 80069e4:	2300      	movs	r3, #0
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	9509      	str	r5, [sp, #36]	; 0x24
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	2200      	movs	r2, #0
 80069f4:	2312      	movs	r3, #18
 80069f6:	e7d1      	b.n	800699c <_dtoa_r+0x274>
 80069f8:	636f4361 	.word	0x636f4361
 80069fc:	3fd287a7 	.word	0x3fd287a7
 8006a00:	8b60c8b3 	.word	0x8b60c8b3
 8006a04:	3fc68a28 	.word	0x3fc68a28
 8006a08:	509f79fb 	.word	0x509f79fb
 8006a0c:	3fd34413 	.word	0x3fd34413
 8006a10:	08009ee2 	.word	0x08009ee2
 8006a14:	08009ef9 	.word	0x08009ef9
 8006a18:	7ff00000 	.word	0x7ff00000
 8006a1c:	08009ede 	.word	0x08009ede
 8006a20:	08009ed5 	.word	0x08009ed5
 8006a24:	08009ead 	.word	0x08009ead
 8006a28:	3ff80000 	.word	0x3ff80000
 8006a2c:	08009fe8 	.word	0x08009fe8
 8006a30:	08009f51 	.word	0x08009f51
 8006a34:	2301      	movs	r3, #1
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	e7d7      	b.n	80069ea <_dtoa_r+0x2c2>
 8006a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	e7ba      	b.n	80069b8 <_dtoa_r+0x290>
 8006a42:	3101      	adds	r1, #1
 8006a44:	0052      	lsls	r2, r2, #1
 8006a46:	e7ba      	b.n	80069be <_dtoa_r+0x296>
 8006a48:	69e3      	ldr	r3, [r4, #28]
 8006a4a:	9a00      	ldr	r2, [sp, #0]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	2b0e      	cmp	r3, #14
 8006a52:	f200 80a8 	bhi.w	8006ba6 <_dtoa_r+0x47e>
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	f000 80a5 	beq.w	8006ba6 <_dtoa_r+0x47e>
 8006a5c:	f1bb 0f00 	cmp.w	fp, #0
 8006a60:	dd38      	ble.n	8006ad4 <_dtoa_r+0x3ac>
 8006a62:	4bc0      	ldr	r3, [pc, #768]	; (8006d64 <_dtoa_r+0x63c>)
 8006a64:	f00b 020f 	and.w	r2, fp, #15
 8006a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a78:	d019      	beq.n	8006aae <_dtoa_r+0x386>
 8006a7a:	4bbb      	ldr	r3, [pc, #748]	; (8006d68 <_dtoa_r+0x640>)
 8006a7c:	ec51 0b18 	vmov	r0, r1, d8
 8006a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a84:	f7f9 feea 	bl	800085c <__aeabi_ddiv>
 8006a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8c:	f008 080f 	and.w	r8, r8, #15
 8006a90:	2503      	movs	r5, #3
 8006a92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d68 <_dtoa_r+0x640>
 8006a96:	f1b8 0f00 	cmp.w	r8, #0
 8006a9a:	d10a      	bne.n	8006ab2 <_dtoa_r+0x38a>
 8006a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	f7f9 feda 	bl	800085c <__aeabi_ddiv>
 8006aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aac:	e02b      	b.n	8006b06 <_dtoa_r+0x3de>
 8006aae:	2502      	movs	r5, #2
 8006ab0:	e7ef      	b.n	8006a92 <_dtoa_r+0x36a>
 8006ab2:	f018 0f01 	tst.w	r8, #1
 8006ab6:	d008      	beq.n	8006aca <_dtoa_r+0x3a2>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ac0:	f7f9 fda2 	bl	8000608 <__aeabi_dmul>
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460f      	mov	r7, r1
 8006aca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ace:	f109 0908 	add.w	r9, r9, #8
 8006ad2:	e7e0      	b.n	8006a96 <_dtoa_r+0x36e>
 8006ad4:	f000 809f 	beq.w	8006c16 <_dtoa_r+0x4ee>
 8006ad8:	f1cb 0600 	rsb	r6, fp, #0
 8006adc:	4ba1      	ldr	r3, [pc, #644]	; (8006d64 <_dtoa_r+0x63c>)
 8006ade:	4fa2      	ldr	r7, [pc, #648]	; (8006d68 <_dtoa_r+0x640>)
 8006ae0:	f006 020f 	and.w	r2, r6, #15
 8006ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	ec51 0b18 	vmov	r0, r1, d8
 8006af0:	f7f9 fd8a 	bl	8000608 <__aeabi_dmul>
 8006af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af8:	1136      	asrs	r6, r6, #4
 8006afa:	2300      	movs	r3, #0
 8006afc:	2502      	movs	r5, #2
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	d17e      	bne.n	8006c00 <_dtoa_r+0x4d8>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d0      	bne.n	8006aa8 <_dtoa_r+0x380>
 8006b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8084 	beq.w	8006c1a <_dtoa_r+0x4f2>
 8006b12:	4b96      	ldr	r3, [pc, #600]	; (8006d6c <_dtoa_r+0x644>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 ffe7 	bl	8000aec <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d07b      	beq.n	8006c1a <_dtoa_r+0x4f2>
 8006b22:	9b04      	ldr	r3, [sp, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d078      	beq.n	8006c1a <_dtoa_r+0x4f2>
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd39      	ble.n	8006ba2 <_dtoa_r+0x47a>
 8006b2e:	4b90      	ldr	r3, [pc, #576]	; (8006d70 <_dtoa_r+0x648>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b3e:	9e01      	ldr	r6, [sp, #4]
 8006b40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b44:	3501      	adds	r5, #1
 8006b46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7f9 fcf2 	bl	8000534 <__aeabi_i2d>
 8006b50:	4642      	mov	r2, r8
 8006b52:	464b      	mov	r3, r9
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	4b86      	ldr	r3, [pc, #536]	; (8006d74 <_dtoa_r+0x64c>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f7f9 fb9e 	bl	800029c <__adddf3>
 8006b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b68:	9303      	str	r3, [sp, #12]
 8006b6a:	2e00      	cmp	r6, #0
 8006b6c:	d158      	bne.n	8006c20 <_dtoa_r+0x4f8>
 8006b6e:	4b82      	ldr	r3, [pc, #520]	; (8006d78 <_dtoa_r+0x650>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	4640      	mov	r0, r8
 8006b74:	4649      	mov	r1, r9
 8006b76:	f7f9 fb8f 	bl	8000298 <__aeabi_dsub>
 8006b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4689      	mov	r9, r1
 8006b82:	f7f9 ffd1 	bl	8000b28 <__aeabi_dcmpgt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f040 8296 	bne.w	80070b8 <_dtoa_r+0x990>
 8006b8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b90:	4640      	mov	r0, r8
 8006b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b96:	4649      	mov	r1, r9
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 8289 	bne.w	80070b4 <_dtoa_r+0x98c>
 8006ba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f2c0 814e 	blt.w	8006e4a <_dtoa_r+0x722>
 8006bae:	f1bb 0f0e 	cmp.w	fp, #14
 8006bb2:	f300 814a 	bgt.w	8006e4a <_dtoa_r+0x722>
 8006bb6:	4b6b      	ldr	r3, [pc, #428]	; (8006d64 <_dtoa_r+0x63c>)
 8006bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f280 80dc 	bge.w	8006d80 <_dtoa_r+0x658>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f300 80d8 	bgt.w	8006d80 <_dtoa_r+0x658>
 8006bd0:	f040 826f 	bne.w	80070b2 <_dtoa_r+0x98a>
 8006bd4:	4b68      	ldr	r3, [pc, #416]	; (8006d78 <_dtoa_r+0x650>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 fd14 	bl	8000608 <__aeabi_dmul>
 8006be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006be4:	f7f9 ff96 	bl	8000b14 <__aeabi_dcmpge>
 8006be8:	9e04      	ldr	r6, [sp, #16]
 8006bea:	4637      	mov	r7, r6
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f040 8245 	bne.w	800707c <_dtoa_r+0x954>
 8006bf2:	9d00      	ldr	r5, [sp, #0]
 8006bf4:	2331      	movs	r3, #49	; 0x31
 8006bf6:	f805 3b01 	strb.w	r3, [r5], #1
 8006bfa:	f10b 0b01 	add.w	fp, fp, #1
 8006bfe:	e241      	b.n	8007084 <_dtoa_r+0x95c>
 8006c00:	07f2      	lsls	r2, r6, #31
 8006c02:	d505      	bpl.n	8006c10 <_dtoa_r+0x4e8>
 8006c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c08:	f7f9 fcfe 	bl	8000608 <__aeabi_dmul>
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	2301      	movs	r3, #1
 8006c10:	1076      	asrs	r6, r6, #1
 8006c12:	3708      	adds	r7, #8
 8006c14:	e773      	b.n	8006afe <_dtoa_r+0x3d6>
 8006c16:	2502      	movs	r5, #2
 8006c18:	e775      	b.n	8006b06 <_dtoa_r+0x3de>
 8006c1a:	9e04      	ldr	r6, [sp, #16]
 8006c1c:	465f      	mov	r7, fp
 8006c1e:	e792      	b.n	8006b46 <_dtoa_r+0x41e>
 8006c20:	9900      	ldr	r1, [sp, #0]
 8006c22:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <_dtoa_r+0x63c>)
 8006c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c28:	4431      	add	r1, r6
 8006c2a:	9102      	str	r1, [sp, #8]
 8006c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c2e:	eeb0 9a47 	vmov.f32	s18, s14
 8006c32:	eef0 9a67 	vmov.f32	s19, s15
 8006c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d044      	beq.n	8006ccc <_dtoa_r+0x5a4>
 8006c42:	494e      	ldr	r1, [pc, #312]	; (8006d7c <_dtoa_r+0x654>)
 8006c44:	2000      	movs	r0, #0
 8006c46:	f7f9 fe09 	bl	800085c <__aeabi_ddiv>
 8006c4a:	ec53 2b19 	vmov	r2, r3, d9
 8006c4e:	f7f9 fb23 	bl	8000298 <__aeabi_dsub>
 8006c52:	9d00      	ldr	r5, [sp, #0]
 8006c54:	ec41 0b19 	vmov	d9, r0, r1
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7f9 ff84 	bl	8000b68 <__aeabi_d2iz>
 8006c60:	4606      	mov	r6, r0
 8006c62:	f7f9 fc67 	bl	8000534 <__aeabi_i2d>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	f7f9 fb13 	bl	8000298 <__aeabi_dsub>
 8006c72:	3630      	adds	r6, #48	; 0x30
 8006c74:	f805 6b01 	strb.w	r6, [r5], #1
 8006c78:	ec53 2b19 	vmov	r2, r3, d9
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4689      	mov	r9, r1
 8006c80:	f7f9 ff34 	bl	8000aec <__aeabi_dcmplt>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d164      	bne.n	8006d52 <_dtoa_r+0x62a>
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	4937      	ldr	r1, [pc, #220]	; (8006d6c <_dtoa_r+0x644>)
 8006c8e:	2000      	movs	r0, #0
 8006c90:	f7f9 fb02 	bl	8000298 <__aeabi_dsub>
 8006c94:	ec53 2b19 	vmov	r2, r3, d9
 8006c98:	f7f9 ff28 	bl	8000aec <__aeabi_dcmplt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f040 80b6 	bne.w	8006e0e <_dtoa_r+0x6e6>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	429d      	cmp	r5, r3
 8006ca6:	f43f af7c 	beq.w	8006ba2 <_dtoa_r+0x47a>
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <_dtoa_r+0x648>)
 8006cac:	ec51 0b19 	vmov	r0, r1, d9
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <_dtoa_r+0x648>)
 8006cb8:	ec41 0b19 	vmov	d9, r0, r1
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 fca1 	bl	8000608 <__aeabi_dmul>
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	4689      	mov	r9, r1
 8006cca:	e7c5      	b.n	8006c58 <_dtoa_r+0x530>
 8006ccc:	ec51 0b17 	vmov	r0, r1, d7
 8006cd0:	f7f9 fc9a 	bl	8000608 <__aeabi_dmul>
 8006cd4:	9b02      	ldr	r3, [sp, #8]
 8006cd6:	9d00      	ldr	r5, [sp, #0]
 8006cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cda:	ec41 0b19 	vmov	d9, r0, r1
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	f7f9 ff41 	bl	8000b68 <__aeabi_d2iz>
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	f7f9 fc24 	bl	8000534 <__aeabi_i2d>
 8006cec:	3630      	adds	r6, #48	; 0x30
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	f7f9 facf 	bl	8000298 <__aeabi_dsub>
 8006cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8006cfe:	9b02      	ldr	r3, [sp, #8]
 8006d00:	429d      	cmp	r5, r3
 8006d02:	4680      	mov	r8, r0
 8006d04:	4689      	mov	r9, r1
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	d124      	bne.n	8006d56 <_dtoa_r+0x62e>
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <_dtoa_r+0x654>)
 8006d0e:	ec51 0b19 	vmov	r0, r1, d9
 8006d12:	f7f9 fac3 	bl	800029c <__adddf3>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 ff03 	bl	8000b28 <__aeabi_dcmpgt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d173      	bne.n	8006e0e <_dtoa_r+0x6e6>
 8006d26:	ec53 2b19 	vmov	r2, r3, d9
 8006d2a:	4914      	ldr	r1, [pc, #80]	; (8006d7c <_dtoa_r+0x654>)
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f7f9 fab3 	bl	8000298 <__aeabi_dsub>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 fed7 	bl	8000aec <__aeabi_dcmplt>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f af2f 	beq.w	8006ba2 <_dtoa_r+0x47a>
 8006d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d46:	1e6b      	subs	r3, r5, #1
 8006d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d4e:	2b30      	cmp	r3, #48	; 0x30
 8006d50:	d0f8      	beq.n	8006d44 <_dtoa_r+0x61c>
 8006d52:	46bb      	mov	fp, r7
 8006d54:	e04a      	b.n	8006dec <_dtoa_r+0x6c4>
 8006d56:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <_dtoa_r+0x648>)
 8006d58:	f7f9 fc56 	bl	8000608 <__aeabi_dmul>
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	4689      	mov	r9, r1
 8006d60:	e7bd      	b.n	8006cde <_dtoa_r+0x5b6>
 8006d62:	bf00      	nop
 8006d64:	08009fe8 	.word	0x08009fe8
 8006d68:	08009fc0 	.word	0x08009fc0
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	40240000 	.word	0x40240000
 8006d74:	401c0000 	.word	0x401c0000
 8006d78:	40140000 	.word	0x40140000
 8006d7c:	3fe00000 	.word	0x3fe00000
 8006d80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d84:	9d00      	ldr	r5, [sp, #0]
 8006d86:	4642      	mov	r2, r8
 8006d88:	464b      	mov	r3, r9
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fd65 	bl	800085c <__aeabi_ddiv>
 8006d92:	f7f9 fee9 	bl	8000b68 <__aeabi_d2iz>
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	f7f9 fbcc 	bl	8000534 <__aeabi_i2d>
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	f7f9 fc32 	bl	8000608 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	f7f9 fa74 	bl	8000298 <__aeabi_dsub>
 8006db0:	9e01      	ldr	r6, [sp, #4]
 8006db2:	9f04      	ldr	r7, [sp, #16]
 8006db4:	3630      	adds	r6, #48	; 0x30
 8006db6:	f805 6b01 	strb.w	r6, [r5], #1
 8006dba:	9e00      	ldr	r6, [sp, #0]
 8006dbc:	1bae      	subs	r6, r5, r6
 8006dbe:	42b7      	cmp	r7, r6
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	d134      	bne.n	8006e30 <_dtoa_r+0x708>
 8006dc6:	f7f9 fa69 	bl	800029c <__adddf3>
 8006dca:	4642      	mov	r2, r8
 8006dcc:	464b      	mov	r3, r9
 8006dce:	4606      	mov	r6, r0
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	f7f9 fea9 	bl	8000b28 <__aeabi_dcmpgt>
 8006dd6:	b9c8      	cbnz	r0, 8006e0c <_dtoa_r+0x6e4>
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006de4:	b110      	cbz	r0, 8006dec <_dtoa_r+0x6c4>
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	07db      	lsls	r3, r3, #31
 8006dea:	d40f      	bmi.n	8006e0c <_dtoa_r+0x6e4>
 8006dec:	4651      	mov	r1, sl
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fbcc 	bl	800758c <_Bfree>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006df8:	702b      	strb	r3, [r5, #0]
 8006dfa:	f10b 0301 	add.w	r3, fp, #1
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f43f ace2 	beq.w	80067cc <_dtoa_r+0xa4>
 8006e08:	601d      	str	r5, [r3, #0]
 8006e0a:	e4df      	b.n	80067cc <_dtoa_r+0xa4>
 8006e0c:	465f      	mov	r7, fp
 8006e0e:	462b      	mov	r3, r5
 8006e10:	461d      	mov	r5, r3
 8006e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e16:	2a39      	cmp	r2, #57	; 0x39
 8006e18:	d106      	bne.n	8006e28 <_dtoa_r+0x700>
 8006e1a:	9a00      	ldr	r2, [sp, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d1f7      	bne.n	8006e10 <_dtoa_r+0x6e8>
 8006e20:	9900      	ldr	r1, [sp, #0]
 8006e22:	2230      	movs	r2, #48	; 0x30
 8006e24:	3701      	adds	r7, #1
 8006e26:	700a      	strb	r2, [r1, #0]
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e790      	b.n	8006d52 <_dtoa_r+0x62a>
 8006e30:	4ba3      	ldr	r3, [pc, #652]	; (80070c0 <_dtoa_r+0x998>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	f7f9 fbe8 	bl	8000608 <__aeabi_dmul>
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	460f      	mov	r7, r1
 8006e40:	f7f9 fe4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d09e      	beq.n	8006d86 <_dtoa_r+0x65e>
 8006e48:	e7d0      	b.n	8006dec <_dtoa_r+0x6c4>
 8006e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	f000 80ca 	beq.w	8006fe6 <_dtoa_r+0x8be>
 8006e52:	9a07      	ldr	r2, [sp, #28]
 8006e54:	2a01      	cmp	r2, #1
 8006e56:	f300 80ad 	bgt.w	8006fb4 <_dtoa_r+0x88c>
 8006e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	f000 80a5 	beq.w	8006fac <_dtoa_r+0x884>
 8006e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e66:	9e08      	ldr	r6, [sp, #32]
 8006e68:	9d05      	ldr	r5, [sp, #20]
 8006e6a:	9a05      	ldr	r2, [sp, #20]
 8006e6c:	441a      	add	r2, r3
 8006e6e:	9205      	str	r2, [sp, #20]
 8006e70:	9a06      	ldr	r2, [sp, #24]
 8006e72:	2101      	movs	r1, #1
 8006e74:	441a      	add	r2, r3
 8006e76:	4620      	mov	r0, r4
 8006e78:	9206      	str	r2, [sp, #24]
 8006e7a:	f000 fc87 	bl	800778c <__i2b>
 8006e7e:	4607      	mov	r7, r0
 8006e80:	b165      	cbz	r5, 8006e9c <_dtoa_r+0x774>
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dd09      	ble.n	8006e9c <_dtoa_r+0x774>
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	bfa8      	it	ge
 8006e8e:	462b      	movge	r3, r5
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	9205      	str	r2, [sp, #20]
 8006e94:	9a06      	ldr	r2, [sp, #24]
 8006e96:	1aed      	subs	r5, r5, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	9306      	str	r3, [sp, #24]
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	b1f3      	cbz	r3, 8006ede <_dtoa_r+0x7b6>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80a3 	beq.w	8006fee <_dtoa_r+0x8c6>
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	dd10      	ble.n	8006ece <_dtoa_r+0x7a6>
 8006eac:	4639      	mov	r1, r7
 8006eae:	4632      	mov	r2, r6
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fd2b 	bl	800790c <__pow5mult>
 8006eb6:	4652      	mov	r2, sl
 8006eb8:	4601      	mov	r1, r0
 8006eba:	4607      	mov	r7, r0
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fc7b 	bl	80077b8 <__multiply>
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fb60 	bl	800758c <_Bfree>
 8006ecc:	46c2      	mov	sl, r8
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	1b9a      	subs	r2, r3, r6
 8006ed2:	d004      	beq.n	8006ede <_dtoa_r+0x7b6>
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 fd18 	bl	800790c <__pow5mult>
 8006edc:	4682      	mov	sl, r0
 8006ede:	2101      	movs	r1, #1
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fc53 	bl	800778c <__i2b>
 8006ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	4606      	mov	r6, r0
 8006eec:	f340 8081 	ble.w	8006ff2 <_dtoa_r+0x8ca>
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fd09 	bl	800790c <__pow5mult>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	4606      	mov	r6, r0
 8006f00:	dd7a      	ble.n	8006ff8 <_dtoa_r+0x8d0>
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	6933      	ldr	r3, [r6, #16]
 8006f08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f0c:	6918      	ldr	r0, [r3, #16]
 8006f0e:	f000 fbef 	bl	80076f0 <__hi0bits>
 8006f12:	f1c0 0020 	rsb	r0, r0, #32
 8006f16:	9b06      	ldr	r3, [sp, #24]
 8006f18:	4418      	add	r0, r3
 8006f1a:	f010 001f 	ands.w	r0, r0, #31
 8006f1e:	f000 8094 	beq.w	800704a <_dtoa_r+0x922>
 8006f22:	f1c0 0320 	rsb	r3, r0, #32
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	f340 8085 	ble.w	8007036 <_dtoa_r+0x90e>
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	f1c0 001c 	rsb	r0, r0, #28
 8006f32:	4403      	add	r3, r0
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	9b06      	ldr	r3, [sp, #24]
 8006f38:	4403      	add	r3, r0
 8006f3a:	4405      	add	r5, r0
 8006f3c:	9306      	str	r3, [sp, #24]
 8006f3e:	9b05      	ldr	r3, [sp, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd05      	ble.n	8006f50 <_dtoa_r+0x828>
 8006f44:	4651      	mov	r1, sl
 8006f46:	461a      	mov	r2, r3
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fd39 	bl	80079c0 <__lshift>
 8006f4e:	4682      	mov	sl, r0
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dd05      	ble.n	8006f62 <_dtoa_r+0x83a>
 8006f56:	4631      	mov	r1, r6
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fd30 	bl	80079c0 <__lshift>
 8006f60:	4606      	mov	r6, r0
 8006f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d072      	beq.n	800704e <_dtoa_r+0x926>
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	f000 fd94 	bl	8007a98 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	da6c      	bge.n	800704e <_dtoa_r+0x926>
 8006f74:	2300      	movs	r3, #0
 8006f76:	4651      	mov	r1, sl
 8006f78:	220a      	movs	r2, #10
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fb28 	bl	80075d0 <__multadd>
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f86:	4682      	mov	sl, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 81b0 	beq.w	80072ee <_dtoa_r+0xbc6>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	4639      	mov	r1, r7
 8006f92:	220a      	movs	r2, #10
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fb1b 	bl	80075d0 <__multadd>
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	4607      	mov	r7, r0
 8006fa0:	f300 8096 	bgt.w	80070d0 <_dtoa_r+0x9a8>
 8006fa4:	9b07      	ldr	r3, [sp, #28]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	dc59      	bgt.n	800705e <_dtoa_r+0x936>
 8006faa:	e091      	b.n	80070d0 <_dtoa_r+0x9a8>
 8006fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fb2:	e758      	b.n	8006e66 <_dtoa_r+0x73e>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	1e5e      	subs	r6, r3, #1
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	42b3      	cmp	r3, r6
 8006fbc:	bfbf      	itttt	lt
 8006fbe:	9b08      	ldrlt	r3, [sp, #32]
 8006fc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006fc2:	9608      	strlt	r6, [sp, #32]
 8006fc4:	1af3      	sublt	r3, r6, r3
 8006fc6:	bfb4      	ite	lt
 8006fc8:	18d2      	addlt	r2, r2, r3
 8006fca:	1b9e      	subge	r6, r3, r6
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	bfbc      	itt	lt
 8006fd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006fd2:	2600      	movlt	r6, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfb7      	itett	lt
 8006fd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006fdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006fe0:	1a9d      	sublt	r5, r3, r2
 8006fe2:	2300      	movlt	r3, #0
 8006fe4:	e741      	b.n	8006e6a <_dtoa_r+0x742>
 8006fe6:	9e08      	ldr	r6, [sp, #32]
 8006fe8:	9d05      	ldr	r5, [sp, #20]
 8006fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fec:	e748      	b.n	8006e80 <_dtoa_r+0x758>
 8006fee:	9a08      	ldr	r2, [sp, #32]
 8006ff0:	e770      	b.n	8006ed4 <_dtoa_r+0x7ac>
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	dc19      	bgt.n	800702c <_dtoa_r+0x904>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	b9bb      	cbnz	r3, 800702c <_dtoa_r+0x904>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007002:	b99b      	cbnz	r3, 800702c <_dtoa_r+0x904>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800700a:	0d1b      	lsrs	r3, r3, #20
 800700c:	051b      	lsls	r3, r3, #20
 800700e:	b183      	cbz	r3, 8007032 <_dtoa_r+0x90a>
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	3301      	adds	r3, #1
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	9b06      	ldr	r3, [sp, #24]
 8007018:	3301      	adds	r3, #1
 800701a:	9306      	str	r3, [sp, #24]
 800701c:	f04f 0801 	mov.w	r8, #1
 8007020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	f47f af6f 	bne.w	8006f06 <_dtoa_r+0x7de>
 8007028:	2001      	movs	r0, #1
 800702a:	e774      	b.n	8006f16 <_dtoa_r+0x7ee>
 800702c:	f04f 0800 	mov.w	r8, #0
 8007030:	e7f6      	b.n	8007020 <_dtoa_r+0x8f8>
 8007032:	4698      	mov	r8, r3
 8007034:	e7f4      	b.n	8007020 <_dtoa_r+0x8f8>
 8007036:	d082      	beq.n	8006f3e <_dtoa_r+0x816>
 8007038:	9a05      	ldr	r2, [sp, #20]
 800703a:	331c      	adds	r3, #28
 800703c:	441a      	add	r2, r3
 800703e:	9205      	str	r2, [sp, #20]
 8007040:	9a06      	ldr	r2, [sp, #24]
 8007042:	441a      	add	r2, r3
 8007044:	441d      	add	r5, r3
 8007046:	9206      	str	r2, [sp, #24]
 8007048:	e779      	b.n	8006f3e <_dtoa_r+0x816>
 800704a:	4603      	mov	r3, r0
 800704c:	e7f4      	b.n	8007038 <_dtoa_r+0x910>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dc37      	bgt.n	80070c4 <_dtoa_r+0x99c>
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	2b02      	cmp	r3, #2
 8007058:	dd34      	ble.n	80070c4 <_dtoa_r+0x99c>
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	b963      	cbnz	r3, 800707c <_dtoa_r+0x954>
 8007062:	4631      	mov	r1, r6
 8007064:	2205      	movs	r2, #5
 8007066:	4620      	mov	r0, r4
 8007068:	f000 fab2 	bl	80075d0 <__multadd>
 800706c:	4601      	mov	r1, r0
 800706e:	4606      	mov	r6, r0
 8007070:	4650      	mov	r0, sl
 8007072:	f000 fd11 	bl	8007a98 <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	f73f adbb 	bgt.w	8006bf2 <_dtoa_r+0x4ca>
 800707c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707e:	9d00      	ldr	r5, [sp, #0]
 8007080:	ea6f 0b03 	mvn.w	fp, r3
 8007084:	f04f 0800 	mov.w	r8, #0
 8007088:	4631      	mov	r1, r6
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fa7e 	bl	800758c <_Bfree>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f43f aeab 	beq.w	8006dec <_dtoa_r+0x6c4>
 8007096:	f1b8 0f00 	cmp.w	r8, #0
 800709a:	d005      	beq.n	80070a8 <_dtoa_r+0x980>
 800709c:	45b8      	cmp	r8, r7
 800709e:	d003      	beq.n	80070a8 <_dtoa_r+0x980>
 80070a0:	4641      	mov	r1, r8
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fa72 	bl	800758c <_Bfree>
 80070a8:	4639      	mov	r1, r7
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fa6e 	bl	800758c <_Bfree>
 80070b0:	e69c      	b.n	8006dec <_dtoa_r+0x6c4>
 80070b2:	2600      	movs	r6, #0
 80070b4:	4637      	mov	r7, r6
 80070b6:	e7e1      	b.n	800707c <_dtoa_r+0x954>
 80070b8:	46bb      	mov	fp, r7
 80070ba:	4637      	mov	r7, r6
 80070bc:	e599      	b.n	8006bf2 <_dtoa_r+0x4ca>
 80070be:	bf00      	nop
 80070c0:	40240000 	.word	0x40240000
 80070c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80c8 	beq.w	800725c <_dtoa_r+0xb34>
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	dd05      	ble.n	80070e0 <_dtoa_r+0x9b8>
 80070d4:	4639      	mov	r1, r7
 80070d6:	462a      	mov	r2, r5
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 fc71 	bl	80079c0 <__lshift>
 80070de:	4607      	mov	r7, r0
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	d05b      	beq.n	800719e <_dtoa_r+0xa76>
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fa0f 	bl	800750c <_Balloc>
 80070ee:	4605      	mov	r5, r0
 80070f0:	b928      	cbnz	r0, 80070fe <_dtoa_r+0x9d6>
 80070f2:	4b83      	ldr	r3, [pc, #524]	; (8007300 <_dtoa_r+0xbd8>)
 80070f4:	4602      	mov	r2, r0
 80070f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070fa:	f7ff bb2e 	b.w	800675a <_dtoa_r+0x32>
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	3202      	adds	r2, #2
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	f107 010c 	add.w	r1, r7, #12
 8007108:	300c      	adds	r0, #12
 800710a:	f7ff fa6f 	bl	80065ec <memcpy>
 800710e:	2201      	movs	r2, #1
 8007110:	4629      	mov	r1, r5
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fc54 	bl	80079c0 <__lshift>
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007122:	4413      	add	r3, r2
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	46b8      	mov	r8, r7
 800712e:	9306      	str	r3, [sp, #24]
 8007130:	4607      	mov	r7, r0
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4631      	mov	r1, r6
 8007136:	3b01      	subs	r3, #1
 8007138:	4650      	mov	r0, sl
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	f7ff fa6a 	bl	8006614 <quorem>
 8007140:	4641      	mov	r1, r8
 8007142:	9002      	str	r0, [sp, #8]
 8007144:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007148:	4650      	mov	r0, sl
 800714a:	f000 fca5 	bl	8007a98 <__mcmp>
 800714e:	463a      	mov	r2, r7
 8007150:	9005      	str	r0, [sp, #20]
 8007152:	4631      	mov	r1, r6
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fcbb 	bl	8007ad0 <__mdiff>
 800715a:	68c2      	ldr	r2, [r0, #12]
 800715c:	4605      	mov	r5, r0
 800715e:	bb02      	cbnz	r2, 80071a2 <_dtoa_r+0xa7a>
 8007160:	4601      	mov	r1, r0
 8007162:	4650      	mov	r0, sl
 8007164:	f000 fc98 	bl	8007a98 <__mcmp>
 8007168:	4602      	mov	r2, r0
 800716a:	4629      	mov	r1, r5
 800716c:	4620      	mov	r0, r4
 800716e:	9209      	str	r2, [sp, #36]	; 0x24
 8007170:	f000 fa0c 	bl	800758c <_Bfree>
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007178:	9d04      	ldr	r5, [sp, #16]
 800717a:	ea43 0102 	orr.w	r1, r3, r2
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	4319      	orrs	r1, r3
 8007182:	d110      	bne.n	80071a6 <_dtoa_r+0xa7e>
 8007184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007188:	d029      	beq.n	80071de <_dtoa_r+0xab6>
 800718a:	9b05      	ldr	r3, [sp, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd02      	ble.n	8007196 <_dtoa_r+0xa6e>
 8007190:	9b02      	ldr	r3, [sp, #8]
 8007192:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	f883 9000 	strb.w	r9, [r3]
 800719c:	e774      	b.n	8007088 <_dtoa_r+0x960>
 800719e:	4638      	mov	r0, r7
 80071a0:	e7ba      	b.n	8007118 <_dtoa_r+0x9f0>
 80071a2:	2201      	movs	r2, #1
 80071a4:	e7e1      	b.n	800716a <_dtoa_r+0xa42>
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db04      	blt.n	80071b6 <_dtoa_r+0xa8e>
 80071ac:	9907      	ldr	r1, [sp, #28]
 80071ae:	430b      	orrs	r3, r1
 80071b0:	9906      	ldr	r1, [sp, #24]
 80071b2:	430b      	orrs	r3, r1
 80071b4:	d120      	bne.n	80071f8 <_dtoa_r+0xad0>
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	dded      	ble.n	8007196 <_dtoa_r+0xa6e>
 80071ba:	4651      	mov	r1, sl
 80071bc:	2201      	movs	r2, #1
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fbfe 	bl	80079c0 <__lshift>
 80071c4:	4631      	mov	r1, r6
 80071c6:	4682      	mov	sl, r0
 80071c8:	f000 fc66 	bl	8007a98 <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	dc03      	bgt.n	80071d8 <_dtoa_r+0xab0>
 80071d0:	d1e1      	bne.n	8007196 <_dtoa_r+0xa6e>
 80071d2:	f019 0f01 	tst.w	r9, #1
 80071d6:	d0de      	beq.n	8007196 <_dtoa_r+0xa6e>
 80071d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071dc:	d1d8      	bne.n	8007190 <_dtoa_r+0xa68>
 80071de:	9a01      	ldr	r2, [sp, #4]
 80071e0:	2339      	movs	r3, #57	; 0x39
 80071e2:	7013      	strb	r3, [r2, #0]
 80071e4:	462b      	mov	r3, r5
 80071e6:	461d      	mov	r5, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071ee:	2a39      	cmp	r2, #57	; 0x39
 80071f0:	d06c      	beq.n	80072cc <_dtoa_r+0xba4>
 80071f2:	3201      	adds	r2, #1
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e747      	b.n	8007088 <_dtoa_r+0x960>
 80071f8:	2a00      	cmp	r2, #0
 80071fa:	dd07      	ble.n	800720c <_dtoa_r+0xae4>
 80071fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007200:	d0ed      	beq.n	80071de <_dtoa_r+0xab6>
 8007202:	9a01      	ldr	r2, [sp, #4]
 8007204:	f109 0301 	add.w	r3, r9, #1
 8007208:	7013      	strb	r3, [r2, #0]
 800720a:	e73d      	b.n	8007088 <_dtoa_r+0x960>
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	9a08      	ldr	r2, [sp, #32]
 8007210:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007214:	4293      	cmp	r3, r2
 8007216:	d043      	beq.n	80072a0 <_dtoa_r+0xb78>
 8007218:	4651      	mov	r1, sl
 800721a:	2300      	movs	r3, #0
 800721c:	220a      	movs	r2, #10
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f9d6 	bl	80075d0 <__multadd>
 8007224:	45b8      	cmp	r8, r7
 8007226:	4682      	mov	sl, r0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	f04f 020a 	mov.w	r2, #10
 8007230:	4641      	mov	r1, r8
 8007232:	4620      	mov	r0, r4
 8007234:	d107      	bne.n	8007246 <_dtoa_r+0xb1e>
 8007236:	f000 f9cb 	bl	80075d0 <__multadd>
 800723a:	4680      	mov	r8, r0
 800723c:	4607      	mov	r7, r0
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	3301      	adds	r3, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	e775      	b.n	8007132 <_dtoa_r+0xa0a>
 8007246:	f000 f9c3 	bl	80075d0 <__multadd>
 800724a:	4639      	mov	r1, r7
 800724c:	4680      	mov	r8, r0
 800724e:	2300      	movs	r3, #0
 8007250:	220a      	movs	r2, #10
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f9bc 	bl	80075d0 <__multadd>
 8007258:	4607      	mov	r7, r0
 800725a:	e7f0      	b.n	800723e <_dtoa_r+0xb16>
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	9d00      	ldr	r5, [sp, #0]
 8007262:	4631      	mov	r1, r6
 8007264:	4650      	mov	r0, sl
 8007266:	f7ff f9d5 	bl	8006614 <quorem>
 800726a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	f805 9b01 	strb.w	r9, [r5], #1
 8007274:	1aea      	subs	r2, r5, r3
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	4293      	cmp	r3, r2
 800727a:	dd07      	ble.n	800728c <_dtoa_r+0xb64>
 800727c:	4651      	mov	r1, sl
 800727e:	2300      	movs	r3, #0
 8007280:	220a      	movs	r2, #10
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f9a4 	bl	80075d0 <__multadd>
 8007288:	4682      	mov	sl, r0
 800728a:	e7ea      	b.n	8007262 <_dtoa_r+0xb3a>
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	bfc8      	it	gt
 8007292:	461d      	movgt	r5, r3
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	bfd8      	it	le
 8007298:	2501      	movle	r5, #1
 800729a:	441d      	add	r5, r3
 800729c:	f04f 0800 	mov.w	r8, #0
 80072a0:	4651      	mov	r1, sl
 80072a2:	2201      	movs	r2, #1
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fb8b 	bl	80079c0 <__lshift>
 80072aa:	4631      	mov	r1, r6
 80072ac:	4682      	mov	sl, r0
 80072ae:	f000 fbf3 	bl	8007a98 <__mcmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	dc96      	bgt.n	80071e4 <_dtoa_r+0xabc>
 80072b6:	d102      	bne.n	80072be <_dtoa_r+0xb96>
 80072b8:	f019 0f01 	tst.w	r9, #1
 80072bc:	d192      	bne.n	80071e4 <_dtoa_r+0xabc>
 80072be:	462b      	mov	r3, r5
 80072c0:	461d      	mov	r5, r3
 80072c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072c6:	2a30      	cmp	r2, #48	; 0x30
 80072c8:	d0fa      	beq.n	80072c0 <_dtoa_r+0xb98>
 80072ca:	e6dd      	b.n	8007088 <_dtoa_r+0x960>
 80072cc:	9a00      	ldr	r2, [sp, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d189      	bne.n	80071e6 <_dtoa_r+0xabe>
 80072d2:	f10b 0b01 	add.w	fp, fp, #1
 80072d6:	2331      	movs	r3, #49	; 0x31
 80072d8:	e796      	b.n	8007208 <_dtoa_r+0xae0>
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <_dtoa_r+0xbdc>)
 80072dc:	f7ff ba99 	b.w	8006812 <_dtoa_r+0xea>
 80072e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f47f aa6d 	bne.w	80067c2 <_dtoa_r+0x9a>
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <_dtoa_r+0xbe0>)
 80072ea:	f7ff ba92 	b.w	8006812 <_dtoa_r+0xea>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dcb5      	bgt.n	8007260 <_dtoa_r+0xb38>
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	f73f aeb1 	bgt.w	800705e <_dtoa_r+0x936>
 80072fc:	e7b0      	b.n	8007260 <_dtoa_r+0xb38>
 80072fe:	bf00      	nop
 8007300:	08009f51 	.word	0x08009f51
 8007304:	08009eac 	.word	0x08009eac
 8007308:	08009ed5 	.word	0x08009ed5

0800730c <_free_r>:
 800730c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800730e:	2900      	cmp	r1, #0
 8007310:	d044      	beq.n	800739c <_free_r+0x90>
 8007312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007316:	9001      	str	r0, [sp, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f1a1 0404 	sub.w	r4, r1, #4
 800731e:	bfb8      	it	lt
 8007320:	18e4      	addlt	r4, r4, r3
 8007322:	f000 f8e7 	bl	80074f4 <__malloc_lock>
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <_free_r+0x94>)
 8007328:	9801      	ldr	r0, [sp, #4]
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	b933      	cbnz	r3, 800733c <_free_r+0x30>
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6014      	str	r4, [r2, #0]
 8007332:	b003      	add	sp, #12
 8007334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007338:	f000 b8e2 	b.w	8007500 <__malloc_unlock>
 800733c:	42a3      	cmp	r3, r4
 800733e:	d908      	bls.n	8007352 <_free_r+0x46>
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1961      	adds	r1, r4, r5
 8007344:	428b      	cmp	r3, r1
 8007346:	bf01      	itttt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	1949      	addeq	r1, r1, r5
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	e7ed      	b.n	800732e <_free_r+0x22>
 8007352:	461a      	mov	r2, r3
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b10b      	cbz	r3, 800735c <_free_r+0x50>
 8007358:	42a3      	cmp	r3, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x46>
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	1855      	adds	r5, r2, r1
 8007360:	42a5      	cmp	r5, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x70>
 8007364:	6824      	ldr	r4, [r4, #0]
 8007366:	4421      	add	r1, r4
 8007368:	1854      	adds	r4, r2, r1
 800736a:	42a3      	cmp	r3, r4
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	d1e0      	bne.n	8007332 <_free_r+0x26>
 8007370:	681c      	ldr	r4, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	6053      	str	r3, [r2, #4]
 8007376:	440c      	add	r4, r1
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	e7da      	b.n	8007332 <_free_r+0x26>
 800737c:	d902      	bls.n	8007384 <_free_r+0x78>
 800737e:	230c      	movs	r3, #12
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	e7d6      	b.n	8007332 <_free_r+0x26>
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	1961      	adds	r1, r4, r5
 8007388:	428b      	cmp	r3, r1
 800738a:	bf04      	itt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	6063      	str	r3, [r4, #4]
 8007392:	bf04      	itt	eq
 8007394:	1949      	addeq	r1, r1, r5
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	6054      	str	r4, [r2, #4]
 800739a:	e7ca      	b.n	8007332 <_free_r+0x26>
 800739c:	b003      	add	sp, #12
 800739e:	bd30      	pop	{r4, r5, pc}
 80073a0:	200050a8 	.word	0x200050a8

080073a4 <malloc>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <malloc+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f000 b823 	b.w	80073f4 <_malloc_r>
 80073ae:	bf00      	nop
 80073b0:	20000068 	.word	0x20000068

080073b4 <sbrk_aligned>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4e0e      	ldr	r6, [pc, #56]	; (80073f0 <sbrk_aligned+0x3c>)
 80073b8:	460c      	mov	r4, r1
 80073ba:	6831      	ldr	r1, [r6, #0]
 80073bc:	4605      	mov	r5, r0
 80073be:	b911      	cbnz	r1, 80073c6 <sbrk_aligned+0x12>
 80073c0:	f001 fe1a 	bl	8008ff8 <_sbrk_r>
 80073c4:	6030      	str	r0, [r6, #0]
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f001 fe15 	bl	8008ff8 <_sbrk_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d00a      	beq.n	80073e8 <sbrk_aligned+0x34>
 80073d2:	1cc4      	adds	r4, r0, #3
 80073d4:	f024 0403 	bic.w	r4, r4, #3
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d007      	beq.n	80073ec <sbrk_aligned+0x38>
 80073dc:	1a21      	subs	r1, r4, r0
 80073de:	4628      	mov	r0, r5
 80073e0:	f001 fe0a 	bl	8008ff8 <_sbrk_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d101      	bne.n	80073ec <sbrk_aligned+0x38>
 80073e8:	f04f 34ff 	mov.w	r4, #4294967295
 80073ec:	4620      	mov	r0, r4
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	200050ac 	.word	0x200050ac

080073f4 <_malloc_r>:
 80073f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	1ccd      	adds	r5, r1, #3
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	3508      	adds	r5, #8
 8007400:	2d0c      	cmp	r5, #12
 8007402:	bf38      	it	cc
 8007404:	250c      	movcc	r5, #12
 8007406:	2d00      	cmp	r5, #0
 8007408:	4607      	mov	r7, r0
 800740a:	db01      	blt.n	8007410 <_malloc_r+0x1c>
 800740c:	42a9      	cmp	r1, r5
 800740e:	d905      	bls.n	800741c <_malloc_r+0x28>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	2600      	movs	r6, #0
 8007416:	4630      	mov	r0, r6
 8007418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074f0 <_malloc_r+0xfc>
 8007420:	f000 f868 	bl	80074f4 <__malloc_lock>
 8007424:	f8d8 3000 	ldr.w	r3, [r8]
 8007428:	461c      	mov	r4, r3
 800742a:	bb5c      	cbnz	r4, 8007484 <_malloc_r+0x90>
 800742c:	4629      	mov	r1, r5
 800742e:	4638      	mov	r0, r7
 8007430:	f7ff ffc0 	bl	80073b4 <sbrk_aligned>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	4604      	mov	r4, r0
 8007438:	d155      	bne.n	80074e6 <_malloc_r+0xf2>
 800743a:	f8d8 4000 	ldr.w	r4, [r8]
 800743e:	4626      	mov	r6, r4
 8007440:	2e00      	cmp	r6, #0
 8007442:	d145      	bne.n	80074d0 <_malloc_r+0xdc>
 8007444:	2c00      	cmp	r4, #0
 8007446:	d048      	beq.n	80074da <_malloc_r+0xe6>
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	4631      	mov	r1, r6
 800744c:	4638      	mov	r0, r7
 800744e:	eb04 0903 	add.w	r9, r4, r3
 8007452:	f001 fdd1 	bl	8008ff8 <_sbrk_r>
 8007456:	4581      	cmp	r9, r0
 8007458:	d13f      	bne.n	80074da <_malloc_r+0xe6>
 800745a:	6821      	ldr	r1, [r4, #0]
 800745c:	1a6d      	subs	r5, r5, r1
 800745e:	4629      	mov	r1, r5
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ffa7 	bl	80073b4 <sbrk_aligned>
 8007466:	3001      	adds	r0, #1
 8007468:	d037      	beq.n	80074da <_malloc_r+0xe6>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	442b      	add	r3, r5
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	f8d8 3000 	ldr.w	r3, [r8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d038      	beq.n	80074ea <_malloc_r+0xf6>
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	42a2      	cmp	r2, r4
 800747c:	d12b      	bne.n	80074d6 <_malloc_r+0xe2>
 800747e:	2200      	movs	r2, #0
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	e00f      	b.n	80074a4 <_malloc_r+0xb0>
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	1b52      	subs	r2, r2, r5
 8007488:	d41f      	bmi.n	80074ca <_malloc_r+0xd6>
 800748a:	2a0b      	cmp	r2, #11
 800748c:	d917      	bls.n	80074be <_malloc_r+0xca>
 800748e:	1961      	adds	r1, r4, r5
 8007490:	42a3      	cmp	r3, r4
 8007492:	6025      	str	r5, [r4, #0]
 8007494:	bf18      	it	ne
 8007496:	6059      	strne	r1, [r3, #4]
 8007498:	6863      	ldr	r3, [r4, #4]
 800749a:	bf08      	it	eq
 800749c:	f8c8 1000 	streq.w	r1, [r8]
 80074a0:	5162      	str	r2, [r4, r5]
 80074a2:	604b      	str	r3, [r1, #4]
 80074a4:	4638      	mov	r0, r7
 80074a6:	f104 060b 	add.w	r6, r4, #11
 80074aa:	f000 f829 	bl	8007500 <__malloc_unlock>
 80074ae:	f026 0607 	bic.w	r6, r6, #7
 80074b2:	1d23      	adds	r3, r4, #4
 80074b4:	1af2      	subs	r2, r6, r3
 80074b6:	d0ae      	beq.n	8007416 <_malloc_r+0x22>
 80074b8:	1b9b      	subs	r3, r3, r6
 80074ba:	50a3      	str	r3, [r4, r2]
 80074bc:	e7ab      	b.n	8007416 <_malloc_r+0x22>
 80074be:	42a3      	cmp	r3, r4
 80074c0:	6862      	ldr	r2, [r4, #4]
 80074c2:	d1dd      	bne.n	8007480 <_malloc_r+0x8c>
 80074c4:	f8c8 2000 	str.w	r2, [r8]
 80074c8:	e7ec      	b.n	80074a4 <_malloc_r+0xb0>
 80074ca:	4623      	mov	r3, r4
 80074cc:	6864      	ldr	r4, [r4, #4]
 80074ce:	e7ac      	b.n	800742a <_malloc_r+0x36>
 80074d0:	4634      	mov	r4, r6
 80074d2:	6876      	ldr	r6, [r6, #4]
 80074d4:	e7b4      	b.n	8007440 <_malloc_r+0x4c>
 80074d6:	4613      	mov	r3, r2
 80074d8:	e7cc      	b.n	8007474 <_malloc_r+0x80>
 80074da:	230c      	movs	r3, #12
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4638      	mov	r0, r7
 80074e0:	f000 f80e 	bl	8007500 <__malloc_unlock>
 80074e4:	e797      	b.n	8007416 <_malloc_r+0x22>
 80074e6:	6025      	str	r5, [r4, #0]
 80074e8:	e7dc      	b.n	80074a4 <_malloc_r+0xb0>
 80074ea:	605b      	str	r3, [r3, #4]
 80074ec:	deff      	udf	#255	; 0xff
 80074ee:	bf00      	nop
 80074f0:	200050a8 	.word	0x200050a8

080074f4 <__malloc_lock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__malloc_lock+0x8>)
 80074f6:	f7ff b877 	b.w	80065e8 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	200050a4 	.word	0x200050a4

08007500 <__malloc_unlock>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__malloc_unlock+0x8>)
 8007502:	f7ff b872 	b.w	80065ea <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	200050a4 	.word	0x200050a4

0800750c <_Balloc>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	69c6      	ldr	r6, [r0, #28]
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	b976      	cbnz	r6, 8007534 <_Balloc+0x28>
 8007516:	2010      	movs	r0, #16
 8007518:	f7ff ff44 	bl	80073a4 <malloc>
 800751c:	4602      	mov	r2, r0
 800751e:	61e0      	str	r0, [r4, #28]
 8007520:	b920      	cbnz	r0, 800752c <_Balloc+0x20>
 8007522:	4b18      	ldr	r3, [pc, #96]	; (8007584 <_Balloc+0x78>)
 8007524:	4818      	ldr	r0, [pc, #96]	; (8007588 <_Balloc+0x7c>)
 8007526:	216b      	movs	r1, #107	; 0x6b
 8007528:	f001 fd7e 	bl	8009028 <__assert_func>
 800752c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007530:	6006      	str	r6, [r0, #0]
 8007532:	60c6      	str	r6, [r0, #12]
 8007534:	69e6      	ldr	r6, [r4, #28]
 8007536:	68f3      	ldr	r3, [r6, #12]
 8007538:	b183      	cbz	r3, 800755c <_Balloc+0x50>
 800753a:	69e3      	ldr	r3, [r4, #28]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007542:	b9b8      	cbnz	r0, 8007574 <_Balloc+0x68>
 8007544:	2101      	movs	r1, #1
 8007546:	fa01 f605 	lsl.w	r6, r1, r5
 800754a:	1d72      	adds	r2, r6, #5
 800754c:	0092      	lsls	r2, r2, #2
 800754e:	4620      	mov	r0, r4
 8007550:	f001 fd88 	bl	8009064 <_calloc_r>
 8007554:	b160      	cbz	r0, 8007570 <_Balloc+0x64>
 8007556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800755a:	e00e      	b.n	800757a <_Balloc+0x6e>
 800755c:	2221      	movs	r2, #33	; 0x21
 800755e:	2104      	movs	r1, #4
 8007560:	4620      	mov	r0, r4
 8007562:	f001 fd7f 	bl	8009064 <_calloc_r>
 8007566:	69e3      	ldr	r3, [r4, #28]
 8007568:	60f0      	str	r0, [r6, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e4      	bne.n	800753a <_Balloc+0x2e>
 8007570:	2000      	movs	r0, #0
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	6802      	ldr	r2, [r0, #0]
 8007576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800757a:	2300      	movs	r3, #0
 800757c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007580:	e7f7      	b.n	8007572 <_Balloc+0x66>
 8007582:	bf00      	nop
 8007584:	08009ee2 	.word	0x08009ee2
 8007588:	08009f62 	.word	0x08009f62

0800758c <_Bfree>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	69c6      	ldr	r6, [r0, #28]
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b976      	cbnz	r6, 80075b4 <_Bfree+0x28>
 8007596:	2010      	movs	r0, #16
 8007598:	f7ff ff04 	bl	80073a4 <malloc>
 800759c:	4602      	mov	r2, r0
 800759e:	61e8      	str	r0, [r5, #28]
 80075a0:	b920      	cbnz	r0, 80075ac <_Bfree+0x20>
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <_Bfree+0x3c>)
 80075a4:	4809      	ldr	r0, [pc, #36]	; (80075cc <_Bfree+0x40>)
 80075a6:	218f      	movs	r1, #143	; 0x8f
 80075a8:	f001 fd3e 	bl	8009028 <__assert_func>
 80075ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b0:	6006      	str	r6, [r0, #0]
 80075b2:	60c6      	str	r6, [r0, #12]
 80075b4:	b13c      	cbz	r4, 80075c6 <_Bfree+0x3a>
 80075b6:	69eb      	ldr	r3, [r5, #28]
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c0:	6021      	str	r1, [r4, #0]
 80075c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	08009ee2 	.word	0x08009ee2
 80075cc:	08009f62 	.word	0x08009f62

080075d0 <__multadd>:
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	690d      	ldr	r5, [r1, #16]
 80075d6:	4607      	mov	r7, r0
 80075d8:	460c      	mov	r4, r1
 80075da:	461e      	mov	r6, r3
 80075dc:	f101 0c14 	add.w	ip, r1, #20
 80075e0:	2000      	movs	r0, #0
 80075e2:	f8dc 3000 	ldr.w	r3, [ip]
 80075e6:	b299      	uxth	r1, r3
 80075e8:	fb02 6101 	mla	r1, r2, r1, r6
 80075ec:	0c1e      	lsrs	r6, r3, #16
 80075ee:	0c0b      	lsrs	r3, r1, #16
 80075f0:	fb02 3306 	mla	r3, r2, r6, r3
 80075f4:	b289      	uxth	r1, r1
 80075f6:	3001      	adds	r0, #1
 80075f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075fc:	4285      	cmp	r5, r0
 80075fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007606:	dcec      	bgt.n	80075e2 <__multadd+0x12>
 8007608:	b30e      	cbz	r6, 800764e <__multadd+0x7e>
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	42ab      	cmp	r3, r5
 800760e:	dc19      	bgt.n	8007644 <__multadd+0x74>
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4638      	mov	r0, r7
 8007614:	3101      	adds	r1, #1
 8007616:	f7ff ff79 	bl	800750c <_Balloc>
 800761a:	4680      	mov	r8, r0
 800761c:	b928      	cbnz	r0, 800762a <__multadd+0x5a>
 800761e:	4602      	mov	r2, r0
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <__multadd+0x84>)
 8007622:	480d      	ldr	r0, [pc, #52]	; (8007658 <__multadd+0x88>)
 8007624:	21ba      	movs	r1, #186	; 0xba
 8007626:	f001 fcff 	bl	8009028 <__assert_func>
 800762a:	6922      	ldr	r2, [r4, #16]
 800762c:	3202      	adds	r2, #2
 800762e:	f104 010c 	add.w	r1, r4, #12
 8007632:	0092      	lsls	r2, r2, #2
 8007634:	300c      	adds	r0, #12
 8007636:	f7fe ffd9 	bl	80065ec <memcpy>
 800763a:	4621      	mov	r1, r4
 800763c:	4638      	mov	r0, r7
 800763e:	f7ff ffa5 	bl	800758c <_Bfree>
 8007642:	4644      	mov	r4, r8
 8007644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007648:	3501      	adds	r5, #1
 800764a:	615e      	str	r6, [r3, #20]
 800764c:	6125      	str	r5, [r4, #16]
 800764e:	4620      	mov	r0, r4
 8007650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007654:	08009f51 	.word	0x08009f51
 8007658:	08009f62 	.word	0x08009f62

0800765c <__s2b>:
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	460c      	mov	r4, r1
 8007662:	4615      	mov	r5, r2
 8007664:	461f      	mov	r7, r3
 8007666:	2209      	movs	r2, #9
 8007668:	3308      	adds	r3, #8
 800766a:	4606      	mov	r6, r0
 800766c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007670:	2100      	movs	r1, #0
 8007672:	2201      	movs	r2, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	db09      	blt.n	800768c <__s2b+0x30>
 8007678:	4630      	mov	r0, r6
 800767a:	f7ff ff47 	bl	800750c <_Balloc>
 800767e:	b940      	cbnz	r0, 8007692 <__s2b+0x36>
 8007680:	4602      	mov	r2, r0
 8007682:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <__s2b+0x8c>)
 8007684:	4819      	ldr	r0, [pc, #100]	; (80076ec <__s2b+0x90>)
 8007686:	21d3      	movs	r1, #211	; 0xd3
 8007688:	f001 fcce 	bl	8009028 <__assert_func>
 800768c:	0052      	lsls	r2, r2, #1
 800768e:	3101      	adds	r1, #1
 8007690:	e7f0      	b.n	8007674 <__s2b+0x18>
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	6143      	str	r3, [r0, #20]
 8007696:	2d09      	cmp	r5, #9
 8007698:	f04f 0301 	mov.w	r3, #1
 800769c:	6103      	str	r3, [r0, #16]
 800769e:	dd16      	ble.n	80076ce <__s2b+0x72>
 80076a0:	f104 0909 	add.w	r9, r4, #9
 80076a4:	46c8      	mov	r8, r9
 80076a6:	442c      	add	r4, r5
 80076a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076ac:	4601      	mov	r1, r0
 80076ae:	3b30      	subs	r3, #48	; 0x30
 80076b0:	220a      	movs	r2, #10
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ff8c 	bl	80075d0 <__multadd>
 80076b8:	45a0      	cmp	r8, r4
 80076ba:	d1f5      	bne.n	80076a8 <__s2b+0x4c>
 80076bc:	f1a5 0408 	sub.w	r4, r5, #8
 80076c0:	444c      	add	r4, r9
 80076c2:	1b2d      	subs	r5, r5, r4
 80076c4:	1963      	adds	r3, r4, r5
 80076c6:	42bb      	cmp	r3, r7
 80076c8:	db04      	blt.n	80076d4 <__s2b+0x78>
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ce:	340a      	adds	r4, #10
 80076d0:	2509      	movs	r5, #9
 80076d2:	e7f6      	b.n	80076c2 <__s2b+0x66>
 80076d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076d8:	4601      	mov	r1, r0
 80076da:	3b30      	subs	r3, #48	; 0x30
 80076dc:	220a      	movs	r2, #10
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ff76 	bl	80075d0 <__multadd>
 80076e4:	e7ee      	b.n	80076c4 <__s2b+0x68>
 80076e6:	bf00      	nop
 80076e8:	08009f51 	.word	0x08009f51
 80076ec:	08009f62 	.word	0x08009f62

080076f0 <__hi0bits>:
 80076f0:	0c03      	lsrs	r3, r0, #16
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	b9d3      	cbnz	r3, 800772c <__hi0bits+0x3c>
 80076f6:	0400      	lsls	r0, r0, #16
 80076f8:	2310      	movs	r3, #16
 80076fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076fe:	bf04      	itt	eq
 8007700:	0200      	lsleq	r0, r0, #8
 8007702:	3308      	addeq	r3, #8
 8007704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007708:	bf04      	itt	eq
 800770a:	0100      	lsleq	r0, r0, #4
 800770c:	3304      	addeq	r3, #4
 800770e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007712:	bf04      	itt	eq
 8007714:	0080      	lsleq	r0, r0, #2
 8007716:	3302      	addeq	r3, #2
 8007718:	2800      	cmp	r0, #0
 800771a:	db05      	blt.n	8007728 <__hi0bits+0x38>
 800771c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007720:	f103 0301 	add.w	r3, r3, #1
 8007724:	bf08      	it	eq
 8007726:	2320      	moveq	r3, #32
 8007728:	4618      	mov	r0, r3
 800772a:	4770      	bx	lr
 800772c:	2300      	movs	r3, #0
 800772e:	e7e4      	b.n	80076fa <__hi0bits+0xa>

08007730 <__lo0bits>:
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	f013 0207 	ands.w	r2, r3, #7
 8007736:	d00c      	beq.n	8007752 <__lo0bits+0x22>
 8007738:	07d9      	lsls	r1, r3, #31
 800773a:	d422      	bmi.n	8007782 <__lo0bits+0x52>
 800773c:	079a      	lsls	r2, r3, #30
 800773e:	bf49      	itett	mi
 8007740:	085b      	lsrmi	r3, r3, #1
 8007742:	089b      	lsrpl	r3, r3, #2
 8007744:	6003      	strmi	r3, [r0, #0]
 8007746:	2201      	movmi	r2, #1
 8007748:	bf5c      	itt	pl
 800774a:	6003      	strpl	r3, [r0, #0]
 800774c:	2202      	movpl	r2, #2
 800774e:	4610      	mov	r0, r2
 8007750:	4770      	bx	lr
 8007752:	b299      	uxth	r1, r3
 8007754:	b909      	cbnz	r1, 800775a <__lo0bits+0x2a>
 8007756:	0c1b      	lsrs	r3, r3, #16
 8007758:	2210      	movs	r2, #16
 800775a:	b2d9      	uxtb	r1, r3
 800775c:	b909      	cbnz	r1, 8007762 <__lo0bits+0x32>
 800775e:	3208      	adds	r2, #8
 8007760:	0a1b      	lsrs	r3, r3, #8
 8007762:	0719      	lsls	r1, r3, #28
 8007764:	bf04      	itt	eq
 8007766:	091b      	lsreq	r3, r3, #4
 8007768:	3204      	addeq	r2, #4
 800776a:	0799      	lsls	r1, r3, #30
 800776c:	bf04      	itt	eq
 800776e:	089b      	lsreq	r3, r3, #2
 8007770:	3202      	addeq	r2, #2
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d403      	bmi.n	800777e <__lo0bits+0x4e>
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	f102 0201 	add.w	r2, r2, #1
 800777c:	d003      	beq.n	8007786 <__lo0bits+0x56>
 800777e:	6003      	str	r3, [r0, #0]
 8007780:	e7e5      	b.n	800774e <__lo0bits+0x1e>
 8007782:	2200      	movs	r2, #0
 8007784:	e7e3      	b.n	800774e <__lo0bits+0x1e>
 8007786:	2220      	movs	r2, #32
 8007788:	e7e1      	b.n	800774e <__lo0bits+0x1e>
	...

0800778c <__i2b>:
 800778c:	b510      	push	{r4, lr}
 800778e:	460c      	mov	r4, r1
 8007790:	2101      	movs	r1, #1
 8007792:	f7ff febb 	bl	800750c <_Balloc>
 8007796:	4602      	mov	r2, r0
 8007798:	b928      	cbnz	r0, 80077a6 <__i2b+0x1a>
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <__i2b+0x24>)
 800779c:	4805      	ldr	r0, [pc, #20]	; (80077b4 <__i2b+0x28>)
 800779e:	f240 1145 	movw	r1, #325	; 0x145
 80077a2:	f001 fc41 	bl	8009028 <__assert_func>
 80077a6:	2301      	movs	r3, #1
 80077a8:	6144      	str	r4, [r0, #20]
 80077aa:	6103      	str	r3, [r0, #16]
 80077ac:	bd10      	pop	{r4, pc}
 80077ae:	bf00      	nop
 80077b0:	08009f51 	.word	0x08009f51
 80077b4:	08009f62 	.word	0x08009f62

080077b8 <__multiply>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	4691      	mov	r9, r2
 80077be:	690a      	ldr	r2, [r1, #16]
 80077c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	bfb8      	it	lt
 80077c8:	460b      	movlt	r3, r1
 80077ca:	460c      	mov	r4, r1
 80077cc:	bfbc      	itt	lt
 80077ce:	464c      	movlt	r4, r9
 80077d0:	4699      	movlt	r9, r3
 80077d2:	6927      	ldr	r7, [r4, #16]
 80077d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	6861      	ldr	r1, [r4, #4]
 80077dc:	eb07 060a 	add.w	r6, r7, sl
 80077e0:	42b3      	cmp	r3, r6
 80077e2:	b085      	sub	sp, #20
 80077e4:	bfb8      	it	lt
 80077e6:	3101      	addlt	r1, #1
 80077e8:	f7ff fe90 	bl	800750c <_Balloc>
 80077ec:	b930      	cbnz	r0, 80077fc <__multiply+0x44>
 80077ee:	4602      	mov	r2, r0
 80077f0:	4b44      	ldr	r3, [pc, #272]	; (8007904 <__multiply+0x14c>)
 80077f2:	4845      	ldr	r0, [pc, #276]	; (8007908 <__multiply+0x150>)
 80077f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077f8:	f001 fc16 	bl	8009028 <__assert_func>
 80077fc:	f100 0514 	add.w	r5, r0, #20
 8007800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007804:	462b      	mov	r3, r5
 8007806:	2200      	movs	r2, #0
 8007808:	4543      	cmp	r3, r8
 800780a:	d321      	bcc.n	8007850 <__multiply+0x98>
 800780c:	f104 0314 	add.w	r3, r4, #20
 8007810:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007814:	f109 0314 	add.w	r3, r9, #20
 8007818:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800781c:	9202      	str	r2, [sp, #8]
 800781e:	1b3a      	subs	r2, r7, r4
 8007820:	3a15      	subs	r2, #21
 8007822:	f022 0203 	bic.w	r2, r2, #3
 8007826:	3204      	adds	r2, #4
 8007828:	f104 0115 	add.w	r1, r4, #21
 800782c:	428f      	cmp	r7, r1
 800782e:	bf38      	it	cc
 8007830:	2204      	movcc	r2, #4
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	9a02      	ldr	r2, [sp, #8]
 8007836:	9303      	str	r3, [sp, #12]
 8007838:	429a      	cmp	r2, r3
 800783a:	d80c      	bhi.n	8007856 <__multiply+0x9e>
 800783c:	2e00      	cmp	r6, #0
 800783e:	dd03      	ble.n	8007848 <__multiply+0x90>
 8007840:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007844:	2b00      	cmp	r3, #0
 8007846:	d05b      	beq.n	8007900 <__multiply+0x148>
 8007848:	6106      	str	r6, [r0, #16]
 800784a:	b005      	add	sp, #20
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	f843 2b04 	str.w	r2, [r3], #4
 8007854:	e7d8      	b.n	8007808 <__multiply+0x50>
 8007856:	f8b3 a000 	ldrh.w	sl, [r3]
 800785a:	f1ba 0f00 	cmp.w	sl, #0
 800785e:	d024      	beq.n	80078aa <__multiply+0xf2>
 8007860:	f104 0e14 	add.w	lr, r4, #20
 8007864:	46a9      	mov	r9, r5
 8007866:	f04f 0c00 	mov.w	ip, #0
 800786a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800786e:	f8d9 1000 	ldr.w	r1, [r9]
 8007872:	fa1f fb82 	uxth.w	fp, r2
 8007876:	b289      	uxth	r1, r1
 8007878:	fb0a 110b 	mla	r1, sl, fp, r1
 800787c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007880:	f8d9 2000 	ldr.w	r2, [r9]
 8007884:	4461      	add	r1, ip
 8007886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800788a:	fb0a c20b 	mla	r2, sl, fp, ip
 800788e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007892:	b289      	uxth	r1, r1
 8007894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007898:	4577      	cmp	r7, lr
 800789a:	f849 1b04 	str.w	r1, [r9], #4
 800789e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078a2:	d8e2      	bhi.n	800786a <__multiply+0xb2>
 80078a4:	9a01      	ldr	r2, [sp, #4]
 80078a6:	f845 c002 	str.w	ip, [r5, r2]
 80078aa:	9a03      	ldr	r2, [sp, #12]
 80078ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078b0:	3304      	adds	r3, #4
 80078b2:	f1b9 0f00 	cmp.w	r9, #0
 80078b6:	d021      	beq.n	80078fc <__multiply+0x144>
 80078b8:	6829      	ldr	r1, [r5, #0]
 80078ba:	f104 0c14 	add.w	ip, r4, #20
 80078be:	46ae      	mov	lr, r5
 80078c0:	f04f 0a00 	mov.w	sl, #0
 80078c4:	f8bc b000 	ldrh.w	fp, [ip]
 80078c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078cc:	fb09 220b 	mla	r2, r9, fp, r2
 80078d0:	4452      	add	r2, sl
 80078d2:	b289      	uxth	r1, r1
 80078d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078d8:	f84e 1b04 	str.w	r1, [lr], #4
 80078dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078e4:	f8be 1000 	ldrh.w	r1, [lr]
 80078e8:	fb09 110a 	mla	r1, r9, sl, r1
 80078ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078f0:	4567      	cmp	r7, ip
 80078f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078f6:	d8e5      	bhi.n	80078c4 <__multiply+0x10c>
 80078f8:	9a01      	ldr	r2, [sp, #4]
 80078fa:	50a9      	str	r1, [r5, r2]
 80078fc:	3504      	adds	r5, #4
 80078fe:	e799      	b.n	8007834 <__multiply+0x7c>
 8007900:	3e01      	subs	r6, #1
 8007902:	e79b      	b.n	800783c <__multiply+0x84>
 8007904:	08009f51 	.word	0x08009f51
 8007908:	08009f62 	.word	0x08009f62

0800790c <__pow5mult>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	4615      	mov	r5, r2
 8007912:	f012 0203 	ands.w	r2, r2, #3
 8007916:	4606      	mov	r6, r0
 8007918:	460f      	mov	r7, r1
 800791a:	d007      	beq.n	800792c <__pow5mult+0x20>
 800791c:	4c25      	ldr	r4, [pc, #148]	; (80079b4 <__pow5mult+0xa8>)
 800791e:	3a01      	subs	r2, #1
 8007920:	2300      	movs	r3, #0
 8007922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007926:	f7ff fe53 	bl	80075d0 <__multadd>
 800792a:	4607      	mov	r7, r0
 800792c:	10ad      	asrs	r5, r5, #2
 800792e:	d03d      	beq.n	80079ac <__pow5mult+0xa0>
 8007930:	69f4      	ldr	r4, [r6, #28]
 8007932:	b97c      	cbnz	r4, 8007954 <__pow5mult+0x48>
 8007934:	2010      	movs	r0, #16
 8007936:	f7ff fd35 	bl	80073a4 <malloc>
 800793a:	4602      	mov	r2, r0
 800793c:	61f0      	str	r0, [r6, #28]
 800793e:	b928      	cbnz	r0, 800794c <__pow5mult+0x40>
 8007940:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <__pow5mult+0xac>)
 8007942:	481e      	ldr	r0, [pc, #120]	; (80079bc <__pow5mult+0xb0>)
 8007944:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007948:	f001 fb6e 	bl	8009028 <__assert_func>
 800794c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007950:	6004      	str	r4, [r0, #0]
 8007952:	60c4      	str	r4, [r0, #12]
 8007954:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800795c:	b94c      	cbnz	r4, 8007972 <__pow5mult+0x66>
 800795e:	f240 2171 	movw	r1, #625	; 0x271
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff12 	bl	800778c <__i2b>
 8007968:	2300      	movs	r3, #0
 800796a:	f8c8 0008 	str.w	r0, [r8, #8]
 800796e:	4604      	mov	r4, r0
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	f04f 0900 	mov.w	r9, #0
 8007976:	07eb      	lsls	r3, r5, #31
 8007978:	d50a      	bpl.n	8007990 <__pow5mult+0x84>
 800797a:	4639      	mov	r1, r7
 800797c:	4622      	mov	r2, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff1a 	bl	80077b8 <__multiply>
 8007984:	4639      	mov	r1, r7
 8007986:	4680      	mov	r8, r0
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff fdff 	bl	800758c <_Bfree>
 800798e:	4647      	mov	r7, r8
 8007990:	106d      	asrs	r5, r5, #1
 8007992:	d00b      	beq.n	80079ac <__pow5mult+0xa0>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	b938      	cbnz	r0, 80079a8 <__pow5mult+0x9c>
 8007998:	4622      	mov	r2, r4
 800799a:	4621      	mov	r1, r4
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff ff0b 	bl	80077b8 <__multiply>
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f8c0 9000 	str.w	r9, [r0]
 80079a8:	4604      	mov	r4, r0
 80079aa:	e7e4      	b.n	8007976 <__pow5mult+0x6a>
 80079ac:	4638      	mov	r0, r7
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	bf00      	nop
 80079b4:	0800a0b0 	.word	0x0800a0b0
 80079b8:	08009ee2 	.word	0x08009ee2
 80079bc:	08009f62 	.word	0x08009f62

080079c0 <__lshift>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	6849      	ldr	r1, [r1, #4]
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	4607      	mov	r7, r0
 80079d2:	4691      	mov	r9, r2
 80079d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079d8:	f108 0601 	add.w	r6, r8, #1
 80079dc:	42b3      	cmp	r3, r6
 80079de:	db0b      	blt.n	80079f8 <__lshift+0x38>
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7ff fd93 	bl	800750c <_Balloc>
 80079e6:	4605      	mov	r5, r0
 80079e8:	b948      	cbnz	r0, 80079fe <__lshift+0x3e>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b28      	ldr	r3, [pc, #160]	; (8007a90 <__lshift+0xd0>)
 80079ee:	4829      	ldr	r0, [pc, #164]	; (8007a94 <__lshift+0xd4>)
 80079f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079f4:	f001 fb18 	bl	8009028 <__assert_func>
 80079f8:	3101      	adds	r1, #1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	e7ee      	b.n	80079dc <__lshift+0x1c>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f100 0114 	add.w	r1, r0, #20
 8007a04:	f100 0210 	add.w	r2, r0, #16
 8007a08:	4618      	mov	r0, r3
 8007a0a:	4553      	cmp	r3, sl
 8007a0c:	db33      	blt.n	8007a76 <__lshift+0xb6>
 8007a0e:	6920      	ldr	r0, [r4, #16]
 8007a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a14:	f104 0314 	add.w	r3, r4, #20
 8007a18:	f019 091f 	ands.w	r9, r9, #31
 8007a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a24:	d02b      	beq.n	8007a7e <__lshift+0xbe>
 8007a26:	f1c9 0e20 	rsb	lr, r9, #32
 8007a2a:	468a      	mov	sl, r1
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	fa00 f009 	lsl.w	r0, r0, r9
 8007a34:	4310      	orrs	r0, r2
 8007a36:	f84a 0b04 	str.w	r0, [sl], #4
 8007a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3e:	459c      	cmp	ip, r3
 8007a40:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a44:	d8f3      	bhi.n	8007a2e <__lshift+0x6e>
 8007a46:	ebac 0304 	sub.w	r3, ip, r4
 8007a4a:	3b15      	subs	r3, #21
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	3304      	adds	r3, #4
 8007a52:	f104 0015 	add.w	r0, r4, #21
 8007a56:	4584      	cmp	ip, r0
 8007a58:	bf38      	it	cc
 8007a5a:	2304      	movcc	r3, #4
 8007a5c:	50ca      	str	r2, [r1, r3]
 8007a5e:	b10a      	cbz	r2, 8007a64 <__lshift+0xa4>
 8007a60:	f108 0602 	add.w	r6, r8, #2
 8007a64:	3e01      	subs	r6, #1
 8007a66:	4638      	mov	r0, r7
 8007a68:	612e      	str	r6, [r5, #16]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7ff fd8e 	bl	800758c <_Bfree>
 8007a70:	4628      	mov	r0, r5
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	e7c5      	b.n	8007a0a <__lshift+0x4a>
 8007a7e:	3904      	subs	r1, #4
 8007a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a84:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a88:	459c      	cmp	ip, r3
 8007a8a:	d8f9      	bhi.n	8007a80 <__lshift+0xc0>
 8007a8c:	e7ea      	b.n	8007a64 <__lshift+0xa4>
 8007a8e:	bf00      	nop
 8007a90:	08009f51 	.word	0x08009f51
 8007a94:	08009f62 	.word	0x08009f62

08007a98 <__mcmp>:
 8007a98:	b530      	push	{r4, r5, lr}
 8007a9a:	6902      	ldr	r2, [r0, #16]
 8007a9c:	690c      	ldr	r4, [r1, #16]
 8007a9e:	1b12      	subs	r2, r2, r4
 8007aa0:	d10e      	bne.n	8007ac0 <__mcmp+0x28>
 8007aa2:	f100 0314 	add.w	r3, r0, #20
 8007aa6:	3114      	adds	r1, #20
 8007aa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007aac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	d003      	beq.n	8007ac4 <__mcmp+0x2c>
 8007abc:	d305      	bcc.n	8007aca <__mcmp+0x32>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	bd30      	pop	{r4, r5, pc}
 8007ac4:	4283      	cmp	r3, r0
 8007ac6:	d3f3      	bcc.n	8007ab0 <__mcmp+0x18>
 8007ac8:	e7fa      	b.n	8007ac0 <__mcmp+0x28>
 8007aca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ace:	e7f7      	b.n	8007ac0 <__mcmp+0x28>

08007ad0 <__mdiff>:
 8007ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4620      	mov	r0, r4
 8007adc:	4690      	mov	r8, r2
 8007ade:	f7ff ffdb 	bl	8007a98 <__mcmp>
 8007ae2:	1e05      	subs	r5, r0, #0
 8007ae4:	d110      	bne.n	8007b08 <__mdiff+0x38>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff fd0f 	bl	800750c <_Balloc>
 8007aee:	b930      	cbnz	r0, 8007afe <__mdiff+0x2e>
 8007af0:	4b3a      	ldr	r3, [pc, #232]	; (8007bdc <__mdiff+0x10c>)
 8007af2:	4602      	mov	r2, r0
 8007af4:	f240 2137 	movw	r1, #567	; 0x237
 8007af8:	4839      	ldr	r0, [pc, #228]	; (8007be0 <__mdiff+0x110>)
 8007afa:	f001 fa95 	bl	8009028 <__assert_func>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	bfa4      	itt	ge
 8007b0a:	4643      	movge	r3, r8
 8007b0c:	46a0      	movge	r8, r4
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b14:	bfa6      	itte	ge
 8007b16:	461c      	movge	r4, r3
 8007b18:	2500      	movge	r5, #0
 8007b1a:	2501      	movlt	r5, #1
 8007b1c:	f7ff fcf6 	bl	800750c <_Balloc>
 8007b20:	b920      	cbnz	r0, 8007b2c <__mdiff+0x5c>
 8007b22:	4b2e      	ldr	r3, [pc, #184]	; (8007bdc <__mdiff+0x10c>)
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 2145 	movw	r1, #581	; 0x245
 8007b2a:	e7e5      	b.n	8007af8 <__mdiff+0x28>
 8007b2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b30:	6926      	ldr	r6, [r4, #16]
 8007b32:	60c5      	str	r5, [r0, #12]
 8007b34:	f104 0914 	add.w	r9, r4, #20
 8007b38:	f108 0514 	add.w	r5, r8, #20
 8007b3c:	f100 0e14 	add.w	lr, r0, #20
 8007b40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b48:	f108 0210 	add.w	r2, r8, #16
 8007b4c:	46f2      	mov	sl, lr
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b58:	fa11 f88b 	uxtah	r8, r1, fp
 8007b5c:	b299      	uxth	r1, r3
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	eba8 0801 	sub.w	r8, r8, r1
 8007b64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b6c:	fa1f f888 	uxth.w	r8, r8
 8007b70:	1419      	asrs	r1, r3, #16
 8007b72:	454e      	cmp	r6, r9
 8007b74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b78:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7c:	d8e8      	bhi.n	8007b50 <__mdiff+0x80>
 8007b7e:	1b33      	subs	r3, r6, r4
 8007b80:	3b15      	subs	r3, #21
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	3304      	adds	r3, #4
 8007b88:	3415      	adds	r4, #21
 8007b8a:	42a6      	cmp	r6, r4
 8007b8c:	bf38      	it	cc
 8007b8e:	2304      	movcc	r3, #4
 8007b90:	441d      	add	r5, r3
 8007b92:	4473      	add	r3, lr
 8007b94:	469e      	mov	lr, r3
 8007b96:	462e      	mov	r6, r5
 8007b98:	4566      	cmp	r6, ip
 8007b9a:	d30e      	bcc.n	8007bba <__mdiff+0xea>
 8007b9c:	f10c 0203 	add.w	r2, ip, #3
 8007ba0:	1b52      	subs	r2, r2, r5
 8007ba2:	f022 0203 	bic.w	r2, r2, #3
 8007ba6:	3d03      	subs	r5, #3
 8007ba8:	45ac      	cmp	ip, r5
 8007baa:	bf38      	it	cc
 8007bac:	2200      	movcc	r2, #0
 8007bae:	4413      	add	r3, r2
 8007bb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bb4:	b17a      	cbz	r2, 8007bd6 <__mdiff+0x106>
 8007bb6:	6107      	str	r7, [r0, #16]
 8007bb8:	e7a4      	b.n	8007b04 <__mdiff+0x34>
 8007bba:	f856 8b04 	ldr.w	r8, [r6], #4
 8007bbe:	fa11 f288 	uxtah	r2, r1, r8
 8007bc2:	1414      	asrs	r4, r2, #16
 8007bc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bc8:	b292      	uxth	r2, r2
 8007bca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bce:	f84e 2b04 	str.w	r2, [lr], #4
 8007bd2:	1421      	asrs	r1, r4, #16
 8007bd4:	e7e0      	b.n	8007b98 <__mdiff+0xc8>
 8007bd6:	3f01      	subs	r7, #1
 8007bd8:	e7ea      	b.n	8007bb0 <__mdiff+0xe0>
 8007bda:	bf00      	nop
 8007bdc:	08009f51 	.word	0x08009f51
 8007be0:	08009f62 	.word	0x08009f62

08007be4 <__ulp>:
 8007be4:	b082      	sub	sp, #8
 8007be6:	ed8d 0b00 	vstr	d0, [sp]
 8007bea:	9a01      	ldr	r2, [sp, #4]
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <__ulp+0x48>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc08      	bgt.n	8007c0a <__ulp+0x26>
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c02:	da04      	bge.n	8007c0e <__ulp+0x2a>
 8007c04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c08:	4113      	asrs	r3, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	e008      	b.n	8007c20 <__ulp+0x3c>
 8007c0e:	f1a2 0314 	sub.w	r3, r2, #20
 8007c12:	2b1e      	cmp	r3, #30
 8007c14:	bfda      	itte	le
 8007c16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c1a:	40da      	lsrle	r2, r3
 8007c1c:	2201      	movgt	r2, #1
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	ec41 0b10 	vmov	d0, r0, r1
 8007c28:	b002      	add	sp, #8
 8007c2a:	4770      	bx	lr
 8007c2c:	7ff00000 	.word	0x7ff00000

08007c30 <__b2d>:
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	6906      	ldr	r6, [r0, #16]
 8007c36:	f100 0814 	add.w	r8, r0, #20
 8007c3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c3e:	1f37      	subs	r7, r6, #4
 8007c40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c44:	4610      	mov	r0, r2
 8007c46:	f7ff fd53 	bl	80076f0 <__hi0bits>
 8007c4a:	f1c0 0320 	rsb	r3, r0, #32
 8007c4e:	280a      	cmp	r0, #10
 8007c50:	600b      	str	r3, [r1, #0]
 8007c52:	491b      	ldr	r1, [pc, #108]	; (8007cc0 <__b2d+0x90>)
 8007c54:	dc15      	bgt.n	8007c82 <__b2d+0x52>
 8007c56:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c5e:	45b8      	cmp	r8, r7
 8007c60:	ea43 0501 	orr.w	r5, r3, r1
 8007c64:	bf34      	ite	cc
 8007c66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c6a:	2300      	movcs	r3, #0
 8007c6c:	3015      	adds	r0, #21
 8007c6e:	fa02 f000 	lsl.w	r0, r2, r0
 8007c72:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c76:	4303      	orrs	r3, r0
 8007c78:	461c      	mov	r4, r3
 8007c7a:	ec45 4b10 	vmov	d0, r4, r5
 8007c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c82:	45b8      	cmp	r8, r7
 8007c84:	bf3a      	itte	cc
 8007c86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c8e:	2300      	movcs	r3, #0
 8007c90:	380b      	subs	r0, #11
 8007c92:	d012      	beq.n	8007cba <__b2d+0x8a>
 8007c94:	f1c0 0120 	rsb	r1, r0, #32
 8007c98:	fa23 f401 	lsr.w	r4, r3, r1
 8007c9c:	4082      	lsls	r2, r0
 8007c9e:	4322      	orrs	r2, r4
 8007ca0:	4547      	cmp	r7, r8
 8007ca2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007ca6:	bf8c      	ite	hi
 8007ca8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007cac:	2200      	movls	r2, #0
 8007cae:	4083      	lsls	r3, r0
 8007cb0:	40ca      	lsrs	r2, r1
 8007cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	e7de      	b.n	8007c78 <__b2d+0x48>
 8007cba:	ea42 0501 	orr.w	r5, r2, r1
 8007cbe:	e7db      	b.n	8007c78 <__b2d+0x48>
 8007cc0:	3ff00000 	.word	0x3ff00000

08007cc4 <__d2b>:
 8007cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	460f      	mov	r7, r1
 8007cca:	2101      	movs	r1, #1
 8007ccc:	ec59 8b10 	vmov	r8, r9, d0
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	f7ff fc1b 	bl	800750c <_Balloc>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b930      	cbnz	r0, 8007ce8 <__d2b+0x24>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <__d2b+0xac>)
 8007cde:	4825      	ldr	r0, [pc, #148]	; (8007d74 <__d2b+0xb0>)
 8007ce0:	f240 310f 	movw	r1, #783	; 0x30f
 8007ce4:	f001 f9a0 	bl	8009028 <__assert_func>
 8007ce8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cf0:	bb2d      	cbnz	r5, 8007d3e <__d2b+0x7a>
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	f1b8 0300 	subs.w	r3, r8, #0
 8007cf8:	d026      	beq.n	8007d48 <__d2b+0x84>
 8007cfa:	4668      	mov	r0, sp
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	f7ff fd17 	bl	8007730 <__lo0bits>
 8007d02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d06:	b1e8      	cbz	r0, 8007d44 <__d2b+0x80>
 8007d08:	f1c0 0320 	rsb	r3, r0, #32
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	430b      	orrs	r3, r1
 8007d12:	40c2      	lsrs	r2, r0
 8007d14:	6163      	str	r3, [r4, #20]
 8007d16:	9201      	str	r2, [sp, #4]
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	61a3      	str	r3, [r4, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bf14      	ite	ne
 8007d20:	2202      	movne	r2, #2
 8007d22:	2201      	moveq	r2, #1
 8007d24:	6122      	str	r2, [r4, #16]
 8007d26:	b1bd      	cbz	r5, 8007d58 <__d2b+0x94>
 8007d28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d2c:	4405      	add	r5, r0
 8007d2e:	603d      	str	r5, [r7, #0]
 8007d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d34:	6030      	str	r0, [r6, #0]
 8007d36:	4620      	mov	r0, r4
 8007d38:	b003      	add	sp, #12
 8007d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d42:	e7d6      	b.n	8007cf2 <__d2b+0x2e>
 8007d44:	6161      	str	r1, [r4, #20]
 8007d46:	e7e7      	b.n	8007d18 <__d2b+0x54>
 8007d48:	a801      	add	r0, sp, #4
 8007d4a:	f7ff fcf1 	bl	8007730 <__lo0bits>
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	6163      	str	r3, [r4, #20]
 8007d52:	3020      	adds	r0, #32
 8007d54:	2201      	movs	r2, #1
 8007d56:	e7e5      	b.n	8007d24 <__d2b+0x60>
 8007d58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d60:	6038      	str	r0, [r7, #0]
 8007d62:	6918      	ldr	r0, [r3, #16]
 8007d64:	f7ff fcc4 	bl	80076f0 <__hi0bits>
 8007d68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d6c:	e7e2      	b.n	8007d34 <__d2b+0x70>
 8007d6e:	bf00      	nop
 8007d70:	08009f51 	.word	0x08009f51
 8007d74:	08009f62 	.word	0x08009f62

08007d78 <__ratio>:
 8007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	4688      	mov	r8, r1
 8007d7e:	4669      	mov	r1, sp
 8007d80:	4681      	mov	r9, r0
 8007d82:	f7ff ff55 	bl	8007c30 <__b2d>
 8007d86:	a901      	add	r1, sp, #4
 8007d88:	4640      	mov	r0, r8
 8007d8a:	ec55 4b10 	vmov	r4, r5, d0
 8007d8e:	f7ff ff4f 	bl	8007c30 <__b2d>
 8007d92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d9a:	eba3 0c02 	sub.w	ip, r3, r2
 8007d9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007da8:	ec51 0b10 	vmov	r0, r1, d0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfd6      	itet	le
 8007db0:	460a      	movle	r2, r1
 8007db2:	462a      	movgt	r2, r5
 8007db4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007db8:	468b      	mov	fp, r1
 8007dba:	462f      	mov	r7, r5
 8007dbc:	bfd4      	ite	le
 8007dbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007dc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	ee10 2a10 	vmov	r2, s0
 8007dcc:	465b      	mov	r3, fp
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 fd44 	bl	800085c <__aeabi_ddiv>
 8007dd4:	ec41 0b10 	vmov	d0, r0, r1
 8007dd8:	b003      	add	sp, #12
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dde <__copybits>:
 8007dde:	3901      	subs	r1, #1
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	1149      	asrs	r1, r1, #5
 8007de4:	6914      	ldr	r4, [r2, #16]
 8007de6:	3101      	adds	r1, #1
 8007de8:	f102 0314 	add.w	r3, r2, #20
 8007dec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007df0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007df4:	1f05      	subs	r5, r0, #4
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	d30c      	bcc.n	8007e14 <__copybits+0x36>
 8007dfa:	1aa3      	subs	r3, r4, r2
 8007dfc:	3b11      	subs	r3, #17
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	3211      	adds	r2, #17
 8007e04:	42a2      	cmp	r2, r4
 8007e06:	bf88      	it	hi
 8007e08:	2300      	movhi	r3, #0
 8007e0a:	4418      	add	r0, r3
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4288      	cmp	r0, r1
 8007e10:	d305      	bcc.n	8007e1e <__copybits+0x40>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e18:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e1c:	e7eb      	b.n	8007df6 <__copybits+0x18>
 8007e1e:	f840 3b04 	str.w	r3, [r0], #4
 8007e22:	e7f4      	b.n	8007e0e <__copybits+0x30>

08007e24 <__any_on>:
 8007e24:	f100 0214 	add.w	r2, r0, #20
 8007e28:	6900      	ldr	r0, [r0, #16]
 8007e2a:	114b      	asrs	r3, r1, #5
 8007e2c:	4298      	cmp	r0, r3
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	db11      	blt.n	8007e56 <__any_on+0x32>
 8007e32:	dd0a      	ble.n	8007e4a <__any_on+0x26>
 8007e34:	f011 011f 	ands.w	r1, r1, #31
 8007e38:	d007      	beq.n	8007e4a <__any_on+0x26>
 8007e3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e3e:	fa24 f001 	lsr.w	r0, r4, r1
 8007e42:	fa00 f101 	lsl.w	r1, r0, r1
 8007e46:	428c      	cmp	r4, r1
 8007e48:	d10b      	bne.n	8007e62 <__any_on+0x3e>
 8007e4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d803      	bhi.n	8007e5a <__any_on+0x36>
 8007e52:	2000      	movs	r0, #0
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	4603      	mov	r3, r0
 8007e58:	e7f7      	b.n	8007e4a <__any_on+0x26>
 8007e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e5e:	2900      	cmp	r1, #0
 8007e60:	d0f5      	beq.n	8007e4e <__any_on+0x2a>
 8007e62:	2001      	movs	r0, #1
 8007e64:	e7f6      	b.n	8007e54 <__any_on+0x30>

08007e66 <sulp>:
 8007e66:	b570      	push	{r4, r5, r6, lr}
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	ec45 4b10 	vmov	d0, r4, r5
 8007e70:	4616      	mov	r6, r2
 8007e72:	f7ff feb7 	bl	8007be4 <__ulp>
 8007e76:	ec51 0b10 	vmov	r0, r1, d0
 8007e7a:	b17e      	cbz	r6, 8007e9c <sulp+0x36>
 8007e7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd09      	ble.n	8007e9c <sulp+0x36>
 8007e88:	051b      	lsls	r3, r3, #20
 8007e8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e8e:	2400      	movs	r4, #0
 8007e90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e94:	4622      	mov	r2, r4
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ea0 <_strtod_l>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	ed2d 8b02 	vpush	{d8}
 8007ea8:	b09b      	sub	sp, #108	; 0x6c
 8007eaa:	4604      	mov	r4, r0
 8007eac:	9213      	str	r2, [sp, #76]	; 0x4c
 8007eae:	2200      	movs	r2, #0
 8007eb0:	9216      	str	r2, [sp, #88]	; 0x58
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	f04f 0800 	mov.w	r8, #0
 8007eb8:	f04f 0900 	mov.w	r9, #0
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	9215      	str	r2, [sp, #84]	; 0x54
 8007ec0:	7811      	ldrb	r1, [r2, #0]
 8007ec2:	292b      	cmp	r1, #43	; 0x2b
 8007ec4:	d04c      	beq.n	8007f60 <_strtod_l+0xc0>
 8007ec6:	d83a      	bhi.n	8007f3e <_strtod_l+0x9e>
 8007ec8:	290d      	cmp	r1, #13
 8007eca:	d834      	bhi.n	8007f36 <_strtod_l+0x96>
 8007ecc:	2908      	cmp	r1, #8
 8007ece:	d834      	bhi.n	8007f3a <_strtod_l+0x9a>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	d03d      	beq.n	8007f50 <_strtod_l+0xb0>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ed8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007eda:	7832      	ldrb	r2, [r6, #0]
 8007edc:	2a30      	cmp	r2, #48	; 0x30
 8007ede:	f040 80b4 	bne.w	800804a <_strtod_l+0x1aa>
 8007ee2:	7872      	ldrb	r2, [r6, #1]
 8007ee4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ee8:	2a58      	cmp	r2, #88	; 0x58
 8007eea:	d170      	bne.n	8007fce <_strtod_l+0x12e>
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	ab16      	add	r3, sp, #88	; 0x58
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4a8e      	ldr	r2, [pc, #568]	; (8008130 <_strtod_l+0x290>)
 8007ef8:	ab17      	add	r3, sp, #92	; 0x5c
 8007efa:	a915      	add	r1, sp, #84	; 0x54
 8007efc:	4620      	mov	r0, r4
 8007efe:	f001 f92f 	bl	8009160 <__gethex>
 8007f02:	f010 070f 	ands.w	r7, r0, #15
 8007f06:	4605      	mov	r5, r0
 8007f08:	d005      	beq.n	8007f16 <_strtod_l+0x76>
 8007f0a:	2f06      	cmp	r7, #6
 8007f0c:	d12a      	bne.n	8007f64 <_strtod_l+0xc4>
 8007f0e:	3601      	adds	r6, #1
 8007f10:	2300      	movs	r3, #0
 8007f12:	9615      	str	r6, [sp, #84]	; 0x54
 8007f14:	930a      	str	r3, [sp, #40]	; 0x28
 8007f16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 857f 	bne.w	8008a1c <_strtod_l+0xb7c>
 8007f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f20:	b1db      	cbz	r3, 8007f5a <_strtod_l+0xba>
 8007f22:	4642      	mov	r2, r8
 8007f24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f28:	ec43 2b10 	vmov	d0, r2, r3
 8007f2c:	b01b      	add	sp, #108	; 0x6c
 8007f2e:	ecbd 8b02 	vpop	{d8}
 8007f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f36:	2920      	cmp	r1, #32
 8007f38:	d1cc      	bne.n	8007ed4 <_strtod_l+0x34>
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	e7bf      	b.n	8007ebe <_strtod_l+0x1e>
 8007f3e:	292d      	cmp	r1, #45	; 0x2d
 8007f40:	d1c8      	bne.n	8007ed4 <_strtod_l+0x34>
 8007f42:	2101      	movs	r1, #1
 8007f44:	910a      	str	r1, [sp, #40]	; 0x28
 8007f46:	1c51      	adds	r1, r2, #1
 8007f48:	9115      	str	r1, [sp, #84]	; 0x54
 8007f4a:	7852      	ldrb	r2, [r2, #1]
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	d1c3      	bne.n	8007ed8 <_strtod_l+0x38>
 8007f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f52:	9515      	str	r5, [sp, #84]	; 0x54
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 855f 	bne.w	8008a18 <_strtod_l+0xb78>
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	e7e3      	b.n	8007f28 <_strtod_l+0x88>
 8007f60:	2100      	movs	r1, #0
 8007f62:	e7ef      	b.n	8007f44 <_strtod_l+0xa4>
 8007f64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f66:	b13a      	cbz	r2, 8007f78 <_strtod_l+0xd8>
 8007f68:	2135      	movs	r1, #53	; 0x35
 8007f6a:	a818      	add	r0, sp, #96	; 0x60
 8007f6c:	f7ff ff37 	bl	8007dde <__copybits>
 8007f70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f72:	4620      	mov	r0, r4
 8007f74:	f7ff fb0a 	bl	800758c <_Bfree>
 8007f78:	3f01      	subs	r7, #1
 8007f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f7c:	2f04      	cmp	r7, #4
 8007f7e:	d806      	bhi.n	8007f8e <_strtod_l+0xee>
 8007f80:	e8df f007 	tbb	[pc, r7]
 8007f84:	201d0314 	.word	0x201d0314
 8007f88:	14          	.byte	0x14
 8007f89:	00          	.byte	0x00
 8007f8a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007f8e:	05e9      	lsls	r1, r5, #23
 8007f90:	bf48      	it	mi
 8007f92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f9a:	0d1b      	lsrs	r3, r3, #20
 8007f9c:	051b      	lsls	r3, r3, #20
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1b9      	bne.n	8007f16 <_strtod_l+0x76>
 8007fa2:	f7fe faf7 	bl	8006594 <__errno>
 8007fa6:	2322      	movs	r3, #34	; 0x22
 8007fa8:	6003      	str	r3, [r0, #0]
 8007faa:	e7b4      	b.n	8007f16 <_strtod_l+0x76>
 8007fac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007fb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fb8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007fbc:	e7e7      	b.n	8007f8e <_strtod_l+0xee>
 8007fbe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008138 <_strtod_l+0x298>
 8007fc2:	e7e4      	b.n	8007f8e <_strtod_l+0xee>
 8007fc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8007fcc:	e7df      	b.n	8007f8e <_strtod_l+0xee>
 8007fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	9215      	str	r2, [sp, #84]	; 0x54
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	d0f9      	beq.n	8007fce <_strtod_l+0x12e>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d09b      	beq.n	8007f16 <_strtod_l+0x76>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f04f 0a00 	mov.w	sl, #0
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007fee:	46d3      	mov	fp, sl
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007ff4:	7806      	ldrb	r6, [r0, #0]
 8007ff6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ffa:	b2d9      	uxtb	r1, r3
 8007ffc:	2909      	cmp	r1, #9
 8007ffe:	d926      	bls.n	800804e <_strtod_l+0x1ae>
 8008000:	494c      	ldr	r1, [pc, #304]	; (8008134 <_strtod_l+0x294>)
 8008002:	2201      	movs	r2, #1
 8008004:	f000 ffe6 	bl	8008fd4 <strncmp>
 8008008:	2800      	cmp	r0, #0
 800800a:	d030      	beq.n	800806e <_strtod_l+0x1ce>
 800800c:	2000      	movs	r0, #0
 800800e:	4632      	mov	r2, r6
 8008010:	9005      	str	r0, [sp, #20]
 8008012:	465e      	mov	r6, fp
 8008014:	4603      	mov	r3, r0
 8008016:	2a65      	cmp	r2, #101	; 0x65
 8008018:	d001      	beq.n	800801e <_strtod_l+0x17e>
 800801a:	2a45      	cmp	r2, #69	; 0x45
 800801c:	d113      	bne.n	8008046 <_strtod_l+0x1a6>
 800801e:	b91e      	cbnz	r6, 8008028 <_strtod_l+0x188>
 8008020:	9a04      	ldr	r2, [sp, #16]
 8008022:	4302      	orrs	r2, r0
 8008024:	d094      	beq.n	8007f50 <_strtod_l+0xb0>
 8008026:	2600      	movs	r6, #0
 8008028:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800802a:	1c6a      	adds	r2, r5, #1
 800802c:	9215      	str	r2, [sp, #84]	; 0x54
 800802e:	786a      	ldrb	r2, [r5, #1]
 8008030:	2a2b      	cmp	r2, #43	; 0x2b
 8008032:	d074      	beq.n	800811e <_strtod_l+0x27e>
 8008034:	2a2d      	cmp	r2, #45	; 0x2d
 8008036:	d078      	beq.n	800812a <_strtod_l+0x28a>
 8008038:	f04f 0c00 	mov.w	ip, #0
 800803c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008040:	2909      	cmp	r1, #9
 8008042:	d97f      	bls.n	8008144 <_strtod_l+0x2a4>
 8008044:	9515      	str	r5, [sp, #84]	; 0x54
 8008046:	2700      	movs	r7, #0
 8008048:	e09e      	b.n	8008188 <_strtod_l+0x2e8>
 800804a:	2300      	movs	r3, #0
 800804c:	e7c8      	b.n	8007fe0 <_strtod_l+0x140>
 800804e:	f1bb 0f08 	cmp.w	fp, #8
 8008052:	bfd8      	it	le
 8008054:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008056:	f100 0001 	add.w	r0, r0, #1
 800805a:	bfda      	itte	le
 800805c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008060:	9309      	strle	r3, [sp, #36]	; 0x24
 8008062:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008066:	f10b 0b01 	add.w	fp, fp, #1
 800806a:	9015      	str	r0, [sp, #84]	; 0x54
 800806c:	e7c1      	b.n	8007ff2 <_strtod_l+0x152>
 800806e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	9215      	str	r2, [sp, #84]	; 0x54
 8008074:	785a      	ldrb	r2, [r3, #1]
 8008076:	f1bb 0f00 	cmp.w	fp, #0
 800807a:	d037      	beq.n	80080ec <_strtod_l+0x24c>
 800807c:	9005      	str	r0, [sp, #20]
 800807e:	465e      	mov	r6, fp
 8008080:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008084:	2b09      	cmp	r3, #9
 8008086:	d912      	bls.n	80080ae <_strtod_l+0x20e>
 8008088:	2301      	movs	r3, #1
 800808a:	e7c4      	b.n	8008016 <_strtod_l+0x176>
 800808c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	9215      	str	r2, [sp, #84]	; 0x54
 8008092:	785a      	ldrb	r2, [r3, #1]
 8008094:	3001      	adds	r0, #1
 8008096:	2a30      	cmp	r2, #48	; 0x30
 8008098:	d0f8      	beq.n	800808c <_strtod_l+0x1ec>
 800809a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800809e:	2b08      	cmp	r3, #8
 80080a0:	f200 84c1 	bhi.w	8008a26 <_strtod_l+0xb86>
 80080a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080a6:	9005      	str	r0, [sp, #20]
 80080a8:	2000      	movs	r0, #0
 80080aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ac:	4606      	mov	r6, r0
 80080ae:	3a30      	subs	r2, #48	; 0x30
 80080b0:	f100 0301 	add.w	r3, r0, #1
 80080b4:	d014      	beq.n	80080e0 <_strtod_l+0x240>
 80080b6:	9905      	ldr	r1, [sp, #20]
 80080b8:	4419      	add	r1, r3
 80080ba:	9105      	str	r1, [sp, #20]
 80080bc:	4633      	mov	r3, r6
 80080be:	eb00 0c06 	add.w	ip, r0, r6
 80080c2:	210a      	movs	r1, #10
 80080c4:	4563      	cmp	r3, ip
 80080c6:	d113      	bne.n	80080f0 <_strtod_l+0x250>
 80080c8:	1833      	adds	r3, r6, r0
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	f106 0601 	add.w	r6, r6, #1
 80080d0:	4406      	add	r6, r0
 80080d2:	dc1a      	bgt.n	800810a <_strtod_l+0x26a>
 80080d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080d6:	230a      	movs	r3, #10
 80080d8:	fb03 2301 	mla	r3, r3, r1, r2
 80080dc:	9309      	str	r3, [sp, #36]	; 0x24
 80080de:	2300      	movs	r3, #0
 80080e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080e2:	1c51      	adds	r1, r2, #1
 80080e4:	9115      	str	r1, [sp, #84]	; 0x54
 80080e6:	7852      	ldrb	r2, [r2, #1]
 80080e8:	4618      	mov	r0, r3
 80080ea:	e7c9      	b.n	8008080 <_strtod_l+0x1e0>
 80080ec:	4658      	mov	r0, fp
 80080ee:	e7d2      	b.n	8008096 <_strtod_l+0x1f6>
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	f103 0301 	add.w	r3, r3, #1
 80080f6:	dc03      	bgt.n	8008100 <_strtod_l+0x260>
 80080f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080fa:	434f      	muls	r7, r1
 80080fc:	9709      	str	r7, [sp, #36]	; 0x24
 80080fe:	e7e1      	b.n	80080c4 <_strtod_l+0x224>
 8008100:	2b10      	cmp	r3, #16
 8008102:	bfd8      	it	le
 8008104:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008108:	e7dc      	b.n	80080c4 <_strtod_l+0x224>
 800810a:	2e10      	cmp	r6, #16
 800810c:	bfdc      	itt	le
 800810e:	230a      	movle	r3, #10
 8008110:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008114:	e7e3      	b.n	80080de <_strtod_l+0x23e>
 8008116:	2300      	movs	r3, #0
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	2301      	movs	r3, #1
 800811c:	e780      	b.n	8008020 <_strtod_l+0x180>
 800811e:	f04f 0c00 	mov.w	ip, #0
 8008122:	1caa      	adds	r2, r5, #2
 8008124:	9215      	str	r2, [sp, #84]	; 0x54
 8008126:	78aa      	ldrb	r2, [r5, #2]
 8008128:	e788      	b.n	800803c <_strtod_l+0x19c>
 800812a:	f04f 0c01 	mov.w	ip, #1
 800812e:	e7f8      	b.n	8008122 <_strtod_l+0x282>
 8008130:	0800a0c0 	.word	0x0800a0c0
 8008134:	0800a0bc 	.word	0x0800a0bc
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800813e:	1c51      	adds	r1, r2, #1
 8008140:	9115      	str	r1, [sp, #84]	; 0x54
 8008142:	7852      	ldrb	r2, [r2, #1]
 8008144:	2a30      	cmp	r2, #48	; 0x30
 8008146:	d0f9      	beq.n	800813c <_strtod_l+0x29c>
 8008148:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800814c:	2908      	cmp	r1, #8
 800814e:	f63f af7a 	bhi.w	8008046 <_strtod_l+0x1a6>
 8008152:	3a30      	subs	r2, #48	; 0x30
 8008154:	9208      	str	r2, [sp, #32]
 8008156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008158:	920c      	str	r2, [sp, #48]	; 0x30
 800815a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800815c:	1c57      	adds	r7, r2, #1
 800815e:	9715      	str	r7, [sp, #84]	; 0x54
 8008160:	7852      	ldrb	r2, [r2, #1]
 8008162:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008166:	f1be 0f09 	cmp.w	lr, #9
 800816a:	d938      	bls.n	80081de <_strtod_l+0x33e>
 800816c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800816e:	1a7f      	subs	r7, r7, r1
 8008170:	2f08      	cmp	r7, #8
 8008172:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008176:	dc03      	bgt.n	8008180 <_strtod_l+0x2e0>
 8008178:	9908      	ldr	r1, [sp, #32]
 800817a:	428f      	cmp	r7, r1
 800817c:	bfa8      	it	ge
 800817e:	460f      	movge	r7, r1
 8008180:	f1bc 0f00 	cmp.w	ip, #0
 8008184:	d000      	beq.n	8008188 <_strtod_l+0x2e8>
 8008186:	427f      	negs	r7, r7
 8008188:	2e00      	cmp	r6, #0
 800818a:	d14f      	bne.n	800822c <_strtod_l+0x38c>
 800818c:	9904      	ldr	r1, [sp, #16]
 800818e:	4301      	orrs	r1, r0
 8008190:	f47f aec1 	bne.w	8007f16 <_strtod_l+0x76>
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f aedb 	bne.w	8007f50 <_strtod_l+0xb0>
 800819a:	2a69      	cmp	r2, #105	; 0x69
 800819c:	d029      	beq.n	80081f2 <_strtod_l+0x352>
 800819e:	dc26      	bgt.n	80081ee <_strtod_l+0x34e>
 80081a0:	2a49      	cmp	r2, #73	; 0x49
 80081a2:	d026      	beq.n	80081f2 <_strtod_l+0x352>
 80081a4:	2a4e      	cmp	r2, #78	; 0x4e
 80081a6:	f47f aed3 	bne.w	8007f50 <_strtod_l+0xb0>
 80081aa:	499b      	ldr	r1, [pc, #620]	; (8008418 <_strtod_l+0x578>)
 80081ac:	a815      	add	r0, sp, #84	; 0x54
 80081ae:	f001 fa17 	bl	80095e0 <__match>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aecc 	beq.w	8007f50 <_strtod_l+0xb0>
 80081b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b28      	cmp	r3, #40	; 0x28
 80081be:	d12f      	bne.n	8008220 <_strtod_l+0x380>
 80081c0:	4996      	ldr	r1, [pc, #600]	; (800841c <_strtod_l+0x57c>)
 80081c2:	aa18      	add	r2, sp, #96	; 0x60
 80081c4:	a815      	add	r0, sp, #84	; 0x54
 80081c6:	f001 fa1f 	bl	8009608 <__hexnan>
 80081ca:	2805      	cmp	r0, #5
 80081cc:	d128      	bne.n	8008220 <_strtod_l+0x380>
 80081ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081dc:	e69b      	b.n	8007f16 <_strtod_l+0x76>
 80081de:	9f08      	ldr	r7, [sp, #32]
 80081e0:	210a      	movs	r1, #10
 80081e2:	fb01 2107 	mla	r1, r1, r7, r2
 80081e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80081ea:	9208      	str	r2, [sp, #32]
 80081ec:	e7b5      	b.n	800815a <_strtod_l+0x2ba>
 80081ee:	2a6e      	cmp	r2, #110	; 0x6e
 80081f0:	e7d9      	b.n	80081a6 <_strtod_l+0x306>
 80081f2:	498b      	ldr	r1, [pc, #556]	; (8008420 <_strtod_l+0x580>)
 80081f4:	a815      	add	r0, sp, #84	; 0x54
 80081f6:	f001 f9f3 	bl	80095e0 <__match>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aea8 	beq.w	8007f50 <_strtod_l+0xb0>
 8008200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008202:	4988      	ldr	r1, [pc, #544]	; (8008424 <_strtod_l+0x584>)
 8008204:	3b01      	subs	r3, #1
 8008206:	a815      	add	r0, sp, #84	; 0x54
 8008208:	9315      	str	r3, [sp, #84]	; 0x54
 800820a:	f001 f9e9 	bl	80095e0 <__match>
 800820e:	b910      	cbnz	r0, 8008216 <_strtod_l+0x376>
 8008210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008212:	3301      	adds	r3, #1
 8008214:	9315      	str	r3, [sp, #84]	; 0x54
 8008216:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008434 <_strtod_l+0x594>
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	e67a      	b.n	8007f16 <_strtod_l+0x76>
 8008220:	4881      	ldr	r0, [pc, #516]	; (8008428 <_strtod_l+0x588>)
 8008222:	f000 fef9 	bl	8009018 <nan>
 8008226:	ec59 8b10 	vmov	r8, r9, d0
 800822a:	e674      	b.n	8007f16 <_strtod_l+0x76>
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008230:	1afb      	subs	r3, r7, r3
 8008232:	f1bb 0f00 	cmp.w	fp, #0
 8008236:	bf08      	it	eq
 8008238:	46b3      	moveq	fp, r6
 800823a:	2e10      	cmp	r6, #16
 800823c:	9308      	str	r3, [sp, #32]
 800823e:	4635      	mov	r5, r6
 8008240:	bfa8      	it	ge
 8008242:	2510      	movge	r5, #16
 8008244:	f7f8 f966 	bl	8000514 <__aeabi_ui2d>
 8008248:	2e09      	cmp	r6, #9
 800824a:	4680      	mov	r8, r0
 800824c:	4689      	mov	r9, r1
 800824e:	dd13      	ble.n	8008278 <_strtod_l+0x3d8>
 8008250:	4b76      	ldr	r3, [pc, #472]	; (800842c <_strtod_l+0x58c>)
 8008252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008256:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800825a:	f7f8 f9d5 	bl	8000608 <__aeabi_dmul>
 800825e:	4680      	mov	r8, r0
 8008260:	4650      	mov	r0, sl
 8008262:	4689      	mov	r9, r1
 8008264:	f7f8 f956 	bl	8000514 <__aeabi_ui2d>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 f814 	bl	800029c <__adddf3>
 8008274:	4680      	mov	r8, r0
 8008276:	4689      	mov	r9, r1
 8008278:	2e0f      	cmp	r6, #15
 800827a:	dc38      	bgt.n	80082ee <_strtod_l+0x44e>
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f43f ae49 	beq.w	8007f16 <_strtod_l+0x76>
 8008284:	dd24      	ble.n	80082d0 <_strtod_l+0x430>
 8008286:	2b16      	cmp	r3, #22
 8008288:	dc0b      	bgt.n	80082a2 <_strtod_l+0x402>
 800828a:	4968      	ldr	r1, [pc, #416]	; (800842c <_strtod_l+0x58c>)
 800828c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	f7f8 f9b6 	bl	8000608 <__aeabi_dmul>
 800829c:	4680      	mov	r8, r0
 800829e:	4689      	mov	r9, r1
 80082a0:	e639      	b.n	8007f16 <_strtod_l+0x76>
 80082a2:	9a08      	ldr	r2, [sp, #32]
 80082a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80082a8:	4293      	cmp	r3, r2
 80082aa:	db20      	blt.n	80082ee <_strtod_l+0x44e>
 80082ac:	4c5f      	ldr	r4, [pc, #380]	; (800842c <_strtod_l+0x58c>)
 80082ae:	f1c6 060f 	rsb	r6, r6, #15
 80082b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80082b6:	4642      	mov	r2, r8
 80082b8:	464b      	mov	r3, r9
 80082ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082be:	f7f8 f9a3 	bl	8000608 <__aeabi_dmul>
 80082c2:	9b08      	ldr	r3, [sp, #32]
 80082c4:	1b9e      	subs	r6, r3, r6
 80082c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80082ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80082ce:	e7e3      	b.n	8008298 <_strtod_l+0x3f8>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	3316      	adds	r3, #22
 80082d4:	db0b      	blt.n	80082ee <_strtod_l+0x44e>
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	1bdf      	subs	r7, r3, r7
 80082da:	4b54      	ldr	r3, [pc, #336]	; (800842c <_strtod_l+0x58c>)
 80082dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80082e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fab8 	bl	800085c <__aeabi_ddiv>
 80082ec:	e7d6      	b.n	800829c <_strtod_l+0x3fc>
 80082ee:	9b08      	ldr	r3, [sp, #32]
 80082f0:	1b75      	subs	r5, r6, r5
 80082f2:	441d      	add	r5, r3
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	dd70      	ble.n	80083da <_strtod_l+0x53a>
 80082f8:	f015 030f 	ands.w	r3, r5, #15
 80082fc:	d00a      	beq.n	8008314 <_strtod_l+0x474>
 80082fe:	494b      	ldr	r1, [pc, #300]	; (800842c <_strtod_l+0x58c>)
 8008300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800830c:	f7f8 f97c 	bl	8000608 <__aeabi_dmul>
 8008310:	4680      	mov	r8, r0
 8008312:	4689      	mov	r9, r1
 8008314:	f035 050f 	bics.w	r5, r5, #15
 8008318:	d04d      	beq.n	80083b6 <_strtod_l+0x516>
 800831a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800831e:	dd22      	ble.n	8008366 <_strtod_l+0x4c6>
 8008320:	2500      	movs	r5, #0
 8008322:	46ab      	mov	fp, r5
 8008324:	9509      	str	r5, [sp, #36]	; 0x24
 8008326:	9505      	str	r5, [sp, #20]
 8008328:	2322      	movs	r3, #34	; 0x22
 800832a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008434 <_strtod_l+0x594>
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	f04f 0800 	mov.w	r8, #0
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	f43f aded 	beq.w	8007f16 <_strtod_l+0x76>
 800833c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff f924 	bl	800758c <_Bfree>
 8008344:	9905      	ldr	r1, [sp, #20]
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff f920 	bl	800758c <_Bfree>
 800834c:	4659      	mov	r1, fp
 800834e:	4620      	mov	r0, r4
 8008350:	f7ff f91c 	bl	800758c <_Bfree>
 8008354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008356:	4620      	mov	r0, r4
 8008358:	f7ff f918 	bl	800758c <_Bfree>
 800835c:	4629      	mov	r1, r5
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff f914 	bl	800758c <_Bfree>
 8008364:	e5d7      	b.n	8007f16 <_strtod_l+0x76>
 8008366:	4b32      	ldr	r3, [pc, #200]	; (8008430 <_strtod_l+0x590>)
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	2300      	movs	r3, #0
 800836c:	112d      	asrs	r5, r5, #4
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	469a      	mov	sl, r3
 8008374:	2d01      	cmp	r5, #1
 8008376:	dc21      	bgt.n	80083bc <_strtod_l+0x51c>
 8008378:	b10b      	cbz	r3, 800837e <_strtod_l+0x4de>
 800837a:	4680      	mov	r8, r0
 800837c:	4689      	mov	r9, r1
 800837e:	492c      	ldr	r1, [pc, #176]	; (8008430 <_strtod_l+0x590>)
 8008380:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008384:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008390:	f7f8 f93a 	bl	8000608 <__aeabi_dmul>
 8008394:	4b27      	ldr	r3, [pc, #156]	; (8008434 <_strtod_l+0x594>)
 8008396:	460a      	mov	r2, r1
 8008398:	400b      	ands	r3, r1
 800839a:	4927      	ldr	r1, [pc, #156]	; (8008438 <_strtod_l+0x598>)
 800839c:	428b      	cmp	r3, r1
 800839e:	4680      	mov	r8, r0
 80083a0:	d8be      	bhi.n	8008320 <_strtod_l+0x480>
 80083a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80083a6:	428b      	cmp	r3, r1
 80083a8:	bf86      	itte	hi
 80083aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800843c <_strtod_l+0x59c>
 80083ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80083b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80083b6:	2300      	movs	r3, #0
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	e07b      	b.n	80084b4 <_strtod_l+0x614>
 80083bc:	07ea      	lsls	r2, r5, #31
 80083be:	d505      	bpl.n	80083cc <_strtod_l+0x52c>
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f8 f91f 	bl	8000608 <__aeabi_dmul>
 80083ca:	2301      	movs	r3, #1
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	3208      	adds	r2, #8
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	106d      	asrs	r5, r5, #1
 80083d6:	9204      	str	r2, [sp, #16]
 80083d8:	e7cc      	b.n	8008374 <_strtod_l+0x4d4>
 80083da:	d0ec      	beq.n	80083b6 <_strtod_l+0x516>
 80083dc:	426d      	negs	r5, r5
 80083de:	f015 020f 	ands.w	r2, r5, #15
 80083e2:	d00a      	beq.n	80083fa <_strtod_l+0x55a>
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <_strtod_l+0x58c>)
 80083e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 fa33 	bl	800085c <__aeabi_ddiv>
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	112d      	asrs	r5, r5, #4
 80083fc:	d0db      	beq.n	80083b6 <_strtod_l+0x516>
 80083fe:	2d1f      	cmp	r5, #31
 8008400:	dd1e      	ble.n	8008440 <_strtod_l+0x5a0>
 8008402:	2500      	movs	r5, #0
 8008404:	46ab      	mov	fp, r5
 8008406:	9509      	str	r5, [sp, #36]	; 0x24
 8008408:	9505      	str	r5, [sp, #20]
 800840a:	2322      	movs	r3, #34	; 0x22
 800840c:	f04f 0800 	mov.w	r8, #0
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	e78d      	b.n	8008334 <_strtod_l+0x494>
 8008418:	08009ea9 	.word	0x08009ea9
 800841c:	0800a0d4 	.word	0x0800a0d4
 8008420:	08009ea1 	.word	0x08009ea1
 8008424:	08009ed8 	.word	0x08009ed8
 8008428:	0800a265 	.word	0x0800a265
 800842c:	08009fe8 	.word	0x08009fe8
 8008430:	08009fc0 	.word	0x08009fc0
 8008434:	7ff00000 	.word	0x7ff00000
 8008438:	7ca00000 	.word	0x7ca00000
 800843c:	7fefffff 	.word	0x7fefffff
 8008440:	f015 0310 	ands.w	r3, r5, #16
 8008444:	bf18      	it	ne
 8008446:	236a      	movne	r3, #106	; 0x6a
 8008448:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80087ec <_strtod_l+0x94c>
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	4640      	mov	r0, r8
 8008450:	4649      	mov	r1, r9
 8008452:	2300      	movs	r3, #0
 8008454:	07ea      	lsls	r2, r5, #31
 8008456:	d504      	bpl.n	8008462 <_strtod_l+0x5c2>
 8008458:	e9da 2300 	ldrd	r2, r3, [sl]
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	2301      	movs	r3, #1
 8008462:	106d      	asrs	r5, r5, #1
 8008464:	f10a 0a08 	add.w	sl, sl, #8
 8008468:	d1f4      	bne.n	8008454 <_strtod_l+0x5b4>
 800846a:	b10b      	cbz	r3, 8008470 <_strtod_l+0x5d0>
 800846c:	4680      	mov	r8, r0
 800846e:	4689      	mov	r9, r1
 8008470:	9b04      	ldr	r3, [sp, #16]
 8008472:	b1bb      	cbz	r3, 80084a4 <_strtod_l+0x604>
 8008474:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008478:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800847c:	2b00      	cmp	r3, #0
 800847e:	4649      	mov	r1, r9
 8008480:	dd10      	ble.n	80084a4 <_strtod_l+0x604>
 8008482:	2b1f      	cmp	r3, #31
 8008484:	f340 811e 	ble.w	80086c4 <_strtod_l+0x824>
 8008488:	2b34      	cmp	r3, #52	; 0x34
 800848a:	bfde      	ittt	le
 800848c:	f04f 33ff 	movle.w	r3, #4294967295
 8008490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008494:	4093      	lslle	r3, r2
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	bfcc      	ite	gt
 800849c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80084a0:	ea03 0901 	andle.w	r9, r3, r1
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d1a6      	bne.n	8008402 <_strtod_l+0x562>
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084ba:	4633      	mov	r3, r6
 80084bc:	465a      	mov	r2, fp
 80084be:	4620      	mov	r0, r4
 80084c0:	f7ff f8cc 	bl	800765c <__s2b>
 80084c4:	9009      	str	r0, [sp, #36]	; 0x24
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f af2a 	beq.w	8008320 <_strtod_l+0x480>
 80084cc:	9a08      	ldr	r2, [sp, #32]
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	eba3 0307 	sub.w	r3, r3, r7
 80084d6:	bfa8      	it	ge
 80084d8:	2300      	movge	r3, #0
 80084da:	930c      	str	r3, [sp, #48]	; 0x30
 80084dc:	2500      	movs	r5, #0
 80084de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084e2:	9312      	str	r3, [sp, #72]	; 0x48
 80084e4:	46ab      	mov	fp, r5
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	4620      	mov	r0, r4
 80084ea:	6859      	ldr	r1, [r3, #4]
 80084ec:	f7ff f80e 	bl	800750c <_Balloc>
 80084f0:	9005      	str	r0, [sp, #20]
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f43f af18 	beq.w	8008328 <_strtod_l+0x488>
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	3202      	adds	r2, #2
 80084fe:	f103 010c 	add.w	r1, r3, #12
 8008502:	0092      	lsls	r2, r2, #2
 8008504:	300c      	adds	r0, #12
 8008506:	f7fe f871 	bl	80065ec <memcpy>
 800850a:	ec49 8b10 	vmov	d0, r8, r9
 800850e:	aa18      	add	r2, sp, #96	; 0x60
 8008510:	a917      	add	r1, sp, #92	; 0x5c
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff fbd6 	bl	8007cc4 <__d2b>
 8008518:	ec49 8b18 	vmov	d8, r8, r9
 800851c:	9016      	str	r0, [sp, #88]	; 0x58
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f af02 	beq.w	8008328 <_strtod_l+0x488>
 8008524:	2101      	movs	r1, #1
 8008526:	4620      	mov	r0, r4
 8008528:	f7ff f930 	bl	800778c <__i2b>
 800852c:	4683      	mov	fp, r0
 800852e:	2800      	cmp	r0, #0
 8008530:	f43f aefa 	beq.w	8008328 <_strtod_l+0x488>
 8008534:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008538:	2e00      	cmp	r6, #0
 800853a:	bfab      	itete	ge
 800853c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800853e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008542:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008546:	bfac      	ite	ge
 8008548:	eb06 0a03 	addge.w	sl, r6, r3
 800854c:	1b9f      	sublt	r7, r3, r6
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	1af6      	subs	r6, r6, r3
 8008552:	4416      	add	r6, r2
 8008554:	4ba0      	ldr	r3, [pc, #640]	; (80087d8 <_strtod_l+0x938>)
 8008556:	3e01      	subs	r6, #1
 8008558:	429e      	cmp	r6, r3
 800855a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800855e:	f280 80c4 	bge.w	80086ea <_strtod_l+0x84a>
 8008562:	1b9b      	subs	r3, r3, r6
 8008564:	2b1f      	cmp	r3, #31
 8008566:	eba2 0203 	sub.w	r2, r2, r3
 800856a:	f04f 0101 	mov.w	r1, #1
 800856e:	f300 80b0 	bgt.w	80086d2 <_strtod_l+0x832>
 8008572:	fa01 f303 	lsl.w	r3, r1, r3
 8008576:	930e      	str	r3, [sp, #56]	; 0x38
 8008578:	2300      	movs	r3, #0
 800857a:	930d      	str	r3, [sp, #52]	; 0x34
 800857c:	eb0a 0602 	add.w	r6, sl, r2
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	45b2      	cmp	sl, r6
 8008584:	4417      	add	r7, r2
 8008586:	441f      	add	r7, r3
 8008588:	4653      	mov	r3, sl
 800858a:	bfa8      	it	ge
 800858c:	4633      	movge	r3, r6
 800858e:	42bb      	cmp	r3, r7
 8008590:	bfa8      	it	ge
 8008592:	463b      	movge	r3, r7
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfc2      	ittt	gt
 8008598:	1af6      	subgt	r6, r6, r3
 800859a:	1aff      	subgt	r7, r7, r3
 800859c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80085a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dd17      	ble.n	80085d6 <_strtod_l+0x736>
 80085a6:	4659      	mov	r1, fp
 80085a8:	461a      	mov	r2, r3
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7ff f9ae 	bl	800790c <__pow5mult>
 80085b0:	4683      	mov	fp, r0
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f43f aeb8 	beq.w	8008328 <_strtod_l+0x488>
 80085b8:	4601      	mov	r1, r0
 80085ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085bc:	4620      	mov	r0, r4
 80085be:	f7ff f8fb 	bl	80077b8 <__multiply>
 80085c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80085c4:	2800      	cmp	r0, #0
 80085c6:	f43f aeaf 	beq.w	8008328 <_strtod_l+0x488>
 80085ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7fe ffdd 	bl	800758c <_Bfree>
 80085d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d4:	9316      	str	r3, [sp, #88]	; 0x58
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	f300 808c 	bgt.w	80086f4 <_strtod_l+0x854>
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd08      	ble.n	80085f4 <_strtod_l+0x754>
 80085e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085e4:	9905      	ldr	r1, [sp, #20]
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff f990 	bl	800790c <__pow5mult>
 80085ec:	9005      	str	r0, [sp, #20]
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f43f ae9a 	beq.w	8008328 <_strtod_l+0x488>
 80085f4:	2f00      	cmp	r7, #0
 80085f6:	dd08      	ble.n	800860a <_strtod_l+0x76a>
 80085f8:	9905      	ldr	r1, [sp, #20]
 80085fa:	463a      	mov	r2, r7
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff f9df 	bl	80079c0 <__lshift>
 8008602:	9005      	str	r0, [sp, #20]
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f ae8f 	beq.w	8008328 <_strtod_l+0x488>
 800860a:	f1ba 0f00 	cmp.w	sl, #0
 800860e:	dd08      	ble.n	8008622 <_strtod_l+0x782>
 8008610:	4659      	mov	r1, fp
 8008612:	4652      	mov	r2, sl
 8008614:	4620      	mov	r0, r4
 8008616:	f7ff f9d3 	bl	80079c0 <__lshift>
 800861a:	4683      	mov	fp, r0
 800861c:	2800      	cmp	r0, #0
 800861e:	f43f ae83 	beq.w	8008328 <_strtod_l+0x488>
 8008622:	9a05      	ldr	r2, [sp, #20]
 8008624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff fa52 	bl	8007ad0 <__mdiff>
 800862c:	4605      	mov	r5, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	f43f ae7a 	beq.w	8008328 <_strtod_l+0x488>
 8008634:	68c3      	ldr	r3, [r0, #12]
 8008636:	930b      	str	r3, [sp, #44]	; 0x2c
 8008638:	2300      	movs	r3, #0
 800863a:	60c3      	str	r3, [r0, #12]
 800863c:	4659      	mov	r1, fp
 800863e:	f7ff fa2b 	bl	8007a98 <__mcmp>
 8008642:	2800      	cmp	r0, #0
 8008644:	da60      	bge.n	8008708 <_strtod_l+0x868>
 8008646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008648:	ea53 0308 	orrs.w	r3, r3, r8
 800864c:	f040 8084 	bne.w	8008758 <_strtod_l+0x8b8>
 8008650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008654:	2b00      	cmp	r3, #0
 8008656:	d17f      	bne.n	8008758 <_strtod_l+0x8b8>
 8008658:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800865c:	0d1b      	lsrs	r3, r3, #20
 800865e:	051b      	lsls	r3, r3, #20
 8008660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008664:	d978      	bls.n	8008758 <_strtod_l+0x8b8>
 8008666:	696b      	ldr	r3, [r5, #20]
 8008668:	b913      	cbnz	r3, 8008670 <_strtod_l+0x7d0>
 800866a:	692b      	ldr	r3, [r5, #16]
 800866c:	2b01      	cmp	r3, #1
 800866e:	dd73      	ble.n	8008758 <_strtod_l+0x8b8>
 8008670:	4629      	mov	r1, r5
 8008672:	2201      	movs	r2, #1
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff f9a3 	bl	80079c0 <__lshift>
 800867a:	4659      	mov	r1, fp
 800867c:	4605      	mov	r5, r0
 800867e:	f7ff fa0b 	bl	8007a98 <__mcmp>
 8008682:	2800      	cmp	r0, #0
 8008684:	dd68      	ble.n	8008758 <_strtod_l+0x8b8>
 8008686:	9904      	ldr	r1, [sp, #16]
 8008688:	4a54      	ldr	r2, [pc, #336]	; (80087dc <_strtod_l+0x93c>)
 800868a:	464b      	mov	r3, r9
 800868c:	2900      	cmp	r1, #0
 800868e:	f000 8084 	beq.w	800879a <_strtod_l+0x8fa>
 8008692:	ea02 0109 	and.w	r1, r2, r9
 8008696:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800869a:	dc7e      	bgt.n	800879a <_strtod_l+0x8fa>
 800869c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80086a0:	f77f aeb3 	ble.w	800840a <_strtod_l+0x56a>
 80086a4:	4b4e      	ldr	r3, [pc, #312]	; (80087e0 <_strtod_l+0x940>)
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	2200      	movs	r2, #0
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4b4a      	ldr	r3, [pc, #296]	; (80087dc <_strtod_l+0x93c>)
 80086b2:	400b      	ands	r3, r1
 80086b4:	4680      	mov	r8, r0
 80086b6:	4689      	mov	r9, r1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f47f ae3f 	bne.w	800833c <_strtod_l+0x49c>
 80086be:	2322      	movs	r3, #34	; 0x22
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	e63b      	b.n	800833c <_strtod_l+0x49c>
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	ea03 0808 	and.w	r8, r3, r8
 80086d0:	e6e8      	b.n	80084a4 <_strtod_l+0x604>
 80086d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80086d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80086da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80086de:	36e2      	adds	r6, #226	; 0xe2
 80086e0:	fa01 f306 	lsl.w	r3, r1, r6
 80086e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80086e8:	e748      	b.n	800857c <_strtod_l+0x6dc>
 80086ea:	2100      	movs	r1, #0
 80086ec:	2301      	movs	r3, #1
 80086ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80086f2:	e743      	b.n	800857c <_strtod_l+0x6dc>
 80086f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086f6:	4632      	mov	r2, r6
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff f961 	bl	80079c0 <__lshift>
 80086fe:	9016      	str	r0, [sp, #88]	; 0x58
 8008700:	2800      	cmp	r0, #0
 8008702:	f47f af6b 	bne.w	80085dc <_strtod_l+0x73c>
 8008706:	e60f      	b.n	8008328 <_strtod_l+0x488>
 8008708:	46ca      	mov	sl, r9
 800870a:	d171      	bne.n	80087f0 <_strtod_l+0x950>
 800870c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800870e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008712:	b352      	cbz	r2, 800876a <_strtod_l+0x8ca>
 8008714:	4a33      	ldr	r2, [pc, #204]	; (80087e4 <_strtod_l+0x944>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d12a      	bne.n	8008770 <_strtod_l+0x8d0>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	4641      	mov	r1, r8
 800871e:	b1fb      	cbz	r3, 8008760 <_strtod_l+0x8c0>
 8008720:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <_strtod_l+0x93c>)
 8008722:	ea09 0303 	and.w	r3, r9, r3
 8008726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	d81a      	bhi.n	8008766 <_strtod_l+0x8c6>
 8008730:	0d1b      	lsrs	r3, r3, #20
 8008732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	4299      	cmp	r1, r3
 800873c:	d118      	bne.n	8008770 <_strtod_l+0x8d0>
 800873e:	4b2a      	ldr	r3, [pc, #168]	; (80087e8 <_strtod_l+0x948>)
 8008740:	459a      	cmp	sl, r3
 8008742:	d102      	bne.n	800874a <_strtod_l+0x8aa>
 8008744:	3101      	adds	r1, #1
 8008746:	f43f adef 	beq.w	8008328 <_strtod_l+0x488>
 800874a:	4b24      	ldr	r3, [pc, #144]	; (80087dc <_strtod_l+0x93c>)
 800874c:	ea0a 0303 	and.w	r3, sl, r3
 8008750:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008754:	f04f 0800 	mov.w	r8, #0
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1a2      	bne.n	80086a4 <_strtod_l+0x804>
 800875e:	e5ed      	b.n	800833c <_strtod_l+0x49c>
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	e7e9      	b.n	800873a <_strtod_l+0x89a>
 8008766:	4613      	mov	r3, r2
 8008768:	e7e7      	b.n	800873a <_strtod_l+0x89a>
 800876a:	ea53 0308 	orrs.w	r3, r3, r8
 800876e:	d08a      	beq.n	8008686 <_strtod_l+0x7e6>
 8008770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008772:	b1e3      	cbz	r3, 80087ae <_strtod_l+0x90e>
 8008774:	ea13 0f0a 	tst.w	r3, sl
 8008778:	d0ee      	beq.n	8008758 <_strtod_l+0x8b8>
 800877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877c:	9a04      	ldr	r2, [sp, #16]
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	b1c3      	cbz	r3, 80087b6 <_strtod_l+0x916>
 8008784:	f7ff fb6f 	bl	8007e66 <sulp>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	ec51 0b18 	vmov	r0, r1, d8
 8008790:	f7f7 fd84 	bl	800029c <__adddf3>
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	e7de      	b.n	8008758 <_strtod_l+0x8b8>
 800879a:	4013      	ands	r3, r2
 800879c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087a8:	f04f 38ff 	mov.w	r8, #4294967295
 80087ac:	e7d4      	b.n	8008758 <_strtod_l+0x8b8>
 80087ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b0:	ea13 0f08 	tst.w	r3, r8
 80087b4:	e7e0      	b.n	8008778 <_strtod_l+0x8d8>
 80087b6:	f7ff fb56 	bl	8007e66 <sulp>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	ec51 0b18 	vmov	r0, r1, d8
 80087c2:	f7f7 fd69 	bl	8000298 <__aeabi_dsub>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4680      	mov	r8, r0
 80087cc:	4689      	mov	r9, r1
 80087ce:	f7f8 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d0c0      	beq.n	8008758 <_strtod_l+0x8b8>
 80087d6:	e618      	b.n	800840a <_strtod_l+0x56a>
 80087d8:	fffffc02 	.word	0xfffffc02
 80087dc:	7ff00000 	.word	0x7ff00000
 80087e0:	39500000 	.word	0x39500000
 80087e4:	000fffff 	.word	0x000fffff
 80087e8:	7fefffff 	.word	0x7fefffff
 80087ec:	0800a0e8 	.word	0x0800a0e8
 80087f0:	4659      	mov	r1, fp
 80087f2:	4628      	mov	r0, r5
 80087f4:	f7ff fac0 	bl	8007d78 <__ratio>
 80087f8:	ec57 6b10 	vmov	r6, r7, d0
 80087fc:	ee10 0a10 	vmov	r0, s0
 8008800:	2200      	movs	r2, #0
 8008802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008806:	4639      	mov	r1, r7
 8008808:	f7f8 f97a 	bl	8000b00 <__aeabi_dcmple>
 800880c:	2800      	cmp	r0, #0
 800880e:	d071      	beq.n	80088f4 <_strtod_l+0xa54>
 8008810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d17c      	bne.n	8008910 <_strtod_l+0xa70>
 8008816:	f1b8 0f00 	cmp.w	r8, #0
 800881a:	d15a      	bne.n	80088d2 <_strtod_l+0xa32>
 800881c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008820:	2b00      	cmp	r3, #0
 8008822:	d15d      	bne.n	80088e0 <_strtod_l+0xa40>
 8008824:	4b90      	ldr	r3, [pc, #576]	; (8008a68 <_strtod_l+0xbc8>)
 8008826:	2200      	movs	r2, #0
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 f95e 	bl	8000aec <__aeabi_dcmplt>
 8008830:	2800      	cmp	r0, #0
 8008832:	d15c      	bne.n	80088ee <_strtod_l+0xa4e>
 8008834:	4630      	mov	r0, r6
 8008836:	4639      	mov	r1, r7
 8008838:	4b8c      	ldr	r3, [pc, #560]	; (8008a6c <_strtod_l+0xbcc>)
 800883a:	2200      	movs	r2, #0
 800883c:	f7f7 fee4 	bl	8000608 <__aeabi_dmul>
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008848:	9606      	str	r6, [sp, #24]
 800884a:	9307      	str	r3, [sp, #28]
 800884c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008850:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008854:	4b86      	ldr	r3, [pc, #536]	; (8008a70 <_strtod_l+0xbd0>)
 8008856:	ea0a 0303 	and.w	r3, sl, r3
 800885a:	930d      	str	r3, [sp, #52]	; 0x34
 800885c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800885e:	4b85      	ldr	r3, [pc, #532]	; (8008a74 <_strtod_l+0xbd4>)
 8008860:	429a      	cmp	r2, r3
 8008862:	f040 8090 	bne.w	8008986 <_strtod_l+0xae6>
 8008866:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800886a:	ec49 8b10 	vmov	d0, r8, r9
 800886e:	f7ff f9b9 	bl	8007be4 <__ulp>
 8008872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008876:	ec51 0b10 	vmov	r0, r1, d0
 800887a:	f7f7 fec5 	bl	8000608 <__aeabi_dmul>
 800887e:	4642      	mov	r2, r8
 8008880:	464b      	mov	r3, r9
 8008882:	f7f7 fd0b 	bl	800029c <__adddf3>
 8008886:	460b      	mov	r3, r1
 8008888:	4979      	ldr	r1, [pc, #484]	; (8008a70 <_strtod_l+0xbd0>)
 800888a:	4a7b      	ldr	r2, [pc, #492]	; (8008a78 <_strtod_l+0xbd8>)
 800888c:	4019      	ands	r1, r3
 800888e:	4291      	cmp	r1, r2
 8008890:	4680      	mov	r8, r0
 8008892:	d944      	bls.n	800891e <_strtod_l+0xa7e>
 8008894:	ee18 2a90 	vmov	r2, s17
 8008898:	4b78      	ldr	r3, [pc, #480]	; (8008a7c <_strtod_l+0xbdc>)
 800889a:	429a      	cmp	r2, r3
 800889c:	d104      	bne.n	80088a8 <_strtod_l+0xa08>
 800889e:	ee18 3a10 	vmov	r3, s16
 80088a2:	3301      	adds	r3, #1
 80088a4:	f43f ad40 	beq.w	8008328 <_strtod_l+0x488>
 80088a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008a7c <_strtod_l+0xbdc>
 80088ac:	f04f 38ff 	mov.w	r8, #4294967295
 80088b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7fe fe6a 	bl	800758c <_Bfree>
 80088b8:	9905      	ldr	r1, [sp, #20]
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7fe fe66 	bl	800758c <_Bfree>
 80088c0:	4659      	mov	r1, fp
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7fe fe62 	bl	800758c <_Bfree>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7fe fe5e 	bl	800758c <_Bfree>
 80088d0:	e609      	b.n	80084e6 <_strtod_l+0x646>
 80088d2:	f1b8 0f01 	cmp.w	r8, #1
 80088d6:	d103      	bne.n	80088e0 <_strtod_l+0xa40>
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	f43f ad95 	beq.w	800840a <_strtod_l+0x56a>
 80088e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008a38 <_strtod_l+0xb98>
 80088e4:	4f60      	ldr	r7, [pc, #384]	; (8008a68 <_strtod_l+0xbc8>)
 80088e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088ea:	2600      	movs	r6, #0
 80088ec:	e7ae      	b.n	800884c <_strtod_l+0x9ac>
 80088ee:	4f5f      	ldr	r7, [pc, #380]	; (8008a6c <_strtod_l+0xbcc>)
 80088f0:	2600      	movs	r6, #0
 80088f2:	e7a7      	b.n	8008844 <_strtod_l+0x9a4>
 80088f4:	4b5d      	ldr	r3, [pc, #372]	; (8008a6c <_strtod_l+0xbcc>)
 80088f6:	4630      	mov	r0, r6
 80088f8:	4639      	mov	r1, r7
 80088fa:	2200      	movs	r2, #0
 80088fc:	f7f7 fe84 	bl	8000608 <__aeabi_dmul>
 8008900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d09c      	beq.n	8008844 <_strtod_l+0x9a4>
 800890a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800890e:	e79d      	b.n	800884c <_strtod_l+0x9ac>
 8008910:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008a40 <_strtod_l+0xba0>
 8008914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008918:	ec57 6b17 	vmov	r6, r7, d7
 800891c:	e796      	b.n	800884c <_strtod_l+0x9ac>
 800891e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	46ca      	mov	sl, r9
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1c2      	bne.n	80088b0 <_strtod_l+0xa10>
 800892a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800892e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008930:	0d1b      	lsrs	r3, r3, #20
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	429a      	cmp	r2, r3
 8008936:	d1bb      	bne.n	80088b0 <_strtod_l+0xa10>
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f9c4 	bl	8000cc8 <__aeabi_d2lz>
 8008940:	f7f7 fe34 	bl	80005ac <__aeabi_l2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fca4 	bl	8000298 <__aeabi_dsub>
 8008950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008952:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008956:	ea43 0308 	orr.w	r3, r3, r8
 800895a:	4313      	orrs	r3, r2
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	d054      	beq.n	8008a0c <_strtod_l+0xb6c>
 8008962:	a339      	add	r3, pc, #228	; (adr r3, 8008a48 <_strtod_l+0xba8>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f8 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800896c:	2800      	cmp	r0, #0
 800896e:	f47f ace5 	bne.w	800833c <_strtod_l+0x49c>
 8008972:	a337      	add	r3, pc, #220	; (adr r3, 8008a50 <_strtod_l+0xbb0>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f8d4 	bl	8000b28 <__aeabi_dcmpgt>
 8008980:	2800      	cmp	r0, #0
 8008982:	d095      	beq.n	80088b0 <_strtod_l+0xa10>
 8008984:	e4da      	b.n	800833c <_strtod_l+0x49c>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	b333      	cbz	r3, 80089d8 <_strtod_l+0xb38>
 800898a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800898c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008990:	d822      	bhi.n	80089d8 <_strtod_l+0xb38>
 8008992:	a331      	add	r3, pc, #196	; (adr r3, 8008a58 <_strtod_l+0xbb8>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f8 f8b0 	bl	8000b00 <__aeabi_dcmple>
 80089a0:	b1a0      	cbz	r0, 80089cc <_strtod_l+0xb2c>
 80089a2:	4639      	mov	r1, r7
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7f8 f907 	bl	8000bb8 <__aeabi_d2uiz>
 80089aa:	2801      	cmp	r0, #1
 80089ac:	bf38      	it	cc
 80089ae:	2001      	movcc	r0, #1
 80089b0:	f7f7 fdb0 	bl	8000514 <__aeabi_ui2d>
 80089b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	bb23      	cbnz	r3, 8008a06 <_strtod_l+0xb66>
 80089bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089c0:	9010      	str	r0, [sp, #64]	; 0x40
 80089c2:	9311      	str	r3, [sp, #68]	; 0x44
 80089c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80089cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089dc:	eeb0 0a48 	vmov.f32	s0, s16
 80089e0:	eef0 0a68 	vmov.f32	s1, s17
 80089e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80089e8:	f7ff f8fc 	bl	8007be4 <__ulp>
 80089ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089f0:	ec53 2b10 	vmov	r2, r3, d0
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	ec53 2b18 	vmov	r2, r3, d8
 80089fc:	f7f7 fc4e 	bl	800029c <__adddf3>
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	e78d      	b.n	8008922 <_strtod_l+0xa82>
 8008a06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008a0a:	e7db      	b.n	80089c4 <_strtod_l+0xb24>
 8008a0c:	a314      	add	r3, pc, #80	; (adr r3, 8008a60 <_strtod_l+0xbc0>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f8 f86b 	bl	8000aec <__aeabi_dcmplt>
 8008a16:	e7b3      	b.n	8008980 <_strtod_l+0xae0>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	f7ff ba7c 	b.w	8007f1e <_strtod_l+0x7e>
 8008a26:	2a65      	cmp	r2, #101	; 0x65
 8008a28:	f43f ab75 	beq.w	8008116 <_strtod_l+0x276>
 8008a2c:	2a45      	cmp	r2, #69	; 0x45
 8008a2e:	f43f ab72 	beq.w	8008116 <_strtod_l+0x276>
 8008a32:	2301      	movs	r3, #1
 8008a34:	f7ff bbaa 	b.w	800818c <_strtod_l+0x2ec>
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	bff00000 	.word	0xbff00000
 8008a40:	00000000 	.word	0x00000000
 8008a44:	3ff00000 	.word	0x3ff00000
 8008a48:	94a03595 	.word	0x94a03595
 8008a4c:	3fdfffff 	.word	0x3fdfffff
 8008a50:	35afe535 	.word	0x35afe535
 8008a54:	3fe00000 	.word	0x3fe00000
 8008a58:	ffc00000 	.word	0xffc00000
 8008a5c:	41dfffff 	.word	0x41dfffff
 8008a60:	94a03595 	.word	0x94a03595
 8008a64:	3fcfffff 	.word	0x3fcfffff
 8008a68:	3ff00000 	.word	0x3ff00000
 8008a6c:	3fe00000 	.word	0x3fe00000
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	7fe00000 	.word	0x7fe00000
 8008a78:	7c9fffff 	.word	0x7c9fffff
 8008a7c:	7fefffff 	.word	0x7fefffff

08008a80 <_strtod_r>:
 8008a80:	4b01      	ldr	r3, [pc, #4]	; (8008a88 <_strtod_r+0x8>)
 8008a82:	f7ff ba0d 	b.w	8007ea0 <_strtod_l>
 8008a86:	bf00      	nop
 8008a88:	2000006c 	.word	0x2000006c

08008a8c <_strtol_l.constprop.0>:
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a92:	d001      	beq.n	8008a98 <_strtol_l.constprop.0+0xc>
 8008a94:	2b24      	cmp	r3, #36	; 0x24
 8008a96:	d906      	bls.n	8008aa6 <_strtol_l.constprop.0+0x1a>
 8008a98:	f7fd fd7c 	bl	8006594 <__errno>
 8008a9c:	2316      	movs	r3, #22
 8008a9e:	6003      	str	r3, [r0, #0]
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b8c <_strtol_l.constprop.0+0x100>
 8008aaa:	460d      	mov	r5, r1
 8008aac:	462e      	mov	r6, r5
 8008aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ab2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008ab6:	f017 0708 	ands.w	r7, r7, #8
 8008aba:	d1f7      	bne.n	8008aac <_strtol_l.constprop.0+0x20>
 8008abc:	2c2d      	cmp	r4, #45	; 0x2d
 8008abe:	d132      	bne.n	8008b26 <_strtol_l.constprop.0+0x9a>
 8008ac0:	782c      	ldrb	r4, [r5, #0]
 8008ac2:	2701      	movs	r7, #1
 8008ac4:	1cb5      	adds	r5, r6, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d05b      	beq.n	8008b82 <_strtol_l.constprop.0+0xf6>
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d109      	bne.n	8008ae2 <_strtol_l.constprop.0+0x56>
 8008ace:	2c30      	cmp	r4, #48	; 0x30
 8008ad0:	d107      	bne.n	8008ae2 <_strtol_l.constprop.0+0x56>
 8008ad2:	782c      	ldrb	r4, [r5, #0]
 8008ad4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ad8:	2c58      	cmp	r4, #88	; 0x58
 8008ada:	d14d      	bne.n	8008b78 <_strtol_l.constprop.0+0xec>
 8008adc:	786c      	ldrb	r4, [r5, #1]
 8008ade:	2310      	movs	r3, #16
 8008ae0:	3502      	adds	r5, #2
 8008ae2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ae6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aea:	f04f 0e00 	mov.w	lr, #0
 8008aee:	fbb8 f9f3 	udiv	r9, r8, r3
 8008af2:	4676      	mov	r6, lr
 8008af4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008af8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008afc:	f1bc 0f09 	cmp.w	ip, #9
 8008b00:	d816      	bhi.n	8008b30 <_strtol_l.constprop.0+0xa4>
 8008b02:	4664      	mov	r4, ip
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	dd24      	ble.n	8008b52 <_strtol_l.constprop.0+0xc6>
 8008b08:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b0c:	d008      	beq.n	8008b20 <_strtol_l.constprop.0+0x94>
 8008b0e:	45b1      	cmp	r9, r6
 8008b10:	d31c      	bcc.n	8008b4c <_strtol_l.constprop.0+0xc0>
 8008b12:	d101      	bne.n	8008b18 <_strtol_l.constprop.0+0x8c>
 8008b14:	45a2      	cmp	sl, r4
 8008b16:	db19      	blt.n	8008b4c <_strtol_l.constprop.0+0xc0>
 8008b18:	fb06 4603 	mla	r6, r6, r3, r4
 8008b1c:	f04f 0e01 	mov.w	lr, #1
 8008b20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b24:	e7e8      	b.n	8008af8 <_strtol_l.constprop.0+0x6c>
 8008b26:	2c2b      	cmp	r4, #43	; 0x2b
 8008b28:	bf04      	itt	eq
 8008b2a:	782c      	ldrbeq	r4, [r5, #0]
 8008b2c:	1cb5      	addeq	r5, r6, #2
 8008b2e:	e7ca      	b.n	8008ac6 <_strtol_l.constprop.0+0x3a>
 8008b30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b34:	f1bc 0f19 	cmp.w	ip, #25
 8008b38:	d801      	bhi.n	8008b3e <_strtol_l.constprop.0+0xb2>
 8008b3a:	3c37      	subs	r4, #55	; 0x37
 8008b3c:	e7e2      	b.n	8008b04 <_strtol_l.constprop.0+0x78>
 8008b3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b42:	f1bc 0f19 	cmp.w	ip, #25
 8008b46:	d804      	bhi.n	8008b52 <_strtol_l.constprop.0+0xc6>
 8008b48:	3c57      	subs	r4, #87	; 0x57
 8008b4a:	e7db      	b.n	8008b04 <_strtol_l.constprop.0+0x78>
 8008b4c:	f04f 3eff 	mov.w	lr, #4294967295
 8008b50:	e7e6      	b.n	8008b20 <_strtol_l.constprop.0+0x94>
 8008b52:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b56:	d105      	bne.n	8008b64 <_strtol_l.constprop.0+0xd8>
 8008b58:	2322      	movs	r3, #34	; 0x22
 8008b5a:	6003      	str	r3, [r0, #0]
 8008b5c:	4646      	mov	r6, r8
 8008b5e:	b942      	cbnz	r2, 8008b72 <_strtol_l.constprop.0+0xe6>
 8008b60:	4630      	mov	r0, r6
 8008b62:	e79e      	b.n	8008aa2 <_strtol_l.constprop.0+0x16>
 8008b64:	b107      	cbz	r7, 8008b68 <_strtol_l.constprop.0+0xdc>
 8008b66:	4276      	negs	r6, r6
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d0f9      	beq.n	8008b60 <_strtol_l.constprop.0+0xd4>
 8008b6c:	f1be 0f00 	cmp.w	lr, #0
 8008b70:	d000      	beq.n	8008b74 <_strtol_l.constprop.0+0xe8>
 8008b72:	1e69      	subs	r1, r5, #1
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	e7f3      	b.n	8008b60 <_strtol_l.constprop.0+0xd4>
 8008b78:	2430      	movs	r4, #48	; 0x30
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1b1      	bne.n	8008ae2 <_strtol_l.constprop.0+0x56>
 8008b7e:	2308      	movs	r3, #8
 8008b80:	e7af      	b.n	8008ae2 <_strtol_l.constprop.0+0x56>
 8008b82:	2c30      	cmp	r4, #48	; 0x30
 8008b84:	d0a5      	beq.n	8008ad2 <_strtol_l.constprop.0+0x46>
 8008b86:	230a      	movs	r3, #10
 8008b88:	e7ab      	b.n	8008ae2 <_strtol_l.constprop.0+0x56>
 8008b8a:	bf00      	nop
 8008b8c:	0800a111 	.word	0x0800a111

08008b90 <_strtol_r>:
 8008b90:	f7ff bf7c 	b.w	8008a8c <_strtol_l.constprop.0>

08008b94 <__ssputs_r>:
 8008b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	688e      	ldr	r6, [r1, #8]
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	42be      	cmp	r6, r7
 8008b9e:	680b      	ldr	r3, [r1, #0]
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4690      	mov	r8, r2
 8008ba6:	d82c      	bhi.n	8008c02 <__ssputs_r+0x6e>
 8008ba8:	898a      	ldrh	r2, [r1, #12]
 8008baa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bae:	d026      	beq.n	8008bfe <__ssputs_r+0x6a>
 8008bb0:	6965      	ldr	r5, [r4, #20]
 8008bb2:	6909      	ldr	r1, [r1, #16]
 8008bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb8:	eba3 0901 	sub.w	r9, r3, r1
 8008bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc0:	1c7b      	adds	r3, r7, #1
 8008bc2:	444b      	add	r3, r9
 8008bc4:	106d      	asrs	r5, r5, #1
 8008bc6:	429d      	cmp	r5, r3
 8008bc8:	bf38      	it	cc
 8008bca:	461d      	movcc	r5, r3
 8008bcc:	0553      	lsls	r3, r2, #21
 8008bce:	d527      	bpl.n	8008c20 <__ssputs_r+0x8c>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7fe fc0f 	bl	80073f4 <_malloc_r>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	b360      	cbz	r0, 8008c34 <__ssputs_r+0xa0>
 8008bda:	6921      	ldr	r1, [r4, #16]
 8008bdc:	464a      	mov	r2, r9
 8008bde:	f7fd fd05 	bl	80065ec <memcpy>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	6126      	str	r6, [r4, #16]
 8008bf0:	6165      	str	r5, [r4, #20]
 8008bf2:	444e      	add	r6, r9
 8008bf4:	eba5 0509 	sub.w	r5, r5, r9
 8008bf8:	6026      	str	r6, [r4, #0]
 8008bfa:	60a5      	str	r5, [r4, #8]
 8008bfc:	463e      	mov	r6, r7
 8008bfe:	42be      	cmp	r6, r7
 8008c00:	d900      	bls.n	8008c04 <__ssputs_r+0x70>
 8008c02:	463e      	mov	r6, r7
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	4632      	mov	r2, r6
 8008c08:	4641      	mov	r1, r8
 8008c0a:	f000 f9c9 	bl	8008fa0 <memmove>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	1b9b      	subs	r3, r3, r6
 8008c12:	60a3      	str	r3, [r4, #8]
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	4433      	add	r3, r6
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c20:	462a      	mov	r2, r5
 8008c22:	f000 fd9e 	bl	8009762 <_realloc_r>
 8008c26:	4606      	mov	r6, r0
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1e0      	bne.n	8008bee <__ssputs_r+0x5a>
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f7fe fb6c 	bl	800730c <_free_r>
 8008c34:	230c      	movs	r3, #12
 8008c36:	f8ca 3000 	str.w	r3, [sl]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	e7e9      	b.n	8008c1c <__ssputs_r+0x88>

08008c48 <_svfiprintf_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	4698      	mov	r8, r3
 8008c4e:	898b      	ldrh	r3, [r1, #12]
 8008c50:	061b      	lsls	r3, r3, #24
 8008c52:	b09d      	sub	sp, #116	; 0x74
 8008c54:	4607      	mov	r7, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	4614      	mov	r4, r2
 8008c5a:	d50e      	bpl.n	8008c7a <_svfiprintf_r+0x32>
 8008c5c:	690b      	ldr	r3, [r1, #16]
 8008c5e:	b963      	cbnz	r3, 8008c7a <_svfiprintf_r+0x32>
 8008c60:	2140      	movs	r1, #64	; 0x40
 8008c62:	f7fe fbc7 	bl	80073f4 <_malloc_r>
 8008c66:	6028      	str	r0, [r5, #0]
 8008c68:	6128      	str	r0, [r5, #16]
 8008c6a:	b920      	cbnz	r0, 8008c76 <_svfiprintf_r+0x2e>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e0d0      	b.n	8008e18 <_svfiprintf_r+0x1d0>
 8008c76:	2340      	movs	r3, #64	; 0x40
 8008c78:	616b      	str	r3, [r5, #20]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7e:	2320      	movs	r3, #32
 8008c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c88:	2330      	movs	r3, #48	; 0x30
 8008c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e30 <_svfiprintf_r+0x1e8>
 8008c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c92:	f04f 0901 	mov.w	r9, #1
 8008c96:	4623      	mov	r3, r4
 8008c98:	469a      	mov	sl, r3
 8008c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9e:	b10a      	cbz	r2, 8008ca4 <_svfiprintf_r+0x5c>
 8008ca0:	2a25      	cmp	r2, #37	; 0x25
 8008ca2:	d1f9      	bne.n	8008c98 <_svfiprintf_r+0x50>
 8008ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca8:	d00b      	beq.n	8008cc2 <_svfiprintf_r+0x7a>
 8008caa:	465b      	mov	r3, fp
 8008cac:	4622      	mov	r2, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff ff6f 	bl	8008b94 <__ssputs_r>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f000 80a9 	beq.w	8008e0e <_svfiprintf_r+0x1c6>
 8008cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbe:	445a      	add	r2, fp
 8008cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 80a1 	beq.w	8008e0e <_svfiprintf_r+0x1c6>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd6:	f10a 0a01 	add.w	sl, sl, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	9307      	str	r3, [sp, #28]
 8008cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce4:	4654      	mov	r4, sl
 8008ce6:	2205      	movs	r2, #5
 8008ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cec:	4850      	ldr	r0, [pc, #320]	; (8008e30 <_svfiprintf_r+0x1e8>)
 8008cee:	f7f7 fa77 	bl	80001e0 <memchr>
 8008cf2:	9a04      	ldr	r2, [sp, #16]
 8008cf4:	b9d8      	cbnz	r0, 8008d2e <_svfiprintf_r+0xe6>
 8008cf6:	06d0      	lsls	r0, r2, #27
 8008cf8:	bf44      	itt	mi
 8008cfa:	2320      	movmi	r3, #32
 8008cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d00:	0711      	lsls	r1, r2, #28
 8008d02:	bf44      	itt	mi
 8008d04:	232b      	movmi	r3, #43	; 0x2b
 8008d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d015      	beq.n	8008d3e <_svfiprintf_r+0xf6>
 8008d12:	9a07      	ldr	r2, [sp, #28]
 8008d14:	4654      	mov	r4, sl
 8008d16:	2000      	movs	r0, #0
 8008d18:	f04f 0c0a 	mov.w	ip, #10
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d22:	3b30      	subs	r3, #48	; 0x30
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d94d      	bls.n	8008dc4 <_svfiprintf_r+0x17c>
 8008d28:	b1b0      	cbz	r0, 8008d58 <_svfiprintf_r+0x110>
 8008d2a:	9207      	str	r2, [sp, #28]
 8008d2c:	e014      	b.n	8008d58 <_svfiprintf_r+0x110>
 8008d2e:	eba0 0308 	sub.w	r3, r0, r8
 8008d32:	fa09 f303 	lsl.w	r3, r9, r3
 8008d36:	4313      	orrs	r3, r2
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	46a2      	mov	sl, r4
 8008d3c:	e7d2      	b.n	8008ce4 <_svfiprintf_r+0x9c>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	1d19      	adds	r1, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	9103      	str	r1, [sp, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfbb      	ittet	lt
 8008d4a:	425b      	neglt	r3, r3
 8008d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d50:	9307      	strge	r3, [sp, #28]
 8008d52:	9307      	strlt	r3, [sp, #28]
 8008d54:	bfb8      	it	lt
 8008d56:	9204      	strlt	r2, [sp, #16]
 8008d58:	7823      	ldrb	r3, [r4, #0]
 8008d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5c:	d10c      	bne.n	8008d78 <_svfiprintf_r+0x130>
 8008d5e:	7863      	ldrb	r3, [r4, #1]
 8008d60:	2b2a      	cmp	r3, #42	; 0x2a
 8008d62:	d134      	bne.n	8008dce <_svfiprintf_r+0x186>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	9203      	str	r2, [sp, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bfb8      	it	lt
 8008d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d74:	3402      	adds	r4, #2
 8008d76:	9305      	str	r3, [sp, #20]
 8008d78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e40 <_svfiprintf_r+0x1f8>
 8008d7c:	7821      	ldrb	r1, [r4, #0]
 8008d7e:	2203      	movs	r2, #3
 8008d80:	4650      	mov	r0, sl
 8008d82:	f7f7 fa2d 	bl	80001e0 <memchr>
 8008d86:	b138      	cbz	r0, 8008d98 <_svfiprintf_r+0x150>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	eba0 000a 	sub.w	r0, r0, sl
 8008d8e:	2240      	movs	r2, #64	; 0x40
 8008d90:	4082      	lsls	r2, r0
 8008d92:	4313      	orrs	r3, r2
 8008d94:	3401      	adds	r4, #1
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9c:	4825      	ldr	r0, [pc, #148]	; (8008e34 <_svfiprintf_r+0x1ec>)
 8008d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da2:	2206      	movs	r2, #6
 8008da4:	f7f7 fa1c 	bl	80001e0 <memchr>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d038      	beq.n	8008e1e <_svfiprintf_r+0x1d6>
 8008dac:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <_svfiprintf_r+0x1f0>)
 8008dae:	bb1b      	cbnz	r3, 8008df8 <_svfiprintf_r+0x1b0>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	3307      	adds	r3, #7
 8008db4:	f023 0307 	bic.w	r3, r3, #7
 8008db8:	3308      	adds	r3, #8
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbe:	4433      	add	r3, r6
 8008dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc2:	e768      	b.n	8008c96 <_svfiprintf_r+0x4e>
 8008dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc8:	460c      	mov	r4, r1
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7a6      	b.n	8008d1c <_svfiprintf_r+0xd4>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	3401      	adds	r4, #1
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f04f 0c0a 	mov.w	ip, #10
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de0:	3a30      	subs	r2, #48	; 0x30
 8008de2:	2a09      	cmp	r2, #9
 8008de4:	d903      	bls.n	8008dee <_svfiprintf_r+0x1a6>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0c6      	beq.n	8008d78 <_svfiprintf_r+0x130>
 8008dea:	9105      	str	r1, [sp, #20]
 8008dec:	e7c4      	b.n	8008d78 <_svfiprintf_r+0x130>
 8008dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df2:	4604      	mov	r4, r0
 8008df4:	2301      	movs	r3, #1
 8008df6:	e7f0      	b.n	8008dda <_svfiprintf_r+0x192>
 8008df8:	ab03      	add	r3, sp, #12
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <_svfiprintf_r+0x1f4>)
 8008e00:	a904      	add	r1, sp, #16
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7fc fc6a 	bl	80056dc <_printf_float>
 8008e08:	1c42      	adds	r2, r0, #1
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	d1d6      	bne.n	8008dbc <_svfiprintf_r+0x174>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	065b      	lsls	r3, r3, #25
 8008e12:	f53f af2d 	bmi.w	8008c70 <_svfiprintf_r+0x28>
 8008e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e18:	b01d      	add	sp, #116	; 0x74
 8008e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <_svfiprintf_r+0x1f4>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7fc fefb 	bl	8005c24 <_printf_i>
 8008e2e:	e7eb      	b.n	8008e08 <_svfiprintf_r+0x1c0>
 8008e30:	0800a211 	.word	0x0800a211
 8008e34:	0800a21b 	.word	0x0800a21b
 8008e38:	080056dd 	.word	0x080056dd
 8008e3c:	08008b95 	.word	0x08008b95
 8008e40:	0800a217 	.word	0x0800a217

08008e44 <__sflush_r>:
 8008e44:	898a      	ldrh	r2, [r1, #12]
 8008e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	0710      	lsls	r0, r2, #28
 8008e4e:	460c      	mov	r4, r1
 8008e50:	d458      	bmi.n	8008f04 <__sflush_r+0xc0>
 8008e52:	684b      	ldr	r3, [r1, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dc05      	bgt.n	8008e64 <__sflush_r+0x20>
 8008e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dc02      	bgt.n	8008e64 <__sflush_r+0x20>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d0f9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e70:	682f      	ldr	r7, [r5, #0]
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	d032      	beq.n	8008ede <__sflush_r+0x9a>
 8008e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	075a      	lsls	r2, r3, #29
 8008e7e:	d505      	bpl.n	8008e8c <__sflush_r+0x48>
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e86:	b10b      	cbz	r3, 8008e8c <__sflush_r+0x48>
 8008e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e8a:	1ac0      	subs	r0, r0, r3
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e92:	6a21      	ldr	r1, [r4, #32]
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b0      	blx	r6
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	d106      	bne.n	8008eac <__sflush_r+0x68>
 8008e9e:	6829      	ldr	r1, [r5, #0]
 8008ea0:	291d      	cmp	r1, #29
 8008ea2:	d82b      	bhi.n	8008efc <__sflush_r+0xb8>
 8008ea4:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <__sflush_r+0x108>)
 8008ea6:	410a      	asrs	r2, r1
 8008ea8:	07d6      	lsls	r6, r2, #31
 8008eaa:	d427      	bmi.n	8008efc <__sflush_r+0xb8>
 8008eac:	2200      	movs	r2, #0
 8008eae:	6062      	str	r2, [r4, #4]
 8008eb0:	04d9      	lsls	r1, r3, #19
 8008eb2:	6922      	ldr	r2, [r4, #16]
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	d504      	bpl.n	8008ec2 <__sflush_r+0x7e>
 8008eb8:	1c42      	adds	r2, r0, #1
 8008eba:	d101      	bne.n	8008ec0 <__sflush_r+0x7c>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b903      	cbnz	r3, 8008ec2 <__sflush_r+0x7e>
 8008ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8008ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec4:	602f      	str	r7, [r5, #0]
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	d0c9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	d002      	beq.n	8008ed8 <__sflush_r+0x94>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7fe fa1a 	bl	800730c <_free_r>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	6360      	str	r0, [r4, #52]	; 0x34
 8008edc:	e7c0      	b.n	8008e60 <__sflush_r+0x1c>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b0      	blx	r6
 8008ee4:	1c41      	adds	r1, r0, #1
 8008ee6:	d1c8      	bne.n	8008e7a <__sflush_r+0x36>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0c5      	beq.n	8008e7a <__sflush_r+0x36>
 8008eee:	2b1d      	cmp	r3, #29
 8008ef0:	d001      	beq.n	8008ef6 <__sflush_r+0xb2>
 8008ef2:	2b16      	cmp	r3, #22
 8008ef4:	d101      	bne.n	8008efa <__sflush_r+0xb6>
 8008ef6:	602f      	str	r7, [r5, #0]
 8008ef8:	e7b1      	b.n	8008e5e <__sflush_r+0x1a>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	e7ad      	b.n	8008e60 <__sflush_r+0x1c>
 8008f04:	690f      	ldr	r7, [r1, #16]
 8008f06:	2f00      	cmp	r7, #0
 8008f08:	d0a9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008f0a:	0793      	lsls	r3, r2, #30
 8008f0c:	680e      	ldr	r6, [r1, #0]
 8008f0e:	bf08      	it	eq
 8008f10:	694b      	ldreq	r3, [r1, #20]
 8008f12:	600f      	str	r7, [r1, #0]
 8008f14:	bf18      	it	ne
 8008f16:	2300      	movne	r3, #0
 8008f18:	eba6 0807 	sub.w	r8, r6, r7
 8008f1c:	608b      	str	r3, [r1, #8]
 8008f1e:	f1b8 0f00 	cmp.w	r8, #0
 8008f22:	dd9c      	ble.n	8008e5e <__sflush_r+0x1a>
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f28:	4643      	mov	r3, r8
 8008f2a:	463a      	mov	r2, r7
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dc06      	bgt.n	8008f42 <__sflush_r+0xfe>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e78e      	b.n	8008e60 <__sflush_r+0x1c>
 8008f42:	4407      	add	r7, r0
 8008f44:	eba8 0800 	sub.w	r8, r8, r0
 8008f48:	e7e9      	b.n	8008f1e <__sflush_r+0xda>
 8008f4a:	bf00      	nop
 8008f4c:	dfbffffe 	.word	0xdfbffffe

08008f50 <_fflush_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	690b      	ldr	r3, [r1, #16]
 8008f54:	4605      	mov	r5, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b913      	cbnz	r3, 8008f60 <_fflush_r+0x10>
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	b118      	cbz	r0, 8008f6a <_fflush_r+0x1a>
 8008f62:	6a03      	ldr	r3, [r0, #32]
 8008f64:	b90b      	cbnz	r3, 8008f6a <_fflush_r+0x1a>
 8008f66:	f7fd fa09 	bl	800637c <__sinit>
 8008f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f3      	beq.n	8008f5a <_fflush_r+0xa>
 8008f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f74:	07d0      	lsls	r0, r2, #31
 8008f76:	d404      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f78:	0599      	lsls	r1, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7e:	f7fd fb33 	bl	80065e8 <__retarget_lock_acquire_recursive>
 8008f82:	4628      	mov	r0, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7ff ff5d 	bl	8008e44 <__sflush_r>
 8008f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f8c:	07da      	lsls	r2, r3, #31
 8008f8e:	4605      	mov	r5, r0
 8008f90:	d4e4      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d4e1      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7fd fb26 	bl	80065ea <__retarget_lock_release_recursive>
 8008f9e:	e7dd      	b.n	8008f5c <_fflush_r+0xc>

08008fa0 <memmove>:
 8008fa0:	4288      	cmp	r0, r1
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	eb01 0402 	add.w	r4, r1, r2
 8008fa8:	d902      	bls.n	8008fb0 <memmove+0x10>
 8008faa:	4284      	cmp	r4, r0
 8008fac:	4623      	mov	r3, r4
 8008fae:	d807      	bhi.n	8008fc0 <memmove+0x20>
 8008fb0:	1e43      	subs	r3, r0, #1
 8008fb2:	42a1      	cmp	r1, r4
 8008fb4:	d008      	beq.n	8008fc8 <memmove+0x28>
 8008fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fbe:	e7f8      	b.n	8008fb2 <memmove+0x12>
 8008fc0:	4402      	add	r2, r0
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	d100      	bne.n	8008fca <memmove+0x2a>
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fd2:	e7f7      	b.n	8008fc4 <memmove+0x24>

08008fd4 <strncmp>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	b16a      	cbz	r2, 8008ff4 <strncmp+0x20>
 8008fd8:	3901      	subs	r1, #1
 8008fda:	1884      	adds	r4, r0, r2
 8008fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d103      	bne.n	8008ff0 <strncmp+0x1c>
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d001      	beq.n	8008ff0 <strncmp+0x1c>
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d1f5      	bne.n	8008fdc <strncmp+0x8>
 8008ff0:	1ad0      	subs	r0, r2, r3
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	e7fc      	b.n	8008ff2 <strncmp+0x1e>

08008ff8 <_sbrk_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d06      	ldr	r5, [pc, #24]	; (8009014 <_sbrk_r+0x1c>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7f8 fbcc 	bl	80017a0 <_sbrk>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_sbrk_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_sbrk_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	200050a0 	.word	0x200050a0

08009018 <nan>:
 8009018:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009020 <nan+0x8>
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	00000000 	.word	0x00000000
 8009024:	7ff80000 	.word	0x7ff80000

08009028 <__assert_func>:
 8009028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800902a:	4614      	mov	r4, r2
 800902c:	461a      	mov	r2, r3
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <__assert_func+0x2c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4605      	mov	r5, r0
 8009034:	68d8      	ldr	r0, [r3, #12]
 8009036:	b14c      	cbz	r4, 800904c <__assert_func+0x24>
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <__assert_func+0x30>)
 800903a:	9100      	str	r1, [sp, #0]
 800903c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009040:	4906      	ldr	r1, [pc, #24]	; (800905c <__assert_func+0x34>)
 8009042:	462b      	mov	r3, r5
 8009044:	f000 fbca 	bl	80097dc <fiprintf>
 8009048:	f000 fbda 	bl	8009800 <abort>
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <__assert_func+0x38>)
 800904e:	461c      	mov	r4, r3
 8009050:	e7f3      	b.n	800903a <__assert_func+0x12>
 8009052:	bf00      	nop
 8009054:	20000068 	.word	0x20000068
 8009058:	0800a22a 	.word	0x0800a22a
 800905c:	0800a237 	.word	0x0800a237
 8009060:	0800a265 	.word	0x0800a265

08009064 <_calloc_r>:
 8009064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009066:	fba1 2402 	umull	r2, r4, r1, r2
 800906a:	b94c      	cbnz	r4, 8009080 <_calloc_r+0x1c>
 800906c:	4611      	mov	r1, r2
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	f7fe f9c0 	bl	80073f4 <_malloc_r>
 8009074:	9a01      	ldr	r2, [sp, #4]
 8009076:	4605      	mov	r5, r0
 8009078:	b930      	cbnz	r0, 8009088 <_calloc_r+0x24>
 800907a:	4628      	mov	r0, r5
 800907c:	b003      	add	sp, #12
 800907e:	bd30      	pop	{r4, r5, pc}
 8009080:	220c      	movs	r2, #12
 8009082:	6002      	str	r2, [r0, #0]
 8009084:	2500      	movs	r5, #0
 8009086:	e7f8      	b.n	800907a <_calloc_r+0x16>
 8009088:	4621      	mov	r1, r4
 800908a:	f7fd fa31 	bl	80064f0 <memset>
 800908e:	e7f4      	b.n	800907a <_calloc_r+0x16>

08009090 <rshift>:
 8009090:	6903      	ldr	r3, [r0, #16]
 8009092:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800909a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800909e:	f100 0414 	add.w	r4, r0, #20
 80090a2:	dd45      	ble.n	8009130 <rshift+0xa0>
 80090a4:	f011 011f 	ands.w	r1, r1, #31
 80090a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090b0:	d10c      	bne.n	80090cc <rshift+0x3c>
 80090b2:	f100 0710 	add.w	r7, r0, #16
 80090b6:	4629      	mov	r1, r5
 80090b8:	42b1      	cmp	r1, r6
 80090ba:	d334      	bcc.n	8009126 <rshift+0x96>
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	1eea      	subs	r2, r5, #3
 80090c2:	4296      	cmp	r6, r2
 80090c4:	bf38      	it	cc
 80090c6:	2300      	movcc	r3, #0
 80090c8:	4423      	add	r3, r4
 80090ca:	e015      	b.n	80090f8 <rshift+0x68>
 80090cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090d0:	f1c1 0820 	rsb	r8, r1, #32
 80090d4:	40cf      	lsrs	r7, r1
 80090d6:	f105 0e04 	add.w	lr, r5, #4
 80090da:	46a1      	mov	r9, r4
 80090dc:	4576      	cmp	r6, lr
 80090de:	46f4      	mov	ip, lr
 80090e0:	d815      	bhi.n	800910e <rshift+0x7e>
 80090e2:	1a9a      	subs	r2, r3, r2
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	3a04      	subs	r2, #4
 80090e8:	3501      	adds	r5, #1
 80090ea:	42ae      	cmp	r6, r5
 80090ec:	bf38      	it	cc
 80090ee:	2200      	movcc	r2, #0
 80090f0:	18a3      	adds	r3, r4, r2
 80090f2:	50a7      	str	r7, [r4, r2]
 80090f4:	b107      	cbz	r7, 80090f8 <rshift+0x68>
 80090f6:	3304      	adds	r3, #4
 80090f8:	1b1a      	subs	r2, r3, r4
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009100:	bf08      	it	eq
 8009102:	2300      	moveq	r3, #0
 8009104:	6102      	str	r2, [r0, #16]
 8009106:	bf08      	it	eq
 8009108:	6143      	streq	r3, [r0, #20]
 800910a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910e:	f8dc c000 	ldr.w	ip, [ip]
 8009112:	fa0c fc08 	lsl.w	ip, ip, r8
 8009116:	ea4c 0707 	orr.w	r7, ip, r7
 800911a:	f849 7b04 	str.w	r7, [r9], #4
 800911e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009122:	40cf      	lsrs	r7, r1
 8009124:	e7da      	b.n	80090dc <rshift+0x4c>
 8009126:	f851 cb04 	ldr.w	ip, [r1], #4
 800912a:	f847 cf04 	str.w	ip, [r7, #4]!
 800912e:	e7c3      	b.n	80090b8 <rshift+0x28>
 8009130:	4623      	mov	r3, r4
 8009132:	e7e1      	b.n	80090f8 <rshift+0x68>

08009134 <__hexdig_fun>:
 8009134:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009138:	2b09      	cmp	r3, #9
 800913a:	d802      	bhi.n	8009142 <__hexdig_fun+0xe>
 800913c:	3820      	subs	r0, #32
 800913e:	b2c0      	uxtb	r0, r0
 8009140:	4770      	bx	lr
 8009142:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009146:	2b05      	cmp	r3, #5
 8009148:	d801      	bhi.n	800914e <__hexdig_fun+0x1a>
 800914a:	3847      	subs	r0, #71	; 0x47
 800914c:	e7f7      	b.n	800913e <__hexdig_fun+0xa>
 800914e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009152:	2b05      	cmp	r3, #5
 8009154:	d801      	bhi.n	800915a <__hexdig_fun+0x26>
 8009156:	3827      	subs	r0, #39	; 0x27
 8009158:	e7f1      	b.n	800913e <__hexdig_fun+0xa>
 800915a:	2000      	movs	r0, #0
 800915c:	4770      	bx	lr
	...

08009160 <__gethex>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	4617      	mov	r7, r2
 8009166:	680a      	ldr	r2, [r1, #0]
 8009168:	b085      	sub	sp, #20
 800916a:	f102 0b02 	add.w	fp, r2, #2
 800916e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009172:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009176:	4681      	mov	r9, r0
 8009178:	468a      	mov	sl, r1
 800917a:	9302      	str	r3, [sp, #8]
 800917c:	32fe      	adds	r2, #254	; 0xfe
 800917e:	eb02 030b 	add.w	r3, r2, fp
 8009182:	46d8      	mov	r8, fp
 8009184:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	2830      	cmp	r0, #48	; 0x30
 800918c:	d0f7      	beq.n	800917e <__gethex+0x1e>
 800918e:	f7ff ffd1 	bl	8009134 <__hexdig_fun>
 8009192:	4604      	mov	r4, r0
 8009194:	2800      	cmp	r0, #0
 8009196:	d138      	bne.n	800920a <__gethex+0xaa>
 8009198:	49a7      	ldr	r1, [pc, #668]	; (8009438 <__gethex+0x2d8>)
 800919a:	2201      	movs	r2, #1
 800919c:	4640      	mov	r0, r8
 800919e:	f7ff ff19 	bl	8008fd4 <strncmp>
 80091a2:	4606      	mov	r6, r0
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d169      	bne.n	800927c <__gethex+0x11c>
 80091a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80091ac:	465d      	mov	r5, fp
 80091ae:	f7ff ffc1 	bl	8009134 <__hexdig_fun>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d064      	beq.n	8009280 <__gethex+0x120>
 80091b6:	465a      	mov	r2, fp
 80091b8:	7810      	ldrb	r0, [r2, #0]
 80091ba:	2830      	cmp	r0, #48	; 0x30
 80091bc:	4690      	mov	r8, r2
 80091be:	f102 0201 	add.w	r2, r2, #1
 80091c2:	d0f9      	beq.n	80091b8 <__gethex+0x58>
 80091c4:	f7ff ffb6 	bl	8009134 <__hexdig_fun>
 80091c8:	2301      	movs	r3, #1
 80091ca:	fab0 f480 	clz	r4, r0
 80091ce:	0964      	lsrs	r4, r4, #5
 80091d0:	465e      	mov	r6, fp
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	4642      	mov	r2, r8
 80091d6:	4615      	mov	r5, r2
 80091d8:	3201      	adds	r2, #1
 80091da:	7828      	ldrb	r0, [r5, #0]
 80091dc:	f7ff ffaa 	bl	8009134 <__hexdig_fun>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1f8      	bne.n	80091d6 <__gethex+0x76>
 80091e4:	4994      	ldr	r1, [pc, #592]	; (8009438 <__gethex+0x2d8>)
 80091e6:	2201      	movs	r2, #1
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff fef3 	bl	8008fd4 <strncmp>
 80091ee:	b978      	cbnz	r0, 8009210 <__gethex+0xb0>
 80091f0:	b946      	cbnz	r6, 8009204 <__gethex+0xa4>
 80091f2:	1c6e      	adds	r6, r5, #1
 80091f4:	4632      	mov	r2, r6
 80091f6:	4615      	mov	r5, r2
 80091f8:	3201      	adds	r2, #1
 80091fa:	7828      	ldrb	r0, [r5, #0]
 80091fc:	f7ff ff9a 	bl	8009134 <__hexdig_fun>
 8009200:	2800      	cmp	r0, #0
 8009202:	d1f8      	bne.n	80091f6 <__gethex+0x96>
 8009204:	1b73      	subs	r3, r6, r5
 8009206:	009e      	lsls	r6, r3, #2
 8009208:	e004      	b.n	8009214 <__gethex+0xb4>
 800920a:	2400      	movs	r4, #0
 800920c:	4626      	mov	r6, r4
 800920e:	e7e1      	b.n	80091d4 <__gethex+0x74>
 8009210:	2e00      	cmp	r6, #0
 8009212:	d1f7      	bne.n	8009204 <__gethex+0xa4>
 8009214:	782b      	ldrb	r3, [r5, #0]
 8009216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800921a:	2b50      	cmp	r3, #80	; 0x50
 800921c:	d13d      	bne.n	800929a <__gethex+0x13a>
 800921e:	786b      	ldrb	r3, [r5, #1]
 8009220:	2b2b      	cmp	r3, #43	; 0x2b
 8009222:	d02f      	beq.n	8009284 <__gethex+0x124>
 8009224:	2b2d      	cmp	r3, #45	; 0x2d
 8009226:	d031      	beq.n	800928c <__gethex+0x12c>
 8009228:	1c69      	adds	r1, r5, #1
 800922a:	f04f 0b00 	mov.w	fp, #0
 800922e:	7808      	ldrb	r0, [r1, #0]
 8009230:	f7ff ff80 	bl	8009134 <__hexdig_fun>
 8009234:	1e42      	subs	r2, r0, #1
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	2a18      	cmp	r2, #24
 800923a:	d82e      	bhi.n	800929a <__gethex+0x13a>
 800923c:	f1a0 0210 	sub.w	r2, r0, #16
 8009240:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009244:	f7ff ff76 	bl	8009134 <__hexdig_fun>
 8009248:	f100 3cff 	add.w	ip, r0, #4294967295
 800924c:	fa5f fc8c 	uxtb.w	ip, ip
 8009250:	f1bc 0f18 	cmp.w	ip, #24
 8009254:	d91d      	bls.n	8009292 <__gethex+0x132>
 8009256:	f1bb 0f00 	cmp.w	fp, #0
 800925a:	d000      	beq.n	800925e <__gethex+0xfe>
 800925c:	4252      	negs	r2, r2
 800925e:	4416      	add	r6, r2
 8009260:	f8ca 1000 	str.w	r1, [sl]
 8009264:	b1dc      	cbz	r4, 800929e <__gethex+0x13e>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf14      	ite	ne
 800926c:	f04f 0800 	movne.w	r8, #0
 8009270:	f04f 0806 	moveq.w	r8, #6
 8009274:	4640      	mov	r0, r8
 8009276:	b005      	add	sp, #20
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	4645      	mov	r5, r8
 800927e:	4626      	mov	r6, r4
 8009280:	2401      	movs	r4, #1
 8009282:	e7c7      	b.n	8009214 <__gethex+0xb4>
 8009284:	f04f 0b00 	mov.w	fp, #0
 8009288:	1ca9      	adds	r1, r5, #2
 800928a:	e7d0      	b.n	800922e <__gethex+0xce>
 800928c:	f04f 0b01 	mov.w	fp, #1
 8009290:	e7fa      	b.n	8009288 <__gethex+0x128>
 8009292:	230a      	movs	r3, #10
 8009294:	fb03 0002 	mla	r0, r3, r2, r0
 8009298:	e7d0      	b.n	800923c <__gethex+0xdc>
 800929a:	4629      	mov	r1, r5
 800929c:	e7e0      	b.n	8009260 <__gethex+0x100>
 800929e:	eba5 0308 	sub.w	r3, r5, r8
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4621      	mov	r1, r4
 80092a6:	2b07      	cmp	r3, #7
 80092a8:	dc0a      	bgt.n	80092c0 <__gethex+0x160>
 80092aa:	4648      	mov	r0, r9
 80092ac:	f7fe f92e 	bl	800750c <_Balloc>
 80092b0:	4604      	mov	r4, r0
 80092b2:	b940      	cbnz	r0, 80092c6 <__gethex+0x166>
 80092b4:	4b61      	ldr	r3, [pc, #388]	; (800943c <__gethex+0x2dc>)
 80092b6:	4602      	mov	r2, r0
 80092b8:	21e4      	movs	r1, #228	; 0xe4
 80092ba:	4861      	ldr	r0, [pc, #388]	; (8009440 <__gethex+0x2e0>)
 80092bc:	f7ff feb4 	bl	8009028 <__assert_func>
 80092c0:	3101      	adds	r1, #1
 80092c2:	105b      	asrs	r3, r3, #1
 80092c4:	e7ef      	b.n	80092a6 <__gethex+0x146>
 80092c6:	f100 0a14 	add.w	sl, r0, #20
 80092ca:	2300      	movs	r3, #0
 80092cc:	495a      	ldr	r1, [pc, #360]	; (8009438 <__gethex+0x2d8>)
 80092ce:	f8cd a004 	str.w	sl, [sp, #4]
 80092d2:	469b      	mov	fp, r3
 80092d4:	45a8      	cmp	r8, r5
 80092d6:	d342      	bcc.n	800935e <__gethex+0x1fe>
 80092d8:	9801      	ldr	r0, [sp, #4]
 80092da:	f840 bb04 	str.w	fp, [r0], #4
 80092de:	eba0 000a 	sub.w	r0, r0, sl
 80092e2:	1080      	asrs	r0, r0, #2
 80092e4:	6120      	str	r0, [r4, #16]
 80092e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80092ea:	4658      	mov	r0, fp
 80092ec:	f7fe fa00 	bl	80076f0 <__hi0bits>
 80092f0:	683d      	ldr	r5, [r7, #0]
 80092f2:	eba8 0000 	sub.w	r0, r8, r0
 80092f6:	42a8      	cmp	r0, r5
 80092f8:	dd59      	ble.n	80093ae <__gethex+0x24e>
 80092fa:	eba0 0805 	sub.w	r8, r0, r5
 80092fe:	4641      	mov	r1, r8
 8009300:	4620      	mov	r0, r4
 8009302:	f7fe fd8f 	bl	8007e24 <__any_on>
 8009306:	4683      	mov	fp, r0
 8009308:	b1b8      	cbz	r0, 800933a <__gethex+0x1da>
 800930a:	f108 33ff 	add.w	r3, r8, #4294967295
 800930e:	1159      	asrs	r1, r3, #5
 8009310:	f003 021f 	and.w	r2, r3, #31
 8009314:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009318:	f04f 0b01 	mov.w	fp, #1
 800931c:	fa0b f202 	lsl.w	r2, fp, r2
 8009320:	420a      	tst	r2, r1
 8009322:	d00a      	beq.n	800933a <__gethex+0x1da>
 8009324:	455b      	cmp	r3, fp
 8009326:	dd06      	ble.n	8009336 <__gethex+0x1d6>
 8009328:	f1a8 0102 	sub.w	r1, r8, #2
 800932c:	4620      	mov	r0, r4
 800932e:	f7fe fd79 	bl	8007e24 <__any_on>
 8009332:	2800      	cmp	r0, #0
 8009334:	d138      	bne.n	80093a8 <__gethex+0x248>
 8009336:	f04f 0b02 	mov.w	fp, #2
 800933a:	4641      	mov	r1, r8
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff fea7 	bl	8009090 <rshift>
 8009342:	4446      	add	r6, r8
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	42b3      	cmp	r3, r6
 8009348:	da41      	bge.n	80093ce <__gethex+0x26e>
 800934a:	4621      	mov	r1, r4
 800934c:	4648      	mov	r0, r9
 800934e:	f7fe f91d 	bl	800758c <_Bfree>
 8009352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009354:	2300      	movs	r3, #0
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800935c:	e78a      	b.n	8009274 <__gethex+0x114>
 800935e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009362:	2a2e      	cmp	r2, #46	; 0x2e
 8009364:	d014      	beq.n	8009390 <__gethex+0x230>
 8009366:	2b20      	cmp	r3, #32
 8009368:	d106      	bne.n	8009378 <__gethex+0x218>
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	f843 bb04 	str.w	fp, [r3], #4
 8009370:	f04f 0b00 	mov.w	fp, #0
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	465b      	mov	r3, fp
 8009378:	7828      	ldrb	r0, [r5, #0]
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	f7ff feda 	bl	8009134 <__hexdig_fun>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	f000 000f 	and.w	r0, r0, #15
 8009386:	4098      	lsls	r0, r3
 8009388:	ea4b 0b00 	orr.w	fp, fp, r0
 800938c:	3304      	adds	r3, #4
 800938e:	e7a1      	b.n	80092d4 <__gethex+0x174>
 8009390:	45a8      	cmp	r8, r5
 8009392:	d8e8      	bhi.n	8009366 <__gethex+0x206>
 8009394:	2201      	movs	r2, #1
 8009396:	4628      	mov	r0, r5
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	f7ff fe1b 	bl	8008fd4 <strncmp>
 800939e:	4926      	ldr	r1, [pc, #152]	; (8009438 <__gethex+0x2d8>)
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d1df      	bne.n	8009366 <__gethex+0x206>
 80093a6:	e795      	b.n	80092d4 <__gethex+0x174>
 80093a8:	f04f 0b03 	mov.w	fp, #3
 80093ac:	e7c5      	b.n	800933a <__gethex+0x1da>
 80093ae:	da0b      	bge.n	80093c8 <__gethex+0x268>
 80093b0:	eba5 0800 	sub.w	r8, r5, r0
 80093b4:	4621      	mov	r1, r4
 80093b6:	4642      	mov	r2, r8
 80093b8:	4648      	mov	r0, r9
 80093ba:	f7fe fb01 	bl	80079c0 <__lshift>
 80093be:	eba6 0608 	sub.w	r6, r6, r8
 80093c2:	4604      	mov	r4, r0
 80093c4:	f100 0a14 	add.w	sl, r0, #20
 80093c8:	f04f 0b00 	mov.w	fp, #0
 80093cc:	e7ba      	b.n	8009344 <__gethex+0x1e4>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	42b3      	cmp	r3, r6
 80093d2:	dd73      	ble.n	80094bc <__gethex+0x35c>
 80093d4:	1b9e      	subs	r6, r3, r6
 80093d6:	42b5      	cmp	r5, r6
 80093d8:	dc34      	bgt.n	8009444 <__gethex+0x2e4>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d023      	beq.n	8009428 <__gethex+0x2c8>
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d025      	beq.n	8009430 <__gethex+0x2d0>
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d115      	bne.n	8009414 <__gethex+0x2b4>
 80093e8:	42b5      	cmp	r5, r6
 80093ea:	d113      	bne.n	8009414 <__gethex+0x2b4>
 80093ec:	2d01      	cmp	r5, #1
 80093ee:	d10b      	bne.n	8009408 <__gethex+0x2a8>
 80093f0:	9a02      	ldr	r2, [sp, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	2301      	movs	r3, #1
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	f8ca 3000 	str.w	r3, [sl]
 80093fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009400:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009404:	601c      	str	r4, [r3, #0]
 8009406:	e735      	b.n	8009274 <__gethex+0x114>
 8009408:	1e69      	subs	r1, r5, #1
 800940a:	4620      	mov	r0, r4
 800940c:	f7fe fd0a 	bl	8007e24 <__any_on>
 8009410:	2800      	cmp	r0, #0
 8009412:	d1ed      	bne.n	80093f0 <__gethex+0x290>
 8009414:	4621      	mov	r1, r4
 8009416:	4648      	mov	r0, r9
 8009418:	f7fe f8b8 	bl	800758c <_Bfree>
 800941c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800941e:	2300      	movs	r3, #0
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009426:	e725      	b.n	8009274 <__gethex+0x114>
 8009428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f2      	bne.n	8009414 <__gethex+0x2b4>
 800942e:	e7df      	b.n	80093f0 <__gethex+0x290>
 8009430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1dc      	bne.n	80093f0 <__gethex+0x290>
 8009436:	e7ed      	b.n	8009414 <__gethex+0x2b4>
 8009438:	0800a0bc 	.word	0x0800a0bc
 800943c:	08009f51 	.word	0x08009f51
 8009440:	0800a266 	.word	0x0800a266
 8009444:	f106 38ff 	add.w	r8, r6, #4294967295
 8009448:	f1bb 0f00 	cmp.w	fp, #0
 800944c:	d133      	bne.n	80094b6 <__gethex+0x356>
 800944e:	f1b8 0f00 	cmp.w	r8, #0
 8009452:	d004      	beq.n	800945e <__gethex+0x2fe>
 8009454:	4641      	mov	r1, r8
 8009456:	4620      	mov	r0, r4
 8009458:	f7fe fce4 	bl	8007e24 <__any_on>
 800945c:	4683      	mov	fp, r0
 800945e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009462:	2301      	movs	r3, #1
 8009464:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009468:	f008 081f 	and.w	r8, r8, #31
 800946c:	fa03 f308 	lsl.w	r3, r3, r8
 8009470:	4213      	tst	r3, r2
 8009472:	4631      	mov	r1, r6
 8009474:	4620      	mov	r0, r4
 8009476:	bf18      	it	ne
 8009478:	f04b 0b02 	orrne.w	fp, fp, #2
 800947c:	1bad      	subs	r5, r5, r6
 800947e:	f7ff fe07 	bl	8009090 <rshift>
 8009482:	687e      	ldr	r6, [r7, #4]
 8009484:	f04f 0802 	mov.w	r8, #2
 8009488:	f1bb 0f00 	cmp.w	fp, #0
 800948c:	d04a      	beq.n	8009524 <__gethex+0x3c4>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d016      	beq.n	80094c2 <__gethex+0x362>
 8009494:	2b03      	cmp	r3, #3
 8009496:	d018      	beq.n	80094ca <__gethex+0x36a>
 8009498:	2b01      	cmp	r3, #1
 800949a:	d109      	bne.n	80094b0 <__gethex+0x350>
 800949c:	f01b 0f02 	tst.w	fp, #2
 80094a0:	d006      	beq.n	80094b0 <__gethex+0x350>
 80094a2:	f8da 3000 	ldr.w	r3, [sl]
 80094a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80094aa:	f01b 0f01 	tst.w	fp, #1
 80094ae:	d10f      	bne.n	80094d0 <__gethex+0x370>
 80094b0:	f048 0810 	orr.w	r8, r8, #16
 80094b4:	e036      	b.n	8009524 <__gethex+0x3c4>
 80094b6:	f04f 0b01 	mov.w	fp, #1
 80094ba:	e7d0      	b.n	800945e <__gethex+0x2fe>
 80094bc:	f04f 0801 	mov.w	r8, #1
 80094c0:	e7e2      	b.n	8009488 <__gethex+0x328>
 80094c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094c4:	f1c3 0301 	rsb	r3, r3, #1
 80094c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ef      	beq.n	80094b0 <__gethex+0x350>
 80094d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094d4:	f104 0214 	add.w	r2, r4, #20
 80094d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80094e2:	2300      	movs	r3, #0
 80094e4:	4694      	mov	ip, r2
 80094e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80094ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80094ee:	d01e      	beq.n	800952e <__gethex+0x3ce>
 80094f0:	3101      	adds	r1, #1
 80094f2:	f8cc 1000 	str.w	r1, [ip]
 80094f6:	f1b8 0f02 	cmp.w	r8, #2
 80094fa:	f104 0214 	add.w	r2, r4, #20
 80094fe:	d13d      	bne.n	800957c <__gethex+0x41c>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	3b01      	subs	r3, #1
 8009504:	42ab      	cmp	r3, r5
 8009506:	d10b      	bne.n	8009520 <__gethex+0x3c0>
 8009508:	1169      	asrs	r1, r5, #5
 800950a:	2301      	movs	r3, #1
 800950c:	f005 051f 	and.w	r5, r5, #31
 8009510:	fa03 f505 	lsl.w	r5, r3, r5
 8009514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009518:	421d      	tst	r5, r3
 800951a:	bf18      	it	ne
 800951c:	f04f 0801 	movne.w	r8, #1
 8009520:	f048 0820 	orr.w	r8, r8, #32
 8009524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009526:	601c      	str	r4, [r3, #0]
 8009528:	9b02      	ldr	r3, [sp, #8]
 800952a:	601e      	str	r6, [r3, #0]
 800952c:	e6a2      	b.n	8009274 <__gethex+0x114>
 800952e:	4290      	cmp	r0, r2
 8009530:	f842 3c04 	str.w	r3, [r2, #-4]
 8009534:	d8d6      	bhi.n	80094e4 <__gethex+0x384>
 8009536:	68a2      	ldr	r2, [r4, #8]
 8009538:	4593      	cmp	fp, r2
 800953a:	db17      	blt.n	800956c <__gethex+0x40c>
 800953c:	6861      	ldr	r1, [r4, #4]
 800953e:	4648      	mov	r0, r9
 8009540:	3101      	adds	r1, #1
 8009542:	f7fd ffe3 	bl	800750c <_Balloc>
 8009546:	4682      	mov	sl, r0
 8009548:	b918      	cbnz	r0, 8009552 <__gethex+0x3f2>
 800954a:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <__gethex+0x458>)
 800954c:	4602      	mov	r2, r0
 800954e:	2184      	movs	r1, #132	; 0x84
 8009550:	e6b3      	b.n	80092ba <__gethex+0x15a>
 8009552:	6922      	ldr	r2, [r4, #16]
 8009554:	3202      	adds	r2, #2
 8009556:	f104 010c 	add.w	r1, r4, #12
 800955a:	0092      	lsls	r2, r2, #2
 800955c:	300c      	adds	r0, #12
 800955e:	f7fd f845 	bl	80065ec <memcpy>
 8009562:	4621      	mov	r1, r4
 8009564:	4648      	mov	r0, r9
 8009566:	f7fe f811 	bl	800758c <_Bfree>
 800956a:	4654      	mov	r4, sl
 800956c:	6922      	ldr	r2, [r4, #16]
 800956e:	1c51      	adds	r1, r2, #1
 8009570:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009574:	6121      	str	r1, [r4, #16]
 8009576:	2101      	movs	r1, #1
 8009578:	6151      	str	r1, [r2, #20]
 800957a:	e7bc      	b.n	80094f6 <__gethex+0x396>
 800957c:	6921      	ldr	r1, [r4, #16]
 800957e:	4559      	cmp	r1, fp
 8009580:	dd0b      	ble.n	800959a <__gethex+0x43a>
 8009582:	2101      	movs	r1, #1
 8009584:	4620      	mov	r0, r4
 8009586:	f7ff fd83 	bl	8009090 <rshift>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	3601      	adds	r6, #1
 800958e:	42b3      	cmp	r3, r6
 8009590:	f6ff aedb 	blt.w	800934a <__gethex+0x1ea>
 8009594:	f04f 0801 	mov.w	r8, #1
 8009598:	e7c2      	b.n	8009520 <__gethex+0x3c0>
 800959a:	f015 051f 	ands.w	r5, r5, #31
 800959e:	d0f9      	beq.n	8009594 <__gethex+0x434>
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	441a      	add	r2, r3
 80095a4:	f1c5 0520 	rsb	r5, r5, #32
 80095a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80095ac:	f7fe f8a0 	bl	80076f0 <__hi0bits>
 80095b0:	42a8      	cmp	r0, r5
 80095b2:	dbe6      	blt.n	8009582 <__gethex+0x422>
 80095b4:	e7ee      	b.n	8009594 <__gethex+0x434>
 80095b6:	bf00      	nop
 80095b8:	08009f51 	.word	0x08009f51

080095bc <L_shift>:
 80095bc:	f1c2 0208 	rsb	r2, r2, #8
 80095c0:	0092      	lsls	r2, r2, #2
 80095c2:	b570      	push	{r4, r5, r6, lr}
 80095c4:	f1c2 0620 	rsb	r6, r2, #32
 80095c8:	6843      	ldr	r3, [r0, #4]
 80095ca:	6804      	ldr	r4, [r0, #0]
 80095cc:	fa03 f506 	lsl.w	r5, r3, r6
 80095d0:	432c      	orrs	r4, r5
 80095d2:	40d3      	lsrs	r3, r2
 80095d4:	6004      	str	r4, [r0, #0]
 80095d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80095da:	4288      	cmp	r0, r1
 80095dc:	d3f4      	bcc.n	80095c8 <L_shift+0xc>
 80095de:	bd70      	pop	{r4, r5, r6, pc}

080095e0 <__match>:
 80095e0:	b530      	push	{r4, r5, lr}
 80095e2:	6803      	ldr	r3, [r0, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	b914      	cbnz	r4, 80095f2 <__match+0x12>
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	2001      	movs	r0, #1
 80095f0:	bd30      	pop	{r4, r5, pc}
 80095f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095fa:	2d19      	cmp	r5, #25
 80095fc:	bf98      	it	ls
 80095fe:	3220      	addls	r2, #32
 8009600:	42a2      	cmp	r2, r4
 8009602:	d0f0      	beq.n	80095e6 <__match+0x6>
 8009604:	2000      	movs	r0, #0
 8009606:	e7f3      	b.n	80095f0 <__match+0x10>

08009608 <__hexnan>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	680b      	ldr	r3, [r1, #0]
 800960e:	6801      	ldr	r1, [r0, #0]
 8009610:	115e      	asrs	r6, r3, #5
 8009612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009616:	f013 031f 	ands.w	r3, r3, #31
 800961a:	b087      	sub	sp, #28
 800961c:	bf18      	it	ne
 800961e:	3604      	addne	r6, #4
 8009620:	2500      	movs	r5, #0
 8009622:	1f37      	subs	r7, r6, #4
 8009624:	4682      	mov	sl, r0
 8009626:	4690      	mov	r8, r2
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f846 5c04 	str.w	r5, [r6, #-4]
 800962e:	46b9      	mov	r9, r7
 8009630:	463c      	mov	r4, r7
 8009632:	9502      	str	r5, [sp, #8]
 8009634:	46ab      	mov	fp, r5
 8009636:	784a      	ldrb	r2, [r1, #1]
 8009638:	1c4b      	adds	r3, r1, #1
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	b342      	cbz	r2, 8009690 <__hexnan+0x88>
 800963e:	4610      	mov	r0, r2
 8009640:	9105      	str	r1, [sp, #20]
 8009642:	9204      	str	r2, [sp, #16]
 8009644:	f7ff fd76 	bl	8009134 <__hexdig_fun>
 8009648:	2800      	cmp	r0, #0
 800964a:	d14f      	bne.n	80096ec <__hexnan+0xe4>
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	9905      	ldr	r1, [sp, #20]
 8009650:	2a20      	cmp	r2, #32
 8009652:	d818      	bhi.n	8009686 <__hexnan+0x7e>
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	459b      	cmp	fp, r3
 8009658:	dd13      	ble.n	8009682 <__hexnan+0x7a>
 800965a:	454c      	cmp	r4, r9
 800965c:	d206      	bcs.n	800966c <__hexnan+0x64>
 800965e:	2d07      	cmp	r5, #7
 8009660:	dc04      	bgt.n	800966c <__hexnan+0x64>
 8009662:	462a      	mov	r2, r5
 8009664:	4649      	mov	r1, r9
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff ffa8 	bl	80095bc <L_shift>
 800966c:	4544      	cmp	r4, r8
 800966e:	d950      	bls.n	8009712 <__hexnan+0x10a>
 8009670:	2300      	movs	r3, #0
 8009672:	f1a4 0904 	sub.w	r9, r4, #4
 8009676:	f844 3c04 	str.w	r3, [r4, #-4]
 800967a:	f8cd b008 	str.w	fp, [sp, #8]
 800967e:	464c      	mov	r4, r9
 8009680:	461d      	mov	r5, r3
 8009682:	9903      	ldr	r1, [sp, #12]
 8009684:	e7d7      	b.n	8009636 <__hexnan+0x2e>
 8009686:	2a29      	cmp	r2, #41	; 0x29
 8009688:	d155      	bne.n	8009736 <__hexnan+0x12e>
 800968a:	3102      	adds	r1, #2
 800968c:	f8ca 1000 	str.w	r1, [sl]
 8009690:	f1bb 0f00 	cmp.w	fp, #0
 8009694:	d04f      	beq.n	8009736 <__hexnan+0x12e>
 8009696:	454c      	cmp	r4, r9
 8009698:	d206      	bcs.n	80096a8 <__hexnan+0xa0>
 800969a:	2d07      	cmp	r5, #7
 800969c:	dc04      	bgt.n	80096a8 <__hexnan+0xa0>
 800969e:	462a      	mov	r2, r5
 80096a0:	4649      	mov	r1, r9
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7ff ff8a 	bl	80095bc <L_shift>
 80096a8:	4544      	cmp	r4, r8
 80096aa:	d934      	bls.n	8009716 <__hexnan+0x10e>
 80096ac:	f1a8 0204 	sub.w	r2, r8, #4
 80096b0:	4623      	mov	r3, r4
 80096b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80096b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80096ba:	429f      	cmp	r7, r3
 80096bc:	d2f9      	bcs.n	80096b2 <__hexnan+0xaa>
 80096be:	1b3b      	subs	r3, r7, r4
 80096c0:	f023 0303 	bic.w	r3, r3, #3
 80096c4:	3304      	adds	r3, #4
 80096c6:	3e03      	subs	r6, #3
 80096c8:	3401      	adds	r4, #1
 80096ca:	42a6      	cmp	r6, r4
 80096cc:	bf38      	it	cc
 80096ce:	2304      	movcc	r3, #4
 80096d0:	4443      	add	r3, r8
 80096d2:	2200      	movs	r2, #0
 80096d4:	f843 2b04 	str.w	r2, [r3], #4
 80096d8:	429f      	cmp	r7, r3
 80096da:	d2fb      	bcs.n	80096d4 <__hexnan+0xcc>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b91b      	cbnz	r3, 80096e8 <__hexnan+0xe0>
 80096e0:	4547      	cmp	r7, r8
 80096e2:	d126      	bne.n	8009732 <__hexnan+0x12a>
 80096e4:	2301      	movs	r3, #1
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	2005      	movs	r0, #5
 80096ea:	e025      	b.n	8009738 <__hexnan+0x130>
 80096ec:	3501      	adds	r5, #1
 80096ee:	2d08      	cmp	r5, #8
 80096f0:	f10b 0b01 	add.w	fp, fp, #1
 80096f4:	dd06      	ble.n	8009704 <__hexnan+0xfc>
 80096f6:	4544      	cmp	r4, r8
 80096f8:	d9c3      	bls.n	8009682 <__hexnan+0x7a>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009700:	2501      	movs	r5, #1
 8009702:	3c04      	subs	r4, #4
 8009704:	6822      	ldr	r2, [r4, #0]
 8009706:	f000 000f 	and.w	r0, r0, #15
 800970a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800970e:	6020      	str	r0, [r4, #0]
 8009710:	e7b7      	b.n	8009682 <__hexnan+0x7a>
 8009712:	2508      	movs	r5, #8
 8009714:	e7b5      	b.n	8009682 <__hexnan+0x7a>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0df      	beq.n	80096dc <__hexnan+0xd4>
 800971c:	f1c3 0320 	rsb	r3, r3, #32
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	40da      	lsrs	r2, r3
 8009726:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800972a:	4013      	ands	r3, r2
 800972c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009730:	e7d4      	b.n	80096dc <__hexnan+0xd4>
 8009732:	3f04      	subs	r7, #4
 8009734:	e7d2      	b.n	80096dc <__hexnan+0xd4>
 8009736:	2004      	movs	r0, #4
 8009738:	b007      	add	sp, #28
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800973e <__ascii_mbtowc>:
 800973e:	b082      	sub	sp, #8
 8009740:	b901      	cbnz	r1, 8009744 <__ascii_mbtowc+0x6>
 8009742:	a901      	add	r1, sp, #4
 8009744:	b142      	cbz	r2, 8009758 <__ascii_mbtowc+0x1a>
 8009746:	b14b      	cbz	r3, 800975c <__ascii_mbtowc+0x1e>
 8009748:	7813      	ldrb	r3, [r2, #0]
 800974a:	600b      	str	r3, [r1, #0]
 800974c:	7812      	ldrb	r2, [r2, #0]
 800974e:	1e10      	subs	r0, r2, #0
 8009750:	bf18      	it	ne
 8009752:	2001      	movne	r0, #1
 8009754:	b002      	add	sp, #8
 8009756:	4770      	bx	lr
 8009758:	4610      	mov	r0, r2
 800975a:	e7fb      	b.n	8009754 <__ascii_mbtowc+0x16>
 800975c:	f06f 0001 	mvn.w	r0, #1
 8009760:	e7f8      	b.n	8009754 <__ascii_mbtowc+0x16>

08009762 <_realloc_r>:
 8009762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	4680      	mov	r8, r0
 8009768:	4614      	mov	r4, r2
 800976a:	460e      	mov	r6, r1
 800976c:	b921      	cbnz	r1, 8009778 <_realloc_r+0x16>
 800976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	4611      	mov	r1, r2
 8009774:	f7fd be3e 	b.w	80073f4 <_malloc_r>
 8009778:	b92a      	cbnz	r2, 8009786 <_realloc_r+0x24>
 800977a:	f7fd fdc7 	bl	800730c <_free_r>
 800977e:	4625      	mov	r5, r4
 8009780:	4628      	mov	r0, r5
 8009782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009786:	f000 f842 	bl	800980e <_malloc_usable_size_r>
 800978a:	4284      	cmp	r4, r0
 800978c:	4607      	mov	r7, r0
 800978e:	d802      	bhi.n	8009796 <_realloc_r+0x34>
 8009790:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009794:	d812      	bhi.n	80097bc <_realloc_r+0x5a>
 8009796:	4621      	mov	r1, r4
 8009798:	4640      	mov	r0, r8
 800979a:	f7fd fe2b 	bl	80073f4 <_malloc_r>
 800979e:	4605      	mov	r5, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0ed      	beq.n	8009780 <_realloc_r+0x1e>
 80097a4:	42bc      	cmp	r4, r7
 80097a6:	4622      	mov	r2, r4
 80097a8:	4631      	mov	r1, r6
 80097aa:	bf28      	it	cs
 80097ac:	463a      	movcs	r2, r7
 80097ae:	f7fc ff1d 	bl	80065ec <memcpy>
 80097b2:	4631      	mov	r1, r6
 80097b4:	4640      	mov	r0, r8
 80097b6:	f7fd fda9 	bl	800730c <_free_r>
 80097ba:	e7e1      	b.n	8009780 <_realloc_r+0x1e>
 80097bc:	4635      	mov	r5, r6
 80097be:	e7df      	b.n	8009780 <_realloc_r+0x1e>

080097c0 <__ascii_wctomb>:
 80097c0:	b149      	cbz	r1, 80097d6 <__ascii_wctomb+0x16>
 80097c2:	2aff      	cmp	r2, #255	; 0xff
 80097c4:	bf85      	ittet	hi
 80097c6:	238a      	movhi	r3, #138	; 0x8a
 80097c8:	6003      	strhi	r3, [r0, #0]
 80097ca:	700a      	strbls	r2, [r1, #0]
 80097cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80097d0:	bf98      	it	ls
 80097d2:	2001      	movls	r0, #1
 80097d4:	4770      	bx	lr
 80097d6:	4608      	mov	r0, r1
 80097d8:	4770      	bx	lr
	...

080097dc <fiprintf>:
 80097dc:	b40e      	push	{r1, r2, r3}
 80097de:	b503      	push	{r0, r1, lr}
 80097e0:	4601      	mov	r1, r0
 80097e2:	ab03      	add	r3, sp, #12
 80097e4:	4805      	ldr	r0, [pc, #20]	; (80097fc <fiprintf+0x20>)
 80097e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f000 f83f 	bl	8009870 <_vfiprintf_r>
 80097f2:	b002      	add	sp, #8
 80097f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f8:	b003      	add	sp, #12
 80097fa:	4770      	bx	lr
 80097fc:	20000068 	.word	0x20000068

08009800 <abort>:
 8009800:	b508      	push	{r3, lr}
 8009802:	2006      	movs	r0, #6
 8009804:	f000 fa0c 	bl	8009c20 <raise>
 8009808:	2001      	movs	r0, #1
 800980a:	f7f7 ff52 	bl	80016b2 <_exit>

0800980e <_malloc_usable_size_r>:
 800980e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009812:	1f18      	subs	r0, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	bfbc      	itt	lt
 8009818:	580b      	ldrlt	r3, [r1, r0]
 800981a:	18c0      	addlt	r0, r0, r3
 800981c:	4770      	bx	lr

0800981e <__sfputc_r>:
 800981e:	6893      	ldr	r3, [r2, #8]
 8009820:	3b01      	subs	r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	b410      	push	{r4}
 8009826:	6093      	str	r3, [r2, #8]
 8009828:	da08      	bge.n	800983c <__sfputc_r+0x1e>
 800982a:	6994      	ldr	r4, [r2, #24]
 800982c:	42a3      	cmp	r3, r4
 800982e:	db01      	blt.n	8009834 <__sfputc_r+0x16>
 8009830:	290a      	cmp	r1, #10
 8009832:	d103      	bne.n	800983c <__sfputc_r+0x1e>
 8009834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009838:	f000 b934 	b.w	8009aa4 <__swbuf_r>
 800983c:	6813      	ldr	r3, [r2, #0]
 800983e:	1c58      	adds	r0, r3, #1
 8009840:	6010      	str	r0, [r2, #0]
 8009842:	7019      	strb	r1, [r3, #0]
 8009844:	4608      	mov	r0, r1
 8009846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984a:	4770      	bx	lr

0800984c <__sfputs_r>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	4614      	mov	r4, r2
 8009854:	18d5      	adds	r5, r2, r3
 8009856:	42ac      	cmp	r4, r5
 8009858:	d101      	bne.n	800985e <__sfputs_r+0x12>
 800985a:	2000      	movs	r0, #0
 800985c:	e007      	b.n	800986e <__sfputs_r+0x22>
 800985e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009862:	463a      	mov	r2, r7
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff ffda 	bl	800981e <__sfputc_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d1f3      	bne.n	8009856 <__sfputs_r+0xa>
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009870 <_vfiprintf_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	460d      	mov	r5, r1
 8009876:	b09d      	sub	sp, #116	; 0x74
 8009878:	4614      	mov	r4, r2
 800987a:	4698      	mov	r8, r3
 800987c:	4606      	mov	r6, r0
 800987e:	b118      	cbz	r0, 8009888 <_vfiprintf_r+0x18>
 8009880:	6a03      	ldr	r3, [r0, #32]
 8009882:	b90b      	cbnz	r3, 8009888 <_vfiprintf_r+0x18>
 8009884:	f7fc fd7a 	bl	800637c <__sinit>
 8009888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800988a:	07d9      	lsls	r1, r3, #31
 800988c:	d405      	bmi.n	800989a <_vfiprintf_r+0x2a>
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	059a      	lsls	r2, r3, #22
 8009892:	d402      	bmi.n	800989a <_vfiprintf_r+0x2a>
 8009894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009896:	f7fc fea7 	bl	80065e8 <__retarget_lock_acquire_recursive>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	071b      	lsls	r3, r3, #28
 800989e:	d501      	bpl.n	80098a4 <_vfiprintf_r+0x34>
 80098a0:	692b      	ldr	r3, [r5, #16]
 80098a2:	b99b      	cbnz	r3, 80098cc <_vfiprintf_r+0x5c>
 80098a4:	4629      	mov	r1, r5
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f93a 	bl	8009b20 <__swsetup_r>
 80098ac:	b170      	cbz	r0, 80098cc <_vfiprintf_r+0x5c>
 80098ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b0:	07dc      	lsls	r4, r3, #31
 80098b2:	d504      	bpl.n	80098be <_vfiprintf_r+0x4e>
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	b01d      	add	sp, #116	; 0x74
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	0598      	lsls	r0, r3, #22
 80098c2:	d4f7      	bmi.n	80098b4 <_vfiprintf_r+0x44>
 80098c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c6:	f7fc fe90 	bl	80065ea <__retarget_lock_release_recursive>
 80098ca:	e7f3      	b.n	80098b4 <_vfiprintf_r+0x44>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9309      	str	r3, [sp, #36]	; 0x24
 80098d0:	2320      	movs	r3, #32
 80098d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098da:	2330      	movs	r3, #48	; 0x30
 80098dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a90 <_vfiprintf_r+0x220>
 80098e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098e4:	f04f 0901 	mov.w	r9, #1
 80098e8:	4623      	mov	r3, r4
 80098ea:	469a      	mov	sl, r3
 80098ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f0:	b10a      	cbz	r2, 80098f6 <_vfiprintf_r+0x86>
 80098f2:	2a25      	cmp	r2, #37	; 0x25
 80098f4:	d1f9      	bne.n	80098ea <_vfiprintf_r+0x7a>
 80098f6:	ebba 0b04 	subs.w	fp, sl, r4
 80098fa:	d00b      	beq.n	8009914 <_vfiprintf_r+0xa4>
 80098fc:	465b      	mov	r3, fp
 80098fe:	4622      	mov	r2, r4
 8009900:	4629      	mov	r1, r5
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff ffa2 	bl	800984c <__sfputs_r>
 8009908:	3001      	adds	r0, #1
 800990a:	f000 80a9 	beq.w	8009a60 <_vfiprintf_r+0x1f0>
 800990e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009910:	445a      	add	r2, fp
 8009912:	9209      	str	r2, [sp, #36]	; 0x24
 8009914:	f89a 3000 	ldrb.w	r3, [sl]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80a1 	beq.w	8009a60 <_vfiprintf_r+0x1f0>
 800991e:	2300      	movs	r3, #0
 8009920:	f04f 32ff 	mov.w	r2, #4294967295
 8009924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009928:	f10a 0a01 	add.w	sl, sl, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	9307      	str	r3, [sp, #28]
 8009930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009934:	931a      	str	r3, [sp, #104]	; 0x68
 8009936:	4654      	mov	r4, sl
 8009938:	2205      	movs	r2, #5
 800993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993e:	4854      	ldr	r0, [pc, #336]	; (8009a90 <_vfiprintf_r+0x220>)
 8009940:	f7f6 fc4e 	bl	80001e0 <memchr>
 8009944:	9a04      	ldr	r2, [sp, #16]
 8009946:	b9d8      	cbnz	r0, 8009980 <_vfiprintf_r+0x110>
 8009948:	06d1      	lsls	r1, r2, #27
 800994a:	bf44      	itt	mi
 800994c:	2320      	movmi	r3, #32
 800994e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009952:	0713      	lsls	r3, r2, #28
 8009954:	bf44      	itt	mi
 8009956:	232b      	movmi	r3, #43	; 0x2b
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800995c:	f89a 3000 	ldrb.w	r3, [sl]
 8009960:	2b2a      	cmp	r3, #42	; 0x2a
 8009962:	d015      	beq.n	8009990 <_vfiprintf_r+0x120>
 8009964:	9a07      	ldr	r2, [sp, #28]
 8009966:	4654      	mov	r4, sl
 8009968:	2000      	movs	r0, #0
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4621      	mov	r1, r4
 8009970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009974:	3b30      	subs	r3, #48	; 0x30
 8009976:	2b09      	cmp	r3, #9
 8009978:	d94d      	bls.n	8009a16 <_vfiprintf_r+0x1a6>
 800997a:	b1b0      	cbz	r0, 80099aa <_vfiprintf_r+0x13a>
 800997c:	9207      	str	r2, [sp, #28]
 800997e:	e014      	b.n	80099aa <_vfiprintf_r+0x13a>
 8009980:	eba0 0308 	sub.w	r3, r0, r8
 8009984:	fa09 f303 	lsl.w	r3, r9, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	46a2      	mov	sl, r4
 800998e:	e7d2      	b.n	8009936 <_vfiprintf_r+0xc6>
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	1d19      	adds	r1, r3, #4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	9103      	str	r1, [sp, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfbb      	ittet	lt
 800999c:	425b      	neglt	r3, r3
 800999e:	f042 0202 	orrlt.w	r2, r2, #2
 80099a2:	9307      	strge	r3, [sp, #28]
 80099a4:	9307      	strlt	r3, [sp, #28]
 80099a6:	bfb8      	it	lt
 80099a8:	9204      	strlt	r2, [sp, #16]
 80099aa:	7823      	ldrb	r3, [r4, #0]
 80099ac:	2b2e      	cmp	r3, #46	; 0x2e
 80099ae:	d10c      	bne.n	80099ca <_vfiprintf_r+0x15a>
 80099b0:	7863      	ldrb	r3, [r4, #1]
 80099b2:	2b2a      	cmp	r3, #42	; 0x2a
 80099b4:	d134      	bne.n	8009a20 <_vfiprintf_r+0x1b0>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	1d1a      	adds	r2, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9203      	str	r2, [sp, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bfb8      	it	lt
 80099c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099c6:	3402      	adds	r4, #2
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009aa0 <_vfiprintf_r+0x230>
 80099ce:	7821      	ldrb	r1, [r4, #0]
 80099d0:	2203      	movs	r2, #3
 80099d2:	4650      	mov	r0, sl
 80099d4:	f7f6 fc04 	bl	80001e0 <memchr>
 80099d8:	b138      	cbz	r0, 80099ea <_vfiprintf_r+0x17a>
 80099da:	9b04      	ldr	r3, [sp, #16]
 80099dc:	eba0 000a 	sub.w	r0, r0, sl
 80099e0:	2240      	movs	r2, #64	; 0x40
 80099e2:	4082      	lsls	r2, r0
 80099e4:	4313      	orrs	r3, r2
 80099e6:	3401      	adds	r4, #1
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ee:	4829      	ldr	r0, [pc, #164]	; (8009a94 <_vfiprintf_r+0x224>)
 80099f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099f4:	2206      	movs	r2, #6
 80099f6:	f7f6 fbf3 	bl	80001e0 <memchr>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d03f      	beq.n	8009a7e <_vfiprintf_r+0x20e>
 80099fe:	4b26      	ldr	r3, [pc, #152]	; (8009a98 <_vfiprintf_r+0x228>)
 8009a00:	bb1b      	cbnz	r3, 8009a4a <_vfiprintf_r+0x1da>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	3307      	adds	r3, #7
 8009a06:	f023 0307 	bic.w	r3, r3, #7
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	443b      	add	r3, r7
 8009a12:	9309      	str	r3, [sp, #36]	; 0x24
 8009a14:	e768      	b.n	80098e8 <_vfiprintf_r+0x78>
 8009a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	e7a6      	b.n	800996e <_vfiprintf_r+0xfe>
 8009a20:	2300      	movs	r3, #0
 8009a22:	3401      	adds	r4, #1
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	4619      	mov	r1, r3
 8009a28:	f04f 0c0a 	mov.w	ip, #10
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a32:	3a30      	subs	r2, #48	; 0x30
 8009a34:	2a09      	cmp	r2, #9
 8009a36:	d903      	bls.n	8009a40 <_vfiprintf_r+0x1d0>
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0c6      	beq.n	80099ca <_vfiprintf_r+0x15a>
 8009a3c:	9105      	str	r1, [sp, #20]
 8009a3e:	e7c4      	b.n	80099ca <_vfiprintf_r+0x15a>
 8009a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a44:	4604      	mov	r4, r0
 8009a46:	2301      	movs	r3, #1
 8009a48:	e7f0      	b.n	8009a2c <_vfiprintf_r+0x1bc>
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	462a      	mov	r2, r5
 8009a50:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <_vfiprintf_r+0x22c>)
 8009a52:	a904      	add	r1, sp, #16
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7fb fe41 	bl	80056dc <_printf_float>
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	1c78      	adds	r0, r7, #1
 8009a5e:	d1d6      	bne.n	8009a0e <_vfiprintf_r+0x19e>
 8009a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a62:	07d9      	lsls	r1, r3, #31
 8009a64:	d405      	bmi.n	8009a72 <_vfiprintf_r+0x202>
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	059a      	lsls	r2, r3, #22
 8009a6a:	d402      	bmi.n	8009a72 <_vfiprintf_r+0x202>
 8009a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a6e:	f7fc fdbc 	bl	80065ea <__retarget_lock_release_recursive>
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	065b      	lsls	r3, r3, #25
 8009a76:	f53f af1d 	bmi.w	80098b4 <_vfiprintf_r+0x44>
 8009a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a7c:	e71c      	b.n	80098b8 <_vfiprintf_r+0x48>
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <_vfiprintf_r+0x22c>)
 8009a86:	a904      	add	r1, sp, #16
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7fc f8cb 	bl	8005c24 <_printf_i>
 8009a8e:	e7e4      	b.n	8009a5a <_vfiprintf_r+0x1ea>
 8009a90:	0800a211 	.word	0x0800a211
 8009a94:	0800a21b 	.word	0x0800a21b
 8009a98:	080056dd 	.word	0x080056dd
 8009a9c:	0800984d 	.word	0x0800984d
 8009aa0:	0800a217 	.word	0x0800a217

08009aa4 <__swbuf_r>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	460e      	mov	r6, r1
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	4605      	mov	r5, r0
 8009aac:	b118      	cbz	r0, 8009ab6 <__swbuf_r+0x12>
 8009aae:	6a03      	ldr	r3, [r0, #32]
 8009ab0:	b90b      	cbnz	r3, 8009ab6 <__swbuf_r+0x12>
 8009ab2:	f7fc fc63 	bl	800637c <__sinit>
 8009ab6:	69a3      	ldr	r3, [r4, #24]
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	071a      	lsls	r2, r3, #28
 8009abe:	d525      	bpl.n	8009b0c <__swbuf_r+0x68>
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	b31b      	cbz	r3, 8009b0c <__swbuf_r+0x68>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	6922      	ldr	r2, [r4, #16]
 8009ac8:	1a98      	subs	r0, r3, r2
 8009aca:	6963      	ldr	r3, [r4, #20]
 8009acc:	b2f6      	uxtb	r6, r6
 8009ace:	4283      	cmp	r3, r0
 8009ad0:	4637      	mov	r7, r6
 8009ad2:	dc04      	bgt.n	8009ade <__swbuf_r+0x3a>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f7ff fa3a 	bl	8008f50 <_fflush_r>
 8009adc:	b9e0      	cbnz	r0, 8009b18 <__swbuf_r+0x74>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60a3      	str	r3, [r4, #8]
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	701e      	strb	r6, [r3, #0]
 8009aec:	6962      	ldr	r2, [r4, #20]
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d004      	beq.n	8009afe <__swbuf_r+0x5a>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	07db      	lsls	r3, r3, #31
 8009af8:	d506      	bpl.n	8009b08 <__swbuf_r+0x64>
 8009afa:	2e0a      	cmp	r6, #10
 8009afc:	d104      	bne.n	8009b08 <__swbuf_r+0x64>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7ff fa25 	bl	8008f50 <_fflush_r>
 8009b06:	b938      	cbnz	r0, 8009b18 <__swbuf_r+0x74>
 8009b08:	4638      	mov	r0, r7
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f806 	bl	8009b20 <__swsetup_r>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d0d5      	beq.n	8009ac4 <__swbuf_r+0x20>
 8009b18:	f04f 37ff 	mov.w	r7, #4294967295
 8009b1c:	e7f4      	b.n	8009b08 <__swbuf_r+0x64>
	...

08009b20 <__swsetup_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <__swsetup_r+0xac>)
 8009b24:	4605      	mov	r5, r0
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	460c      	mov	r4, r1
 8009b2a:	b118      	cbz	r0, 8009b34 <__swsetup_r+0x14>
 8009b2c:	6a03      	ldr	r3, [r0, #32]
 8009b2e:	b90b      	cbnz	r3, 8009b34 <__swsetup_r+0x14>
 8009b30:	f7fc fc24 	bl	800637c <__sinit>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b3a:	0718      	lsls	r0, r3, #28
 8009b3c:	d422      	bmi.n	8009b84 <__swsetup_r+0x64>
 8009b3e:	06d9      	lsls	r1, r3, #27
 8009b40:	d407      	bmi.n	8009b52 <__swsetup_r+0x32>
 8009b42:	2309      	movs	r3, #9
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	e034      	b.n	8009bbc <__swsetup_r+0x9c>
 8009b52:	0758      	lsls	r0, r3, #29
 8009b54:	d512      	bpl.n	8009b7c <__swsetup_r+0x5c>
 8009b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b58:	b141      	cbz	r1, 8009b6c <__swsetup_r+0x4c>
 8009b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	d002      	beq.n	8009b68 <__swsetup_r+0x48>
 8009b62:	4628      	mov	r0, r5
 8009b64:	f7fd fbd2 	bl	800730c <_free_r>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	2300      	movs	r3, #0
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f043 0308 	orr.w	r3, r3, #8
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	6923      	ldr	r3, [r4, #16]
 8009b86:	b94b      	cbnz	r3, 8009b9c <__swsetup_r+0x7c>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b92:	d003      	beq.n	8009b9c <__swsetup_r+0x7c>
 8009b94:	4621      	mov	r1, r4
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f884 	bl	8009ca4 <__smakebuf_r>
 8009b9c:	89a0      	ldrh	r0, [r4, #12]
 8009b9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba2:	f010 0301 	ands.w	r3, r0, #1
 8009ba6:	d00a      	beq.n	8009bbe <__swsetup_r+0x9e>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60a3      	str	r3, [r4, #8]
 8009bac:	6963      	ldr	r3, [r4, #20]
 8009bae:	425b      	negs	r3, r3
 8009bb0:	61a3      	str	r3, [r4, #24]
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	b943      	cbnz	r3, 8009bc8 <__swsetup_r+0xa8>
 8009bb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bba:	d1c4      	bne.n	8009b46 <__swsetup_r+0x26>
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	0781      	lsls	r1, r0, #30
 8009bc0:	bf58      	it	pl
 8009bc2:	6963      	ldrpl	r3, [r4, #20]
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	e7f4      	b.n	8009bb2 <__swsetup_r+0x92>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e7f7      	b.n	8009bbc <__swsetup_r+0x9c>
 8009bcc:	20000068 	.word	0x20000068

08009bd0 <_raise_r>:
 8009bd0:	291f      	cmp	r1, #31
 8009bd2:	b538      	push	{r3, r4, r5, lr}
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	d904      	bls.n	8009be4 <_raise_r+0x14>
 8009bda:	2316      	movs	r3, #22
 8009bdc:	6003      	str	r3, [r0, #0]
 8009bde:	f04f 30ff 	mov.w	r0, #4294967295
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009be6:	b112      	cbz	r2, 8009bee <_raise_r+0x1e>
 8009be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bec:	b94b      	cbnz	r3, 8009c02 <_raise_r+0x32>
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f830 	bl	8009c54 <_getpid_r>
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfe:	f000 b817 	b.w	8009c30 <_kill_r>
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d00a      	beq.n	8009c1c <_raise_r+0x4c>
 8009c06:	1c59      	adds	r1, r3, #1
 8009c08:	d103      	bne.n	8009c12 <_raise_r+0x42>
 8009c0a:	2316      	movs	r3, #22
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	2001      	movs	r0, #1
 8009c10:	e7e7      	b.n	8009be2 <_raise_r+0x12>
 8009c12:	2400      	movs	r4, #0
 8009c14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c18:	4628      	mov	r0, r5
 8009c1a:	4798      	blx	r3
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7e0      	b.n	8009be2 <_raise_r+0x12>

08009c20 <raise>:
 8009c20:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <raise+0xc>)
 8009c22:	4601      	mov	r1, r0
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f7ff bfd3 	b.w	8009bd0 <_raise_r>
 8009c2a:	bf00      	nop
 8009c2c:	20000068 	.word	0x20000068

08009c30 <_kill_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4d07      	ldr	r5, [pc, #28]	; (8009c50 <_kill_r+0x20>)
 8009c34:	2300      	movs	r3, #0
 8009c36:	4604      	mov	r4, r0
 8009c38:	4608      	mov	r0, r1
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	602b      	str	r3, [r5, #0]
 8009c3e:	f7f7 fd28 	bl	8001692 <_kill>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d102      	bne.n	8009c4c <_kill_r+0x1c>
 8009c46:	682b      	ldr	r3, [r5, #0]
 8009c48:	b103      	cbz	r3, 8009c4c <_kill_r+0x1c>
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	bd38      	pop	{r3, r4, r5, pc}
 8009c4e:	bf00      	nop
 8009c50:	200050a0 	.word	0x200050a0

08009c54 <_getpid_r>:
 8009c54:	f7f7 bd15 	b.w	8001682 <_getpid>

08009c58 <__swhatbuf_r>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c60:	2900      	cmp	r1, #0
 8009c62:	b096      	sub	sp, #88	; 0x58
 8009c64:	4615      	mov	r5, r2
 8009c66:	461e      	mov	r6, r3
 8009c68:	da0d      	bge.n	8009c86 <__swhatbuf_r+0x2e>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c70:	f04f 0100 	mov.w	r1, #0
 8009c74:	bf0c      	ite	eq
 8009c76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c7a:	2340      	movne	r3, #64	; 0x40
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	6031      	str	r1, [r6, #0]
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	b016      	add	sp, #88	; 0x58
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	466a      	mov	r2, sp
 8009c88:	f000 f848 	bl	8009d1c <_fstat_r>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	dbec      	blt.n	8009c6a <__swhatbuf_r+0x12>
 8009c90:	9901      	ldr	r1, [sp, #4]
 8009c92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c9a:	4259      	negs	r1, r3
 8009c9c:	4159      	adcs	r1, r3
 8009c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca2:	e7eb      	b.n	8009c7c <__swhatbuf_r+0x24>

08009ca4 <__smakebuf_r>:
 8009ca4:	898b      	ldrh	r3, [r1, #12]
 8009ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ca8:	079d      	lsls	r5, r3, #30
 8009caa:	4606      	mov	r6, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	d507      	bpl.n	8009cc0 <__smakebuf_r+0x1c>
 8009cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	6123      	str	r3, [r4, #16]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	6163      	str	r3, [r4, #20]
 8009cbc:	b002      	add	sp, #8
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	ab01      	add	r3, sp, #4
 8009cc2:	466a      	mov	r2, sp
 8009cc4:	f7ff ffc8 	bl	8009c58 <__swhatbuf_r>
 8009cc8:	9900      	ldr	r1, [sp, #0]
 8009cca:	4605      	mov	r5, r0
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7fd fb91 	bl	80073f4 <_malloc_r>
 8009cd2:	b948      	cbnz	r0, 8009ce8 <__smakebuf_r+0x44>
 8009cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d4ef      	bmi.n	8009cbc <__smakebuf_r+0x18>
 8009cdc:	f023 0303 	bic.w	r3, r3, #3
 8009ce0:	f043 0302 	orr.w	r3, r3, #2
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	e7e3      	b.n	8009cb0 <__smakebuf_r+0xc>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	6020      	str	r0, [r4, #0]
 8009cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	9b00      	ldr	r3, [sp, #0]
 8009cf4:	6163      	str	r3, [r4, #20]
 8009cf6:	9b01      	ldr	r3, [sp, #4]
 8009cf8:	6120      	str	r0, [r4, #16]
 8009cfa:	b15b      	cbz	r3, 8009d14 <__smakebuf_r+0x70>
 8009cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 f81d 	bl	8009d40 <_isatty_r>
 8009d06:	b128      	cbz	r0, 8009d14 <__smakebuf_r+0x70>
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	81a3      	strh	r3, [r4, #12]
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	431d      	orrs	r5, r3
 8009d18:	81a5      	strh	r5, [r4, #12]
 8009d1a:	e7cf      	b.n	8009cbc <__smakebuf_r+0x18>

08009d1c <_fstat_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d07      	ldr	r5, [pc, #28]	; (8009d3c <_fstat_r+0x20>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	f7f7 fd11 	bl	8001750 <_fstat>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d102      	bne.n	8009d38 <_fstat_r+0x1c>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	b103      	cbz	r3, 8009d38 <_fstat_r+0x1c>
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200050a0 	.word	0x200050a0

08009d40 <_isatty_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_isatty_r+0x1c>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f7 fd10 	bl	8001770 <_isatty>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_isatty_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_isatty_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	200050a0 	.word	0x200050a0

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr

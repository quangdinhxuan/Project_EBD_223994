
RTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800a048  0800a048  0001a048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a0  0800a5a0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a8  0800a5a8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a8  0800a5a8  0001a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004edc  200001d8  0800a788  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050b4  0800a788  000250b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1d9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d3  00000000  00000000  0002e424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f2  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004056  00000000  00000000  0003232a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e340  00000000  00000000  00036380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2ce  00000000  00000000  000446c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b34  00000000  00000000  000d3990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d84c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a030 	.word	0x0800a030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a030 	.word	0x0800a030

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <uart_init>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void uart_init()
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <uart_init+0xd4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <uart_init+0xd4>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <uart_init+0xd4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
	//chon PB6,PB7
	uint32_t* MODER = (uint32_t*)(GPIOB_ADDRESS_BASE + 0x00);
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <uart_init+0xd8>)
 8001024:	61fb      	str	r3, [r7, #28]
	//PB6,PB7
	*MODER &= ~((0b11 << 12) |( 0b11 << 14));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	601a      	str	r2, [r3, #0]
	*MODER |= ((0b10 << 12) |( 0b10 << 14));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	601a      	str	r2, [r3, #0]
	//ALTERNATIVE FUNCTION
	uint32_t* AFRL = (uint32_t*)(GPIOB_ADDRESS_BASE + 0x20);
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <uart_init+0xdc>)
 8001040:	61bb      	str	r3, [r7, #24]
	//CLEAR PB6,PB7
	*AFRL &= ~((0xf << 24) | (0xf << 28));
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	601a      	str	r2, [r3, #0]
	//AF07 NEN DICH 7
	*AFRL |= ((7 << 24) | (7 << 28));
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f043 42ee 	orr.w	r2, r3, #1996488704	; 0x77000000
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	601a      	str	r2, [r3, #0]


	//baund-rate=9600
	// parity: even
	// data length: 8bit
	__HAL_RCC_USART1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <uart_init+0xd4>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <uart_init+0xd4>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <uart_init+0xd4>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
	uint32_t* BRR = (uint32_t*)(UART1_ADDRESS_BASE + 0x08);
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <uart_init+0xe0>)
 8001078:	617b      	str	r3, [r7, #20]
	//104,166667=16000000/(9600*160)
	//3=0.166667*16 fraction part
	//Baud_rate 19.6.3
	*BRR |= (104 << 4) | (3 << 0);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001082:	f043 0303 	orr.w	r3, r3, #3
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	6013      	str	r3, [r2, #0]
	uint32_t* CR1 = (uint32_t*)(UART1_ADDRESS_BASE + 0x0c);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <uart_init+0xe4>)
 800108c:	613b      	str	r3, [r7, #16]
	//12 xac dinh length(8 or 9 bits co parity hay k)
	//10 xac dinh parity
	*CR1 |= (1 << 12) | (1 << 10);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]
	//9 chon even hay odd parity neu 0 thi co the ko can
	*CR1 &= ~(1 << 9);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]
	//3 transmit,2 receive,13 enable uart
//	*CR1 |= (1 << 5);//enable interrupt, rxne=1
//	uint32_t*ISER1=(uint32_t*)(0xe000e104) ;
//	*ISER1|=(1<<(37-32));
	uint32_t*CR3=(uint32_t*)(0x40011014);
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <uart_init+0xe8>)
 80010a8:	60fb      	str	r3, [r7, #12]
	*CR3|=(1<<6);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]


	*CR1 |= (1 << 13) | (1 << 3) | (1 << 2);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010be:	f043 030c 	orr.w	r3, r3, #12
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	6013      	str	r3, [r2, #0]



}
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020420 	.word	0x40020420
 80010e0:	40011008 	.word	0x40011008
 80010e4:	4001100c 	.word	0x4001100c
 80010e8:	40011014 	.word	0x40011014

080010ec <USART1_IRQHandler>:
char rx_buf[1024];
int rx_index=0;
void USART1_IRQHandler()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)(UART1_ADDRESS_BASE + 0x00);
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USART1_IRQHandler+0x3c>)
 80010f4:	607b      	str	r3, [r7, #4]
	//DR DATA REGISTER
		uint32_t* DR = (uint32_t*)(UART1_ADDRESS_BASE + 0x04);
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <USART1_IRQHandler+0x40>)
 80010f8:	603b      	str	r3, [r7, #0]
		rx_buf[rx_index++]=*DR;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <USART1_IRQHandler+0x44>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	490a      	ldr	r1, [pc, #40]	; (8001130 <USART1_IRQHandler+0x44>)
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	b2c1      	uxtb	r1, r0
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <USART1_IRQHandler+0x48>)
 800110c:	54d1      	strb	r1, [r2, r3]
		*SR &=~(1<<5);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 0220 	bic.w	r2, r3, #32
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40011000 	.word	0x40011000
 800112c:	40011004 	.word	0x40011004
 8001130:	200005f4 	.word	0x200005f4
 8001134:	200001f4 	.word	0x200001f4

08001138 <uart_send_1_byte>:
void uart_send_1_byte(char data)
{//SR STATUS REGISTER
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR = (uint32_t*)(UART1_ADDRESS_BASE + 0x00);
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <uart_send_1_byte+0x44>)
 8001144:	60fb      	str	r3, [r7, #12]
//DR DATA REGISTER
	uint32_t* DR = (uint32_t*)(UART1_ADDRESS_BASE + 0x04);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <uart_send_1_byte+0x48>)
 8001148:	60bb      	str	r3, [r7, #8]
	//Xet transmit empty thi moi trans
	while (((*SR >> 7) & 1) != 1);
 800114a:	bf00      	nop
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f9      	beq.n	800114c <uart_send_1_byte+0x14>
	*DR = data;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	601a      	str	r2, [r3, #0]
	//6 la transmit complete
	while (((*SR >> 6) & 1) != 1);
 800115e:	bf00      	nop
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <uart_send_1_byte+0x28>

}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40011000 	.word	0x40011000
 8001180:	40011004 	.word	0x40011004

08001184 <uart_send_string>:
void uart_send_string(char* str)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	int str_len = strlen(str);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f877 	bl	8000280 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < str_len; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	e009      	b.n	80011b0 <uart_send_string+0x2c>
		uart_send_1_byte(str[i]);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffc7 	bl	8001138 <uart_send_1_byte>
	for (int i = 0; i < str_len; i++) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <uart_send_string+0x18>
	}

}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <printlog>:
	uint8_t data = *DR;
	return data;

}
void printlog(char*format,...)
{
 80011c2:	b40f      	push	{r0, r1, r2, r3}
 80011c4:	b580      	push	{r7, lr}
 80011c6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80011ca:	af00      	add	r7, sp, #0
char buf[1024]={0};
 80011cc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011d0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 faed 	bl	80067c0 <memset>
char buf_len=0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
va_list _ArgList;
va_start(_ArgList,format);
 80011ec:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80011f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011f4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80011f8:	601a      	str	r2, [r3, #0]
vsprintf(buf,format,_ArgList);
 80011fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011fe:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001202:	f107 0008 	add.w	r0, r7, #8
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 800120c:	f005 face 	bl	80067ac <vsiprintf>
uart_send_string(buf);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ffb5 	bl	8001184 <uart_send_string>
va_end(_ArgList);
buf_len=strlen(buf);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f82e 	bl	8000280 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
for(int i=0;i<buf_len;i++)
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001230:	e00f      	b.n	8001252 <printlog+0x90>
{
	uart_send_1_byte(buf[i]);
 8001232:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001236:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800123a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff78 	bl	8001138 <uart_send_1_byte>
for(int i=0;i<buf_len;i++)
 8001248:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001252:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001256:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800125a:	429a      	cmp	r2, r3
 800125c:	dbe9      	blt.n	8001232 <printlog+0x70>
}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <adc_init>:
uart_send_string(buf);
va_end(_ArgList);
}
int common_memory;

void adc_init() {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
	//__HAL_RCC_ADC1_CLK_ENABLE();
	uint32_t* RCC_APB2ENR = (uint32_t*)(RCC_ADDR_BASE + 0x44);
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <adc_init+0x70>)
 8001278:	617b      	str	r3, [r7, #20]
	*RCC_APB2ENR |= (1 << 8);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	601a      	str	r2, [r3, #0]

	 uint32_t* CCR = (uint32_t*)(ADC_CC_ADDR_BASE + 0x04);
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <adc_init+0x74>)
 8001288:	613b      	str	r3, [r7, #16]
	 *CCR |= (1 << 23);         // enable temperature sensor
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

	 uint32_t* SMPR1 = (uint32_t*)(ADC_ADDR_BASE + 0x0C);
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <adc_init+0x78>)
 8001298:	60fb      	str	r3, [r7, #12]
	 *SMPR1 |= 0b111 << 18;     // set 480 cycles sampling rate for channel 16
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	601a      	str	r2, [r3, #0]

	 uint32_t* JSQR = (uint32_t*)(ADC_ADDR_BASE + 0x38);
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <adc_init+0x7c>)
 80012a8:	60bb      	str	r3, [r7, #8]
	 *JSQR &= ~(0b11 << 20);    //
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
	 *JSQR |= 16 << 15;         //  channel 16 temperature
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]

	 uint32_t* CR2  = (uint32_t*)(ADC_ADDR_BASE + 0x08);
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <adc_init+0x80>)
 80012c4:	607b      	str	r3, [r7, #4]
	 *CR2 |= 1 << 0;            // enable ADC
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]



}
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023844 	.word	0x40023844
 80012e4:	40012304 	.word	0x40012304
 80012e8:	4001200c 	.word	0x4001200c
 80012ec:	40012038 	.word	0x40012038
 80012f0:	40012008 	.word	0x40012008

080012f4 <adc_measure_vin>:
int adc_measure_vin() {
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
	uint32_t* CR2 = (uint32_t*)(ADC_ADDR_BASE + 0x08);
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <adc_measure_vin+0x5c>)
 80012fc:	60fb      	str	r3, [r7, #12]
		*CR2 |= 1 << 22;//start
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	601a      	str	r2, [r3, #0]
		uint32_t* SR = (uint32_t*)(ADC_ADDR_BASE + 0x00);
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <adc_measure_vin+0x60>)
 800130c:	60bb      	str	r3, [r7, #8]
		while (((*SR >> 2) & 1) != 1);//WAIt until injected conversion complete
 800130e:	bf00      	nop
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f9      	beq.n	8001310 <adc_measure_vin+0x1c>
		uint32_t* JDR1 = (uint32_t*)(ADC_ADDR_BASE + 0x3C);
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <adc_measure_vin+0x64>)
 800131e:	607b      	str	r3, [r7, #4]
		uint32_t DR = *JDR1 & 0xfff;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	603b      	str	r3, [r7, #0]
		return (DR * 3000) / 4095;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001330:	fb03 f202 	mul.w	r2, r3, r2
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <adc_measure_vin+0x68>)
 8001336:	fba3 1302 	umull	r1, r3, r3, r2
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	0852      	lsrs	r2, r2, #1
 800133e:	4413      	add	r3, r2
 8001340:	0adb      	lsrs	r3, r3, #11

}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40012008 	.word	0x40012008
 8001354:	40012000 	.word	0x40012000
 8001358:	4001203c 	.word	0x4001203c
 800135c:	00100101 	.word	0x00100101

08001360 <adc_get_temp>:
float adc_get_temp()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
	int VSENSE = adc_measure_vin();
 8001366:	f7ff ffc5 	bl	80012f4 <adc_measure_vin>
 800136a:	60f8      	str	r0, [r7, #12]
	int V25 = 760;
 800136c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001370:	60bb      	str	r3, [r7, #8]
	float Avg_slope = 2.5;
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <adc_get_temp+0x48>)
 8001374:	607b      	str	r3, [r7, #4]
	float temper = ((VSENSE - V25) / Avg_slope) + 25;
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001394:	edc7 7a00 	vstr	s15, [r7]
	return temper;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	ee07 3a90 	vmov	s15, r3
}
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40200000 	.word	0x40200000

080013ac <led_init>:
void led_init()
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	//enable clock GPIOD
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <led_init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <led_init+0x4c>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <led_init+0x4c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
	//Set PD12,13,14,15 in OUTPUT mode(push-pull)
	uint32_t* GPIOD_MODER=(uint32_t*)(0x40020C00);
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <led_init+0x50>)
 80013d0:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11111111 << 24);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |=(0b01 << 24)|(0b01 << 26)|(0b01<<28) | (0b01<<30);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]

}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020c00 	.word	0x40020c00

08001400 <led_toggle>:
		//clear pin in led to 0
		*GPIOD_ODR &=~(1<<led);
	}
}
void led_toggle(uint8_t led)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR =(uint32_t*)(0x40020C14);
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <led_toggle+0x58>)
 800140c:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOD_IDR =(uint32_t*)(0x40020C10);
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <led_toggle+0x5c>)
 8001410:	60bb      	str	r3, [r7, #8]
		if(((*GPIOD_IDR>>led)&1)==1){
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <led_toggle+0x3a>


		*GPIOD_ODR &=~(1<<led);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	43d2      	mvns	r2, r2
 8001432:	401a      	ands	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	601a      	str	r2, [r3, #0]
		else
		{

			*GPIOD_ODR |=(1<<led);
		}
}
 8001438:	e008      	b.n	800144c <led_toggle+0x4c>
			*GPIOD_ODR |=(1<<led);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	431a      	orrs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40020c14 	.word	0x40020c14
 800145c:	40020c10 	.word	0x40020c10

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f000 faa8 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f85c 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 f8b8 	bl	80015e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 8001470:	f7ff ff9c 	bl	80013ac <led_init>
uart_init();
 8001474:	f7ff fdc4 	bl	8001000 <uart_init>
adc_init();
 8001478:	f7ff fefa 	bl	8001270 <adc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800147c:	f001 f9ea 	bl	8002854 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_lock */
  uart_lockHandle = osMutexNew(&uart_lock_attributes);
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <main+0x84>)
 8001482:	f001 fade 	bl	8002a42 <osMutexNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <main+0x88>)
 800148a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensor_queue */
  sensor_queueHandle = osMessageQueueNew (16, sizeof(float), &sensor_queue_attributes);
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <main+0x8c>)
 800148e:	2104      	movs	r1, #4
 8001490:	2010      	movs	r0, #16
 8001492:	f001 fb5c 	bl	8002b4e <osMessageQueueNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <main+0x90>)
 800149a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task01 */
  task01Handle = osThreadNew(func1, NULL, &task01_attributes);
 800149c:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <main+0x94>)
 800149e:	2100      	movs	r1, #0
 80014a0:	4815      	ldr	r0, [pc, #84]	; (80014f8 <main+0x98>)
 80014a2:	f001 fa21 	bl	80028e8 <osThreadNew>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <main+0x9c>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(func2, NULL, &task02_attributes);
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <main+0xa0>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <main+0xa4>)
 80014b2:	f001 fa19 	bl	80028e8 <osThreadNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a13      	ldr	r2, [pc, #76]	; (8001508 <main+0xa8>)
 80014ba:	6013      	str	r3, [r2, #0]

  /* creation of task03 */
  task03Handle = osThreadNew(func3, NULL, &task03_attributes);
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <main+0xac>)
 80014be:	2100      	movs	r1, #0
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <main+0xb0>)
 80014c2:	f001 fa11 	bl	80028e8 <osThreadNew>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <main+0xb4>)
 80014ca:	6013      	str	r3, [r2, #0]

  /* creation of task04 */
  task04Handle = osThreadNew(func4, NULL, &task04_attributes);
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <main+0xb8>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <main+0xbc>)
 80014d2:	f001 fa09 	bl	80028e8 <osThreadNew>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <main+0xc0>)
 80014da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014dc:	f001 f9de 	bl	800289c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <main+0x80>
 80014e2:	bf00      	nop
 80014e4:	0800a158 	.word	0x0800a158
 80014e8:	2000060c 	.word	0x2000060c
 80014ec:	0800a140 	.word	0x0800a140
 80014f0:	20000608 	.word	0x20000608
 80014f4:	0800a0b0 	.word	0x0800a0b0
 80014f8:	08001669 	.word	0x08001669
 80014fc:	200005f8 	.word	0x200005f8
 8001500:	0800a0d4 	.word	0x0800a0d4
 8001504:	08001689 	.word	0x08001689
 8001508:	200005fc 	.word	0x200005fc
 800150c:	0800a0f8 	.word	0x0800a0f8
 8001510:	080016c9 	.word	0x080016c9
 8001514:	20000600 	.word	0x20000600
 8001518:	0800a11c 	.word	0x0800a11c
 800151c:	080016fd 	.word	0x080016fd
 8001520:	20000604 	.word	0x20000604

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	; 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f005 f944 	bl	80067c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <SystemClock_Config+0xb4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <SystemClock_Config+0xb4>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <SystemClock_Config+0xb4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <SystemClock_Config+0xb8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <SystemClock_Config+0xb8>)
 800156e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <SystemClock_Config+0xb8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001588:	2310      	movs	r3, #16
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd05 	bl	8001fa4 <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015a0:	f000 f8b4 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 ff68 	bl	8002494 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ca:	f000 f89f 	bl	800170c <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	; 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_GPIO_Init+0x80>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <MX_GPIO_Init+0x80>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_GPIO_Init+0x80>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_GPIO_Init+0x80>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <MX_GPIO_Init+0x80>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_GPIO_Init+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0x84>)
 8001636:	f000 fc9b 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800163a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0x84>)
 8001654:	f000 fb08 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00

08001668 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	led_toggle(LED_GREEN);
 8001670:	200c      	movs	r0, #12
 8001672:	f7ff fec5 	bl	8001400 <led_toggle>
	led_toggle(LED_RED);
 8001676:	200e      	movs	r0, #14
 8001678:	f7ff fec2 	bl	8001400 <led_toggle>
    osDelay(1000);
 800167c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001680:	f001 f9c4 	bl	8002a0c <osDelay>
	led_toggle(LED_GREEN);
 8001684:	e7f4      	b.n	8001670 <func1+0x8>
	...

08001688 <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
  /* Infinite loop */
  for(;;)
  { float temp;
  osMessageQueueGet(sensor_queueHandle, &temp, 0, HAL_MAX_DELAY);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <func2+0x38>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f107 010c 	add.w	r1, r7, #12
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2200      	movs	r2, #0
 800169e:	f001 fb29 	bl	8002cf4 <osMessageQueueGet>
 printlog("temprature:%f \r\n",temp);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff57 	bl	8000558 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <func2+0x3c>)
 80016b0:	f7ff fd87 	bl	80011c2 <printlog>
	     osDelay(3000);
 80016b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b8:	f001 f9a8 	bl	8002a0c <osDelay>
  { float temp;
 80016bc:	e7e8      	b.n	8001690 <func2+0x8>
 80016be:	bf00      	nop
 80016c0:	20000608 	.word	0x20000608
 80016c4:	0800a084 	.word	0x0800a084

080016c8 <func3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func3 */
void func3(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func3 */
	  float sensor_value;
  /* Infinite loop */
  for(;;)
  {
	sensor_value=adc_get_temp();
 80016d0:	f7ff fe46 	bl	8001360 <adc_get_temp>
 80016d4:	eef0 7a40 	vmov.f32	s15, s0
 80016d8:	edc7 7a03 	vstr	s15, [r7, #12]
	osMessageQueuePut(sensor_queueHandle, &sensor_value, 0,HAL_MAX_DELAY);
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <func3+0x30>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	2200      	movs	r2, #0
 80016ea:	f001 faa3 	bl	8002c34 <osMessageQueuePut>
    osDelay(100);
 80016ee:	2064      	movs	r0, #100	; 0x64
 80016f0:	f001 f98c 	bl	8002a0c <osDelay>
	sensor_value=adc_get_temp();
 80016f4:	e7ec      	b.n	80016d0 <func3+0x8>
 80016f6:	bf00      	nop
 80016f8:	20000608 	.word	0x20000608

080016fc <func4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func4 */
void func4(void *argument)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f001 f981 	bl	8002a0c <osDelay>
 800170a:	e7fb      	b.n	8001704 <func4+0x8>

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_MspInit+0x54>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_MspInit+0x54>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_MspInit+0x54>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_MspInit+0x54>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_MspInit+0x54>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_MspInit+0x54>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	210f      	movs	r1, #15
 800175a:	f06f 0001 	mvn.w	r0, #1
 800175e:	f000 fa5a 	bl	8001c16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f95c 	bl	8001a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017a4:	f002 fffc 	bl	80047a0 <xTaskGetSchedulerState>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017ae:	f003 fde3 	bl	8005378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_kill>:

int _kill(int pid, int sig)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d0:	f005 f848 	bl	8006864 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2216      	movs	r2, #22
 80017d8:	601a      	str	r2, [r3, #0]
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_exit>:

void _exit (int status)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ee:	f04f 31ff 	mov.w	r1, #4294967295
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffe7 	bl	80017c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f8:	e7fe      	b.n	80017f8 <_exit+0x12>

080017fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e00a      	b.n	8001822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180c:	f3af 8000 	nop.w
 8001810:	4601      	mov	r1, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf0      	blt.n	800180c <_read+0x12>
  }

  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e009      	b.n	800185a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbf1      	blt.n	8001846 <_write+0x12>
  }
  return len;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_close>:

int _close(int file)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_isatty>:

int _isatty(int file)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f004 ffae 	bl	8006864 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20020000 	.word	0x20020000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000610 	.word	0x20000610
 800193c:	200050b8 	.word	0x200050b8

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196a:	490e      	ldr	r1, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001980:	4c0b      	ldr	r4, [pc, #44]	; (80019b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198e:	f7ff ffd7 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f004 ff6d 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fd63 	bl	8001460 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019a8:	0800a5b0 	.word	0x0800a5b0
  ldr r2, =_sbss
 80019ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019b0:	200050b4 	.word	0x200050b4

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f90d 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fe94 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f917 	bl	8001c4e <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f8ed 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000614 	.word	0x20000614

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000614 	.word	0x20000614

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5c 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e159      	b.n	8001f38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8148 	bne.w	8001f32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a2 	beq.w	8001f32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a56      	ldr	r2, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d019      	beq.n	8001e6a <HAL_GPIO_Init+0x202>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <HAL_GPIO_Init+0x2f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x1fe>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_GPIO_Init+0x2f8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x1f6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_GPIO_Init+0x300>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x1f2>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eae:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f02:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f aea2 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e267      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d075      	beq.n	80020ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b7e      	ldr	r3, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d05b      	beq.n	80020ac <HAL_RCC_OscConfig+0x108>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d157      	bne.n	80020ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e242      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x74>
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6f      	ldr	r2, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a68      	ldr	r2, [pc, #416]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fd12 	bl	8001a84 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fd0e 	bl	8001a84 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e207      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xc0>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fcfe 	bl	8001a84 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fcfa 	bl	8001a84 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1f3      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0xe8>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1c7      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x244>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff fcb3 	bl	8001a84 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff fcaf 	bl	8001a84 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1a8      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4925      	ldr	r1, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x244>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff fc92 	bl	8001a84 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7ff fc8e 	bl	8001a84 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e187      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x248>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff fc72 	bl	8001a84 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff fc6e 	bl	8001a84 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e167      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x200>
 80021c2:	e01b      	b.n	80021fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x248>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fc5b 	bl	8001a84 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff fc57 	bl	8001a84 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d907      	bls.n	80021f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e150      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b81      	ldr	r3, [pc, #516]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b7d      	ldr	r3, [pc, #500]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a7c      	ldr	r2, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b77      	ldr	r3, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b74      	ldr	r3, [pc, #464]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a73      	ldr	r2, [pc, #460]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff fc17 	bl	8001a84 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff fc13 	bl	8001a84 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e10c      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x2ea>
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a63      	ldr	r2, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x324>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x30c>
 8002296:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a5e      	ldr	r2, [pc, #376]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5b      	ldr	r2, [pc, #364]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x324>
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fbd8 	bl	8001a84 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7ff fbd4 	bl	8001a84 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0cb      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCC_OscConfig+0x334>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fbc2 	bl	8001a84 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff fbbe 	bl	8001a84 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0b5      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ee      	bne.n	8002304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a38      	ldr	r2, [pc, #224]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a1 	beq.w	8002484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d05c      	beq.n	8002408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d141      	bne.n	80023da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x478>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fb92 	bl	8001a84 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff fb8e 	bl	8001a84 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e087      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	491b      	ldr	r1, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x478>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fb67 	bl	8001a84 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fb63 	bl	8001a84 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e05c      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x416>
 80023d8:	e054      	b.n	8002484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb50 	bl	8001a84 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fb4c 	bl	8001a84 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e045      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x444>
 8002406:	e03d      	b.n	8002484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e038      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000
 800241c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x4ec>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d028      	beq.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d121      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d11a      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002458:	4293      	cmp	r3, r2
 800245a:	d111      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cc      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d90c      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a58      	ldr	r2, [pc, #352]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800250a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d044      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d119      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e067      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4934      	ldr	r1, [pc, #208]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7ff fa7e 	bl	8001a84 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7ff fa7a 	bl	8001a84 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f821 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f9de 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023c00 	.word	0x40023c00
 8002650:	40023800 	.word	0x40023800
 8002654:	0800a168 	.word	0x0800a168
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002664:	b090      	sub	sp, #64	; 0x40
 8002666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d00d      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002684:	2b08      	cmp	r3, #8
 8002686:	f200 80a1 	bhi.w	80027cc <HAL_RCC_GetSysClockFreq+0x16c>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 800268e:	2b04      	cmp	r3, #4
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x3a>
 8002692:	e09b      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002698:	e09b      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800269e:	e098      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d028      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	2200      	movs	r2, #0
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	627a      	str	r2, [r7, #36]	; 0x24
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026c8:	2100      	movs	r1, #0
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026cc:	fb03 f201 	mul.w	r2, r3, r1
 80026d0:	2300      	movs	r3, #0
 80026d2:	fb00 f303 	mul.w	r3, r0, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	4a43      	ldr	r2, [pc, #268]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026da:	fba0 1202 	umull	r1, r2, r0, r2
 80026de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e0:	460a      	mov	r2, r1
 80026e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80026e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e6:	4413      	add	r3, r2
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	2200      	movs	r2, #0
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	61fa      	str	r2, [r7, #28]
 80026f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026fa:	f7fe facd 	bl	8000c98 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4613      	mov	r3, r2
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	e053      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	2200      	movs	r2, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	617a      	str	r2, [r7, #20]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800271a:	f04f 0b00 	mov.w	fp, #0
 800271e:	4652      	mov	r2, sl
 8002720:	465b      	mov	r3, fp
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	0159      	lsls	r1, r3, #5
 800272c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002730:	0150      	lsls	r0, r2, #5
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ebb2 080a 	subs.w	r8, r2, sl
 800273a:	eb63 090b 	sbc.w	r9, r3, fp
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800274a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800274e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002752:	ebb2 0408 	subs.w	r4, r2, r8
 8002756:	eb63 0509 	sbc.w	r5, r3, r9
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	00eb      	lsls	r3, r5, #3
 8002764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002768:	00e2      	lsls	r2, r4, #3
 800276a:	4614      	mov	r4, r2
 800276c:	461d      	mov	r5, r3
 800276e:	eb14 030a 	adds.w	r3, r4, sl
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	eb45 030b 	adc.w	r3, r5, fp
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002786:	4629      	mov	r1, r5
 8002788:	028b      	lsls	r3, r1, #10
 800278a:	4621      	mov	r1, r4
 800278c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002790:	4621      	mov	r1, r4
 8002792:	028a      	lsls	r2, r1, #10
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	2200      	movs	r2, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	60fa      	str	r2, [r7, #12]
 80027a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027a4:	f7fe fa78 	bl	8000c98 <__aeabi_uldivmod>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4613      	mov	r3, r2
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	3301      	adds	r3, #1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027ca:	e002      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3740      	adds	r7, #64	; 0x40
 80027d8:	46bd      	mov	sp, r7
 80027da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	017d7840 	.word	0x017d7840

080027ec <__NVIC_SetPriority>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002844:	2100      	movs	r1, #0
 8002846:	f06f 0004 	mvn.w	r0, #4
 800284a:	f7ff ffcf 	bl	80027ec <__NVIC_SetPriority>
#endif
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285a:	f3ef 8305 	mrs	r3, IPSR
 800285e:	603b      	str	r3, [r7, #0]
  return(result);
 8002860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002866:	f06f 0305 	mvn.w	r3, #5
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	e00c      	b.n	8002888 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <osKernelInitialize+0x44>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <osKernelInitialize+0x44>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e002      	b.n	8002888 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000618 	.word	0x20000618

0800289c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028a2:	f3ef 8305 	mrs	r3, IPSR
 80028a6:	603b      	str	r3, [r7, #0]
  return(result);
 80028a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028ae:	f06f 0305 	mvn.w	r3, #5
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	e010      	b.n	80028d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <osKernelStart+0x48>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d109      	bne.n	80028d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028be:	f7ff ffbf 	bl	8002840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <osKernelStart+0x48>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028c8:	f001 fb22 	bl	8003f10 <vTaskStartScheduler>
      stat = osOK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	e002      	b.n	80028d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000618 	.word	0x20000618

080028e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08e      	sub	sp, #56	; 0x38
 80028ec:	af04      	add	r7, sp, #16
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f8:	f3ef 8305 	mrs	r3, IPSR
 80028fc:	617b      	str	r3, [r7, #20]
  return(result);
 80028fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002900:	2b00      	cmp	r3, #0
 8002902:	d17e      	bne.n	8002a02 <osThreadNew+0x11a>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d07b      	beq.n	8002a02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800290e:	2318      	movs	r3, #24
 8002910:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d045      	beq.n	80029ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <osThreadNew+0x48>
        name = attr->name;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <osThreadNew+0x6e>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b38      	cmp	r3, #56	; 0x38
 8002948:	d805      	bhi.n	8002956 <osThreadNew+0x6e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <osThreadNew+0x72>
        return (NULL);
 8002956:	2300      	movs	r3, #0
 8002958:	e054      	b.n	8002a04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00e      	beq.n	8002990 <osThreadNew+0xa8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b5b      	cmp	r3, #91	; 0x5b
 8002978:	d90a      	bls.n	8002990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <osThreadNew+0xa8>
        mem = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	e010      	b.n	80029b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10c      	bne.n	80029b2 <osThreadNew+0xca>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <osThreadNew+0xca>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <osThreadNew+0xca>
          mem = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e001      	b.n	80029b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d110      	bne.n	80029da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029c0:	9202      	str	r2, [sp, #8]
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6a3a      	ldr	r2, [r7, #32]
 80029cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f001 f8c8 	bl	8003b64 <xTaskCreateStatic>
 80029d4:	4603      	mov	r3, r0
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e013      	b.n	8002a02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d110      	bne.n	8002a02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f001 f913 	bl	8003c1e <xTaskCreate>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <osThreadNew+0x11a>
            hTask = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a02:	693b      	ldr	r3, [r7, #16]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a14:	f3ef 8305 	mrs	r3, IPSR
 8002a18:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <osDelay+0x1c>
    stat = osErrorISR;
 8002a20:	f06f 0305 	mvn.w	r3, #5
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e007      	b.n	8002a38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 fa38 	bl	8003ea8 <vTaskDelay>
    }
  }

  return (stat);
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b088      	sub	sp, #32
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4e:	f3ef 8305 	mrs	r3, IPSR
 8002a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a54:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d174      	bne.n	8002b44 <osMutexNew+0x102>
    if (attr != NULL) {
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e001      	b.n	8002a6c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <osMutexNew+0x3a>
      rmtx = 1U;
 8002a76:	2301      	movs	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e001      	b.n	8002a80 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d15c      	bne.n	8002b44 <osMutexNew+0x102>
      mem = -1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d015      	beq.n	8002ac2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <osMutexNew+0x6a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b4f      	cmp	r3, #79	; 0x4f
 8002aa4:	d902      	bls.n	8002aac <osMutexNew+0x6a>
          mem = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e00c      	b.n	8002ac6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <osMutexNew+0x84>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <osMutexNew+0x84>
            mem = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	e001      	b.n	8002ac6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d112      	bne.n	8002af2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2004      	movs	r0, #4
 8002ada:	f000 fbc0 	bl	800325e <xQueueCreateMutexStatic>
 8002ade:	61f8      	str	r0, [r7, #28]
 8002ae0:	e016      	b.n	8002b10 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 fbb8 	bl	800325e <xQueueCreateMutexStatic>
 8002aee:	61f8      	str	r0, [r7, #28]
 8002af0:	e00e      	b.n	8002b10 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002afe:	2004      	movs	r0, #4
 8002b00:	f000 fb95 	bl	800322e <xQueueCreateMutex>
 8002b04:	61f8      	str	r0, [r7, #28]
 8002b06:	e003      	b.n	8002b10 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f000 fb90 	bl	800322e <xQueueCreateMutex>
 8002b0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <osMutexNew+0xee>
        if (attr != NULL) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <osMutexNew+0xe2>
          name = attr->name;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e001      	b.n	8002b28 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	69f8      	ldr	r0, [r7, #28]
 8002b2c:	f000 ffbc 	bl	8003aa8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <osMutexNew+0x102>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002b44:	69fb      	ldr	r3, [r7, #28]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	; 0x28
 8002b52:	af02      	add	r7, sp, #8
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b5e:	f3ef 8305 	mrs	r3, IPSR
 8002b62:	613b      	str	r3, [r7, #16]
  return(result);
 8002b64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d15f      	bne.n	8002c2a <osMessageQueueNew+0xdc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05c      	beq.n	8002c2a <osMessageQueueNew+0xdc>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d059      	beq.n	8002c2a <osMessageQueueNew+0xdc>
    mem = -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d029      	beq.n	8002bd6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <osMessageQueueNew+0x62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b4f      	cmp	r3, #79	; 0x4f
 8002b90:	d90e      	bls.n	8002bb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <osMessageQueueNew+0x62>
        mem = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e014      	b.n	8002bda <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d110      	bne.n	8002bda <osMessageQueueNew+0x8c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <osMessageQueueNew+0x8c>
          mem = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e001      	b.n	8002bda <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10b      	bne.n	8002bf8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2100      	movs	r1, #0
 8002bea:	9100      	str	r1, [sp, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa2e 	bl	8003050 <xQueueGenericCreateStatic>
 8002bf4:	61f8      	str	r0, [r7, #28]
 8002bf6:	e008      	b.n	8002c0a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fa9c 	bl	8003140 <xQueueGenericCreate>
 8002c08:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e001      	b.n	8002c22 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	69f8      	ldr	r0, [r7, #28]
 8002c26:	f000 ff3f 	bl	8003aa8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002c2a:	69fb      	ldr	r3, [r7, #28]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c4c:	f3ef 8305 	mrs	r3, IPSR
 8002c50:	617b      	str	r3, [r7, #20]
  return(result);
 8002c52:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d028      	beq.n	8002caa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <osMessageQueuePut+0x36>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <osMessageQueuePut+0x36>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002c6a:	f06f 0303 	mvn.w	r3, #3
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e038      	b.n	8002ce4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002c76:	f107 0210 	add.w	r2, r7, #16
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	69b8      	ldr	r0, [r7, #24]
 8002c80:	f000 fc06 	bl	8003490 <xQueueGenericSendFromISR>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d003      	beq.n	8002c92 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002c8a:	f06f 0302 	mvn.w	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e028      	b.n	8002ce4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d025      	beq.n	8002ce4 <osMessageQueuePut+0xb0>
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <osMessageQueuePut+0xbc>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e01c      	b.n	8002ce4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <osMessageQueuePut+0x82>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002cb6:	f06f 0303 	mvn.w	r3, #3
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	e012      	b.n	8002ce4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	69b8      	ldr	r0, [r7, #24]
 8002cc6:	f000 fae5 	bl	8003294 <xQueueGenericSend>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d009      	beq.n	8002ce4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002cd6:	f06f 0301 	mvn.w	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e002      	b.n	8002ce4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002cde:	f06f 0302 	mvn.w	r3, #2
 8002ce2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0a:	f3ef 8305 	mrs	r3, IPSR
 8002d0e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d10:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <osMessageQueueGet+0x34>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <osMessageQueueGet+0x34>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002d28:	f06f 0303 	mvn.w	r3, #3
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e037      	b.n	8002da0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	69b8      	ldr	r0, [r7, #24]
 8002d3e:	f000 fd23 	bl	8003788 <xQueueReceiveFromISR>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d003      	beq.n	8002d50 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002d48:	f06f 0302 	mvn.w	r3, #2
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e027      	b.n	8002da0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d024      	beq.n	8002da0 <osMessageQueueGet+0xac>
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <osMessageQueueGet+0xb8>)
 8002d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	e01b      	b.n	8002da0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <osMessageQueueGet+0x80>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002d74:	f06f 0303 	mvn.w	r3, #3
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e011      	b.n	8002da0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	69b8      	ldr	r0, [r7, #24]
 8002d82:	f000 fc21 	bl	80035c8 <xQueueReceive>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d009      	beq.n	8002da0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002d92:	f06f 0301 	mvn.w	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	e002      	b.n	8002da0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002d9a:	f06f 0302 	mvn.w	r3, #2
 8002d9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002da0:	69fb      	ldr	r3, [r7, #28]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <vApplicationGetIdleTaskMemory+0x2c>)
 8002dc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <vApplicationGetIdleTaskMemory+0x30>)
 8002dc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000061c 	.word	0x2000061c
 8002de0:	20000678 	.word	0x20000678

08002de4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <vApplicationGetTimerTaskMemory+0x2c>)
 8002df4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a06      	ldr	r2, [pc, #24]	; (8002e14 <vApplicationGetTimerTaskMemory+0x30>)
 8002dfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000878 	.word	0x20000878
 8002e14:	200008d4 	.word	0x200008d4

08002e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0208 	add.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f103 0208 	add.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d103      	bne.n	8002eda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e00c      	b.n	8002ef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3308      	adds	r3, #8
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e002      	b.n	8002ee8 <vListInsert+0x2e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d2f6      	bcs.n	8002ee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d103      	bne.n	8002f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1e5a      	subs	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002faa:	f002 f953 	bl	8005254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	68f9      	ldr	r1, [r7, #12]
 8002fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01a      	beq.n	800303e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3310      	adds	r3, #16
 800300c:	4618      	mov	r0, r3
 800300e:	f001 fa09 	bl	8004424 <xTaskRemoveFromEventList>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <xQueueGenericReset+0xcc>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	e009      	b.n	800303e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3310      	adds	r3, #16
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fef2 	bl	8002e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff feed 	bl	8002e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800303e:	f002 f939 	bl	80052b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <xQueueGenericCreateStatic+0x52>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <xQueueGenericCreateStatic+0x56>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueGenericCreateStatic+0x58>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	623b      	str	r3, [r7, #32]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <xQueueGenericCreateStatic+0x7e>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueGenericCreateStatic+0x82>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericCreateStatic+0x84>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030ee:	2350      	movs	r3, #80	; 0x50
 80030f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d00a      	beq.n	800310e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	61bb      	str	r3, [r7, #24]
}
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800310e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003122:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f83f 	bl	80031b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003138:	4618      	mov	r0, r3
 800313a:	3730      	adds	r7, #48	; 0x30
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	613b      	str	r3, [r7, #16]
}
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3350      	adds	r3, #80	; 0x50
 8003178:	4618      	mov	r0, r3
 800317a:	f002 f98d 	bl	8005498 <pvPortMalloc>
 800317e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d011      	beq.n	80031aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f805 	bl	80031b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031aa:	69bb      	ldr	r3, [r7, #24]
	}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031e2:	2101      	movs	r1, #1
 80031e4:	69b8      	ldr	r0, [r7, #24]
 80031e6:	f7ff fecb 	bl	8002f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800321a:	2300      	movs	r3, #0
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f837 	bl	8003294 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003238:	2301      	movs	r3, #1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	461a      	mov	r2, r3
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff7a 	bl	8003140 <xQueueGenericCreate>
 800324c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ffd3 	bl	80031fa <prvInitialiseMutex>

		return xNewQueue;
 8003254:	68fb      	ldr	r3, [r7, #12]
	}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800325e:	b580      	push	{r7, lr}
 8003260:	b088      	sub	sp, #32
 8003262:	af02      	add	r7, sp, #8
 8003264:	4603      	mov	r3, r0
 8003266:	6039      	str	r1, [r7, #0]
 8003268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800326a:	2301      	movs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7ff fee7 	bl	8003050 <xQueueGenericCreateStatic>
 8003282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff ffb8 	bl	80031fa <prvInitialiseMutex>

		return xNewQueue;
 800328a:	68fb      	ldr	r3, [r7, #12]
	}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08e      	sub	sp, #56	; 0x38
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032a2:	2300      	movs	r3, #0
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueGenericSend+0x32>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <xQueueGenericSend+0x40>
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <xQueueGenericSend+0x44>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <xQueueGenericSend+0x46>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <xQueueGenericSend+0x60>
	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032f0:	bf00      	nop
 80032f2:	e7fe      	b.n	80032f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d103      	bne.n	8003302 <xQueueGenericSend+0x6e>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <xQueueGenericSend+0x72>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericSend+0x74>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueGenericSend+0x8e>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	623b      	str	r3, [r7, #32]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003322:	f001 fa3d 	bl	80047a0 <xTaskGetSchedulerState>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <xQueueGenericSend+0x9e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <xQueueGenericSend+0xa2>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <xQueueGenericSend+0xa4>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <xQueueGenericSend+0xbe>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	61fb      	str	r3, [r7, #28]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003352:	f001 ff7f 	bl	8005254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <xQueueGenericSend+0xd4>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d129      	bne.n	80033bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336e:	f000 fa8b 	bl	8003888 <prvCopyDataToQueue>
 8003372:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	3324      	adds	r3, #36	; 0x24
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f84f 	bl	8004424 <xTaskRemoveFromEventList>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800338c:	4b3f      	ldr	r3, [pc, #252]	; (800348c <xQueueGenericSend+0x1f8>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	e00a      	b.n	80033b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <xQueueGenericSend+0x1f8>)
 80033a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033b4:	f001 ff7e 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e063      	b.n	8003484 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033c2:	f001 ff77 	bl	80052b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e05c      	b.n	8003484 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 f889 	bl	80044ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033da:	2301      	movs	r3, #1
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033de:	f001 ff69 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033e2:	f000 fdfb 	bl	8003fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033e6:	f001 ff35 	bl	8005254 <vPortEnterCritical>
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d103      	bne.n	8003400 <xQueueGenericSend+0x16c>
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003406:	b25b      	sxtb	r3, r3
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d103      	bne.n	8003416 <xQueueGenericSend+0x182>
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003416:	f001 ff4d 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800341a:	1d3a      	adds	r2, r7, #4
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f878 	bl	8004518 <xTaskCheckForTimeOut>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d124      	bne.n	8003478 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800342e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003430:	f000 fb22 	bl	8003a78 <prvIsQueueFull>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d018      	beq.n	800346c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	3310      	adds	r3, #16
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f000 ff9e 	bl	8004384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800344a:	f000 faad 	bl	80039a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800344e:	f000 fdd3 	bl	8003ff8 <xTaskResumeAll>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f af7c 	bne.w	8003352 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <xQueueGenericSend+0x1f8>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	e772      	b.n	8003352 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800346c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346e:	f000 fa9b 	bl	80039a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003472:	f000 fdc1 	bl	8003ff8 <xTaskResumeAll>
 8003476:	e76c      	b.n	8003352 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800347a:	f000 fa95 	bl	80039a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800347e:	f000 fdbb 	bl	8003ff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003482:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003484:	4618      	mov	r0, r3
 8003486:	3738      	adds	r7, #56	; 0x38
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	e000ed04 	.word	0xe000ed04

08003490 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b090      	sub	sp, #64	; 0x40
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <xQueueGenericSendFromISR+0x3c>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <xQueueGenericSendFromISR+0x40>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <xQueueGenericSendFromISR+0x42>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d103      	bne.n	80034fa <xQueueGenericSendFromISR+0x6a>
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <xQueueGenericSendFromISR+0x6e>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueGenericSendFromISR+0x70>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	623b      	str	r3, [r7, #32]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800351a:	f001 ff7d 	bl	8005418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800351e:	f3ef 8211 	mrs	r2, BASEPRI
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003536:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <xQueueGenericSendFromISR+0xbc>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d12f      	bne.n	80035ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003562:	f000 f991 	bl	8003888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003566:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d112      	bne.n	8003596 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f000 ff51 	bl	8004424 <xTaskRemoveFromEventList>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e007      	b.n	80035a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800359a:	3301      	adds	r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	b25a      	sxtb	r2, r3
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035a6:	2301      	movs	r3, #1
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80035aa:	e001      	b.n	80035b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3740      	adds	r7, #64	; 0x40
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <xQueueReceive+0x30>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	623b      	str	r3, [r7, #32]
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <xQueueReceive+0x3e>
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <xQueueReceive+0x42>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueReceive+0x44>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueReceive+0x5e>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003626:	f001 f8bb 	bl	80047a0 <xTaskGetSchedulerState>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <xQueueReceive+0x6e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueReceive+0x72>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueReceive+0x74>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueReceive+0x8e>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61bb      	str	r3, [r7, #24]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003656:	f001 fdfd 	bl	8005254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01f      	beq.n	80036a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366a:	f000 f977 	bl	800395c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	1e5a      	subs	r2, r3, #1
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00f      	beq.n	800369e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	3310      	adds	r3, #16
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fece 	bl	8004424 <xTaskRemoveFromEventList>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <xQueueReceive+0x1bc>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800369e:	f001 fe09 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e069      	b.n	800377a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ac:	f001 fe02 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e062      	b.n	800377a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036ba:	f107 0310 	add.w	r3, r7, #16
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 ff14 	bl	80044ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036c8:	f001 fdf4 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036cc:	f000 fc86 	bl	8003fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036d0:	f001 fdc0 	bl	8005254 <vPortEnterCritical>
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d103      	bne.n	80036ea <xQueueReceive+0x122>
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d103      	bne.n	8003700 <xQueueReceive+0x138>
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003700:	f001 fdd8 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003704:	1d3a      	adds	r2, r7, #4
 8003706:	f107 0310 	add.w	r3, r7, #16
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 ff03 	bl	8004518 <xTaskCheckForTimeOut>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d123      	bne.n	8003760 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800371a:	f000 f997 	bl	8003a4c <prvIsQueueEmpty>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fe29 	bl	8004384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003734:	f000 f938 	bl	80039a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003738:	f000 fc5e 	bl	8003ff8 <xTaskResumeAll>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d189      	bne.n	8003656 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <xQueueReceive+0x1bc>)
 8003744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	e780      	b.n	8003656 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003756:	f000 f927 	bl	80039a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800375a:	f000 fc4d 	bl	8003ff8 <xTaskResumeAll>
 800375e:	e77a      	b.n	8003656 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003762:	f000 f921 	bl	80039a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003766:	f000 fc47 	bl	8003ff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800376a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800376c:	f000 f96e 	bl	8003a4c <prvIsQueueEmpty>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	f43f af6f 	beq.w	8003656 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800377a:	4618      	mov	r0, r3
 800377c:	3730      	adds	r7, #48	; 0x30
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	; 0x38
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	623b      	str	r3, [r7, #32]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <xQueueReceiveFromISR+0x3a>
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <xQueueReceiveFromISR+0x3e>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueReceiveFromISR+0x40>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037e2:	f001 fe19 	bl	8005418 <vPortValidateInterruptPriority>
	__asm volatile
 80037e6:	f3ef 8211 	mrs	r2, BASEPRI
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	61ba      	str	r2, [r7, #24]
 80037fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02f      	beq.n	800386e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800381c:	f000 f89e 	bl	800395c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d112      	bne.n	8003858 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	3310      	adds	r3, #16
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fdf0 	bl	8004424 <xTaskRemoveFromEventList>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e007      	b.n	8003868 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800385c:	3301      	adds	r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	b25a      	sxtb	r2, r3
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003868:	2301      	movs	r3, #1
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
 800386c:	e001      	b.n	8003872 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f383 8811 	msr	BASEPRI, r3
}
 800387c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003880:	4618      	mov	r0, r3
 8003882:	3738      	adds	r7, #56	; 0x38
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d14d      	bne.n	800394a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ff92 	bl	80047dc <xTaskPriorityDisinherit>
 80038b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	e043      	b.n	800394a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d119      	bne.n	80038fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6858      	ldr	r0, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	461a      	mov	r2, r3
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	f002 fff2 	bl	80068bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	441a      	add	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d32b      	bcc.n	800394a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e026      	b.n	800394a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68d8      	ldr	r0, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	461a      	mov	r2, r3
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	f002 ffd8 	bl	80068bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	425b      	negs	r3, r3
 8003916:	441a      	add	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d207      	bcs.n	8003938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	425b      	negs	r3, r3
 8003932:	441a      	add	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d105      	bne.n	800394a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	3b01      	subs	r3, #1
 8003948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003952:	697b      	ldr	r3, [r7, #20]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	441a      	add	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	429a      	cmp	r2, r3
 8003986:	d303      	bcc.n	8003990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68d9      	ldr	r1, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	461a      	mov	r2, r3
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	f002 ff8e 	bl	80068bc <memcpy>
	}
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039b0:	f001 fc50 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039bc:	e011      	b.n	80039e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3324      	adds	r3, #36	; 0x24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fd2a 	bl	8004424 <xTaskRemoveFromEventList>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039d6:	f000 fe01 	bl	80045dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	3b01      	subs	r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	dce9      	bgt.n	80039be <prvUnlockQueue+0x16>
 80039ea:	e000      	b.n	80039ee <prvUnlockQueue+0x46>
					break;
 80039ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039f6:	f001 fc5d 	bl	80052b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039fa:	f001 fc2b 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a06:	e011      	b.n	8003a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d012      	beq.n	8003a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3310      	adds	r3, #16
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fd05 	bl	8004424 <xTaskRemoveFromEventList>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a20:	f000 fddc 	bl	80045dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	dce9      	bgt.n	8003a08 <prvUnlockQueue+0x60>
 8003a34:	e000      	b.n	8003a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a40:	f001 fc38 	bl	80052b4 <vPortExitCritical>
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a54:	f001 fbfe 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e001      	b.n	8003a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a6a:	f001 fc23 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a80:	f001 fbe8 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d102      	bne.n	8003a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e001      	b.n	8003a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a9a:	f001 fc0b 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e014      	b.n	8003ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <vQueueAddToRegistry+0x50>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ac4:	490c      	ldr	r1, [pc, #48]	; (8003af8 <vQueueAddToRegistry+0x50>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <vQueueAddToRegistry+0x50>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ada:	e006      	b.n	8003aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d9e7      	bls.n	8003ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000cd4 	.word	0x20000cd4

08003afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b0c:	f001 fba2 	bl	8005254 <vPortEnterCritical>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d103      	bne.n	8003b26 <vQueueWaitForMessageRestricted+0x2a>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d103      	bne.n	8003b3c <vQueueWaitForMessageRestricted+0x40>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3c:	f001 fbba 	bl	80052b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fc3b 	bl	80043cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff26 	bl	80039a8 <prvUnlockQueue>
	}
 8003b5c:	bf00      	nop
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <xTaskCreateStatic+0x46>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	61fb      	str	r3, [r7, #28]
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003baa:	235c      	movs	r3, #92	; 0x5c
 8003bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b5c      	cmp	r3, #92	; 0x5c
 8003bb2:	d00a      	beq.n	8003bca <xTaskCreateStatic+0x66>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01e      	beq.n	8003c10 <xTaskCreateStatic+0xac>
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f850 	bl	8003ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f000 f8dd 	bl	8003dc8 <prvAddNewTaskToReadyList>
 8003c0e:	e001      	b.n	8003c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c14:	697b      	ldr	r3, [r7, #20]
	}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08c      	sub	sp, #48	; 0x30
 8003c22:	af04      	add	r7, sp, #16
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 fc30 	bl	8005498 <pvPortMalloc>
 8003c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c40:	205c      	movs	r0, #92	; 0x5c
 8003c42:	f001 fc29 	bl	8005498 <pvPortMalloc>
 8003c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
 8003c54:	e005      	b.n	8003c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f001 fcea 	bl	8005630 <vPortFree>
 8003c5c:	e001      	b.n	8003c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9303      	str	r3, [sp, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	9302      	str	r3, [sp, #8]
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f80e 	bl	8003ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c8c:	69f8      	ldr	r0, [r7, #28]
 8003c8e:	f000 f89b 	bl	8003dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e002      	b.n	8003c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	21a5      	movs	r1, #165	; 0xa5
 8003cc2:	f002 fd7d 	bl	80067c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f023 0307 	bic.w	r3, r3, #7
 8003cde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	617b      	str	r3, [r7, #20]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01f      	beq.n	8003d46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e012      	b.n	8003d32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	7819      	ldrb	r1, [r3, #0]
 8003d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3334      	adds	r3, #52	; 0x34
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d9e9      	bls.n	8003d0c <prvInitialiseNewTask+0x64>
 8003d38:	e000      	b.n	8003d3c <prvInitialiseNewTask+0x94>
			{
				break;
 8003d3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d44:	e003      	b.n	8003d4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b37      	cmp	r3, #55	; 0x37
 8003d52:	d901      	bls.n	8003d58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d54:	2337      	movs	r3, #55	; 0x37
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff f872 	bl	8002e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	3318      	adds	r3, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f86d 	bl	8002e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	2200      	movs	r2, #0
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	69b8      	ldr	r0, [r7, #24]
 8003da8:	f001 f928 	bl	8004ffc <pxPortInitialiseStack>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dbe:	bf00      	nop
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dd0:	f001 fa40 	bl	8005254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <prvAddNewTaskToReadyList+0xc4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <prvAddNewTaskToReadyList+0xc4>)
 8003ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <prvAddNewTaskToReadyList+0xc8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <prvAddNewTaskToReadyList+0xc8>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <prvAddNewTaskToReadyList+0xc4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d110      	bne.n	8003e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003df4:	f000 fc16 	bl	8004624 <prvInitialiseTaskLists>
 8003df8:	e00d      	b.n	8003e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <prvAddNewTaskToReadyList+0xcc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <prvAddNewTaskToReadyList+0xc8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d802      	bhi.n	8003e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <prvAddNewTaskToReadyList+0xc8>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <prvAddNewTaskToReadyList+0xd0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <prvAddNewTaskToReadyList+0xd0>)
 8003e1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <prvAddNewTaskToReadyList+0xd0>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <prvAddNewTaskToReadyList+0xd4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d903      	bls.n	8003e3c <prvAddNewTaskToReadyList+0x74>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <prvAddNewTaskToReadyList+0xd4>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <prvAddNewTaskToReadyList+0xd8>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7ff f80d 	bl	8002e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e58:	f001 fa2c 	bl	80052b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <prvAddNewTaskToReadyList+0xcc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvAddNewTaskToReadyList+0xc8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d207      	bcs.n	8003e82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <prvAddNewTaskToReadyList+0xdc>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200011e8 	.word	0x200011e8
 8003e90:	20000d14 	.word	0x20000d14
 8003e94:	200011f4 	.word	0x200011f4
 8003e98:	20001204 	.word	0x20001204
 8003e9c:	200011f0 	.word	0x200011f0
 8003ea0:	20000d18 	.word	0x20000d18
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <vTaskDelay+0x60>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <vTaskDelay+0x30>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60bb      	str	r3, [r7, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ed8:	f000 f880 	bl	8003fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fcea 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ee4:	f000 f888 	bl	8003ff8 <xTaskResumeAll>
 8003ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <vTaskDelay+0x64>)
 8003ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20001210 	.word	0x20001210
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f1e:	463a      	mov	r2, r7
 8003f20:	1d39      	adds	r1, r7, #4
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe ff42 	bl	8002db0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	9202      	str	r2, [sp, #8]
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	460a      	mov	r2, r1
 8003f3e:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <vTaskStartScheduler+0xb4>)
 8003f40:	4821      	ldr	r0, [pc, #132]	; (8003fc8 <vTaskStartScheduler+0xb8>)
 8003f42:	f7ff fe0f 	bl	8003b64 <xTaskCreateStatic>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <vTaskStartScheduler+0xbc>)
 8003f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <vTaskStartScheduler+0xbc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e001      	b.n	8003f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f64:	f000 fcfc 	bl	8004960 <xTimerCreateTimerTask>
 8003f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d116      	bne.n	8003f9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	613b      	str	r3, [r7, #16]
}
 8003f82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <vTaskStartScheduler+0xc0>)
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <vTaskStartScheduler+0xc4>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <vTaskStartScheduler+0xc8>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f98:	f001 f8ba 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f9c:	e00e      	b.n	8003fbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d10a      	bne.n	8003fbc <vTaskStartScheduler+0xac>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <vTaskStartScheduler+0xaa>
}
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0800a098 	.word	0x0800a098
 8003fc8:	080045f5 	.word	0x080045f5
 8003fcc:	2000120c 	.word	0x2000120c
 8003fd0:	20001208 	.word	0x20001208
 8003fd4:	200011f4 	.word	0x200011f4
 8003fd8:	200011ec 	.word	0x200011ec

08003fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <vTaskSuspendAll+0x18>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a03      	ldr	r2, [pc, #12]	; (8003ff4 <vTaskSuspendAll+0x18>)
 8003fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	20001210 	.word	0x20001210

08003ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004006:	4b42      	ldr	r3, [pc, #264]	; (8004110 <xTaskResumeAll+0x118>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <xTaskResumeAll+0x2c>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	603b      	str	r3, [r7, #0]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004024:	f001 f916 	bl	8005254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004028:	4b39      	ldr	r3, [pc, #228]	; (8004110 <xTaskResumeAll+0x118>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <xTaskResumeAll+0x118>)
 8004030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <xTaskResumeAll+0x118>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d162      	bne.n	8004100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800403a:	4b36      	ldr	r3, [pc, #216]	; (8004114 <xTaskResumeAll+0x11c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d05e      	beq.n	8004100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004042:	e02f      	b.n	80040a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <xTaskResumeAll+0x120>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3318      	adds	r3, #24
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe ff6b 	bl	8002f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe ff66 	bl	8002f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <xTaskResumeAll+0x124>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d903      	bls.n	8004074 <xTaskResumeAll+0x7c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <xTaskResumeAll+0x124>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <xTaskResumeAll+0x128>)
 8004082:	441a      	add	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fe fef1 	bl	8002e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <xTaskResumeAll+0x12c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <xTaskResumeAll+0x130>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <xTaskResumeAll+0x120>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1cb      	bne.n	8004044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040b2:	f000 fb55 	bl	8004760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <xTaskResumeAll+0x134>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040c2:	f000 f847 	bl	8004154 <xTaskIncrementTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <xTaskResumeAll+0x130>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f1      	bne.n	80040c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <xTaskResumeAll+0x134>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <xTaskResumeAll+0x130>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <xTaskResumeAll+0x138>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004100:	f001 f8d8 	bl	80052b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004104:	68bb      	ldr	r3, [r7, #8]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20001210 	.word	0x20001210
 8004114:	200011e8 	.word	0x200011e8
 8004118:	200011a8 	.word	0x200011a8
 800411c:	200011f0 	.word	0x200011f0
 8004120:	20000d18 	.word	0x20000d18
 8004124:	20000d14 	.word	0x20000d14
 8004128:	200011fc 	.word	0x200011fc
 800412c:	200011f8 	.word	0x200011f8
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <xTaskGetTickCount+0x1c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200011ec 	.word	0x200011ec

08004154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b4f      	ldr	r3, [pc, #316]	; (800429c <xTaskIncrementTick+0x148>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 808f 	bne.w	8004286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004168:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <xTaskIncrementTick+0x14c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004170:	4a4b      	ldr	r2, [pc, #300]	; (80042a0 <xTaskIncrementTick+0x14c>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d120      	bne.n	80041be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800417c:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <xTaskIncrementTick+0x150>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <xTaskIncrementTick+0x48>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	603b      	str	r3, [r7, #0]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xTaskIncrementTick+0x46>
 800419c:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <xTaskIncrementTick+0x150>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4a3f      	ldr	r2, [pc, #252]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <xTaskIncrementTick+0x158>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <xTaskIncrementTick+0x158>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	f000 fad1 	bl	8004760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041be:	4b3c      	ldr	r3, [pc, #240]	; (80042b0 <xTaskIncrementTick+0x15c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d349      	bcc.n	800425c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c8:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <xTaskIncrementTick+0x15c>)
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	601a      	str	r2, [r3, #0]
					break;
 80041da:	e03f      	b.n	800425c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d203      	bcs.n	80041fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041f4:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <xTaskIncrementTick+0x15c>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041fa:	e02f      	b.n	800425c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fe93 	bl	8002f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fe8a 	bl	8002f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <xTaskIncrementTick+0x160>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <xTaskIncrementTick+0xd8>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <xTaskIncrementTick+0x160>)
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <xTaskIncrementTick+0x164>)
 800423a:	441a      	add	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fe fe15 	bl	8002e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <xTaskIncrementTick+0x168>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	429a      	cmp	r2, r3
 8004254:	d3b8      	bcc.n	80041c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425a:	e7b5      	b.n	80041c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <xTaskIncrementTick+0x168>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	4915      	ldr	r1, [pc, #84]	; (80042b8 <xTaskIncrementTick+0x164>)
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d901      	bls.n	8004278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <xTaskIncrementTick+0x16c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e004      	b.n	8004290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <xTaskIncrementTick+0x170>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <xTaskIncrementTick+0x170>)
 800428e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20001210 	.word	0x20001210
 80042a0:	200011ec 	.word	0x200011ec
 80042a4:	200011a0 	.word	0x200011a0
 80042a8:	200011a4 	.word	0x200011a4
 80042ac:	20001200 	.word	0x20001200
 80042b0:	20001208 	.word	0x20001208
 80042b4:	200011f0 	.word	0x200011f0
 80042b8:	20000d18 	.word	0x20000d18
 80042bc:	20000d14 	.word	0x20000d14
 80042c0:	200011fc 	.word	0x200011fc
 80042c4:	200011f8 	.word	0x200011f8

080042c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <vTaskSwitchContext+0xa8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <vTaskSwitchContext+0xac>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042dc:	e041      	b.n	8004362 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80042de:	4b25      	ldr	r3, [pc, #148]	; (8004374 <vTaskSwitchContext+0xac>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <vTaskSwitchContext+0xb0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e010      	b.n	800430e <vTaskSwitchContext+0x46>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <vTaskSwitchContext+0x40>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	607b      	str	r3, [r7, #4]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vTaskSwitchContext+0x3e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <vTaskSwitchContext+0xb4>)
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0e4      	beq.n	80042ec <vTaskSwitchContext+0x24>
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <vTaskSwitchContext+0xb4>)
 800432e:	4413      	add	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3308      	adds	r3, #8
 8004344:	429a      	cmp	r2, r3
 8004346:	d104      	bne.n	8004352 <vTaskSwitchContext+0x8a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a09      	ldr	r2, [pc, #36]	; (8004380 <vTaskSwitchContext+0xb8>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4a06      	ldr	r2, [pc, #24]	; (8004378 <vTaskSwitchContext+0xb0>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6013      	str	r3, [r2, #0]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20001210 	.word	0x20001210
 8004374:	200011fc 	.word	0x200011fc
 8004378:	200011f0 	.word	0x200011f0
 800437c:	20000d18 	.word	0x20000d18
 8004380:	20000d14 	.word	0x20000d14

08004384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <vTaskPlaceOnEventList+0x44>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3318      	adds	r3, #24
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe fd81 	bl	8002eba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b8:	2101      	movs	r1, #1
 80043ba:	6838      	ldr	r0, [r7, #0]
 80043bc:	f000 fa7c 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000d14 	.word	0x20000d14

080043cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	617b      	str	r3, [r7, #20]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <vTaskPlaceOnEventListRestricted+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3318      	adds	r3, #24
 80043fa:	4619      	mov	r1, r3
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7fe fd38 	bl	8002e72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f000 fa51 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
	}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000d14 	.word	0x20000d14

08004424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	3318      	adds	r3, #24
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fd69 	bl	8002f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <xTaskRemoveFromEventList+0xb0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11d      	bne.n	800449e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fd60 	bl	8002f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <xTaskRemoveFromEventList+0xb4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <xTaskRemoveFromEventList+0x5c>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <xTaskRemoveFromEventList+0xb4>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <xTaskRemoveFromEventList+0xb8>)
 800448e:	441a      	add	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fe fceb 	bl	8002e72 <vListInsertEnd>
 800449c:	e005      	b.n	80044aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3318      	adds	r3, #24
 80044a2:	4619      	mov	r1, r3
 80044a4:	480e      	ldr	r0, [pc, #56]	; (80044e0 <xTaskRemoveFromEventList+0xbc>)
 80044a6:	f7fe fce4 	bl	8002e72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <xTaskRemoveFromEventList+0xc0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d905      	bls.n	80044c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <xTaskRemoveFromEventList+0xc4>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e001      	b.n	80044c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044c8:	697b      	ldr	r3, [r7, #20]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20001210 	.word	0x20001210
 80044d8:	200011f0 	.word	0x200011f0
 80044dc:	20000d18 	.word	0x20000d18
 80044e0:	200011a8 	.word	0x200011a8
 80044e4:	20000d14 	.word	0x20000d14
 80044e8:	200011fc 	.word	0x200011fc

080044ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <vTaskInternalSetTimeOutState+0x24>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <vTaskInternalSetTimeOutState+0x28>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20001200 	.word	0x20001200
 8004514:	200011ec 	.word	0x200011ec

08004518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	613b      	str	r3, [r7, #16]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800455a:	f000 fe7b 	bl	8005254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <xTaskCheckForTimeOut+0xbc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e023      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <xTaskCheckForTimeOut+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d007      	beq.n	800459a <xTaskCheckForTimeOut+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d302      	bcc.n	800459a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e015      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d20b      	bcs.n	80045bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff9b 	bl	80044ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e004      	b.n	80045c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f000 fe75 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 80045ca:	69fb      	ldr	r3, [r7, #28]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200011ec 	.word	0x200011ec
 80045d8:	20001200 	.word	0x20001200

080045dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <vTaskMissedYield+0x14>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	200011fc 	.word	0x200011fc

080045f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045fc:	f000 f852 	bl	80046a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <prvIdleTask+0x28>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d9f9      	bls.n	80045fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <prvIdleTask+0x2c>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004618:	e7f0      	b.n	80045fc <prvIdleTask+0x8>
 800461a:	bf00      	nop
 800461c:	20000d18 	.word	0x20000d18
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	e00c      	b.n	800464a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <prvInitialiseTaskLists+0x60>)
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fbea 	bl	8002e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b37      	cmp	r3, #55	; 0x37
 800464e:	d9ef      	bls.n	8004630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004652:	f7fe fbe1 	bl	8002e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004656:	480d      	ldr	r0, [pc, #52]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004658:	f7fe fbde 	bl	8002e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800465c:	480c      	ldr	r0, [pc, #48]	; (8004690 <prvInitialiseTaskLists+0x6c>)
 800465e:	f7fe fbdb 	bl	8002e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004662:	480c      	ldr	r0, [pc, #48]	; (8004694 <prvInitialiseTaskLists+0x70>)
 8004664:	f7fe fbd8 	bl	8002e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <prvInitialiseTaskLists+0x74>)
 800466a:	f7fe fbd5 	bl	8002e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <prvInitialiseTaskLists+0x78>)
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <prvInitialiseTaskLists+0x7c>)
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d18 	.word	0x20000d18
 8004688:	20001178 	.word	0x20001178
 800468c:	2000118c 	.word	0x2000118c
 8004690:	200011a8 	.word	0x200011a8
 8004694:	200011bc 	.word	0x200011bc
 8004698:	200011d4 	.word	0x200011d4
 800469c:	200011a0 	.word	0x200011a0
 80046a0:	200011a4 	.word	0x200011a4

080046a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046aa:	e019      	b.n	80046e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046ac:	f000 fdd2 	bl	8005254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <prvCheckTasksWaitingTermination+0x50>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fc35 	bl	8002f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046d6:	f000 fded 	bl	80052b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f810 	bl	8004700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e1      	bne.n	80046ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200011bc 	.word	0x200011bc
 80046f8:	200011e8 	.word	0x200011e8
 80046fc:	200011d0 	.word	0x200011d0

08004700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4618      	mov	r0, r3
 8004718:	f000 ff8a 	bl	8005630 <vPortFree>
				vPortFree( pxTCB );
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 ff87 	bl	8005630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004722:	e018      	b.n	8004756 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800472a:	2b01      	cmp	r3, #1
 800472c:	d103      	bne.n	8004736 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 ff7e 	bl	8005630 <vPortFree>
	}
 8004734:	e00f      	b.n	8004756 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800473c:	2b02      	cmp	r3, #2
 800473e:	d00a      	beq.n	8004756 <prvDeleteTCB+0x56>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <prvDeleteTCB+0x54>
	}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <prvResetNextTaskUnblockTime+0x38>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <prvResetNextTaskUnblockTime+0x3c>)
 8004772:	f04f 32ff 	mov.w	r2, #4294967295
 8004776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004778:	e008      	b.n	800478c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <prvResetNextTaskUnblockTime+0x38>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <prvResetNextTaskUnblockTime+0x3c>)
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	200011a0 	.word	0x200011a0
 800479c:	20001208 	.word	0x20001208

080047a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <xTaskGetSchedulerState+0x34>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047ae:	2301      	movs	r3, #1
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	e008      	b.n	80047c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <xTaskGetSchedulerState+0x38>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047bc:	2302      	movs	r3, #2
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	e001      	b.n	80047c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047c6:	687b      	ldr	r3, [r7, #4]
	}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	200011f4 	.word	0x200011f4
 80047d8:	20001210 	.word	0x20001210

080047dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d056      	beq.n	80048a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <xTaskPriorityDisinherit+0xd0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d00a      	beq.n	8004812 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	60bb      	str	r3, [r7, #8]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	429a      	cmp	r2, r3
 8004844:	d02c      	beq.n	80048a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d128      	bne.n	80048a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fb6a 	bl	8002f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <xTaskPriorityDisinherit+0xd4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d903      	bls.n	8004880 <xTaskPriorityDisinherit+0xa4>
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <xTaskPriorityDisinherit+0xd4>)
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <xTaskPriorityDisinherit+0xd8>)
 800488e:	441a      	add	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f7fe faeb 	bl	8002e72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048a0:	697b      	ldr	r3, [r7, #20]
	}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000d14 	.word	0x20000d14
 80048b0:	200011f0 	.word	0x200011f0
 80048b4:	20000d18 	.word	0x20000d18

080048b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <prvAddCurrentTaskToDelayedList+0x90>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c8:	4b20      	ldr	r3, [pc, #128]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fb2c 	bl	8002f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d10a      	bne.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4819      	ldr	r0, [pc, #100]	; (8004950 <prvAddCurrentTaskToDelayedList+0x98>)
 80048ec:	f7fe fac1 	bl	8002e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048f0:	e026      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	429a      	cmp	r2, r3
 8004908:	d209      	bcs.n	800491e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7fe facf 	bl	8002eba <vListInsert>
}
 800491c:	e010      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fe fac5 	bl	8002eba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d202      	bcs.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200011ec 	.word	0x200011ec
 800494c:	20000d14 	.word	0x20000d14
 8004950:	200011d4 	.word	0x200011d4
 8004954:	200011a4 	.word	0x200011a4
 8004958:	200011a0 	.word	0x200011a0
 800495c:	20001208 	.word	0x20001208

08004960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800496a:	f000 fb07 	bl	8004f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <xTimerCreateTimerTask+0x80>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d021      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800497e:	1d3a      	adds	r2, r7, #4
 8004980:	f107 0108 	add.w	r1, r7, #8
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fa2b 	bl	8002de4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	9202      	str	r2, [sp, #8]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2302      	movs	r3, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	460a      	mov	r2, r1
 80049a0:	4910      	ldr	r1, [pc, #64]	; (80049e4 <xTimerCreateTimerTask+0x84>)
 80049a2:	4811      	ldr	r0, [pc, #68]	; (80049e8 <xTimerCreateTimerTask+0x88>)
 80049a4:	f7ff f8de 	bl	8003b64 <xTaskCreateStatic>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <xTimerCreateTimerTask+0x8c>)
 80049ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <xTimerCreateTimerTask+0x8c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049d6:	697b      	ldr	r3, [r7, #20]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20001244 	.word	0x20001244
 80049e4:	0800a0a0 	.word	0x0800a0a0
 80049e8:	08004b25 	.word	0x08004b25
 80049ec:	20001248 	.word	0x20001248

080049f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	623b      	str	r3, [r7, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02a      	beq.n	8004a7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	dc18      	bgt.n	8004a6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a38:	f7ff feb2 	bl	80047a0 <xTaskGetSchedulerState>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d109      	bne.n	8004a56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f107 0110 	add.w	r1, r7, #16
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	f7fe fc21 	bl	8003294 <xQueueGenericSend>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24
 8004a54:	e012      	b.n	8004a7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	f107 0110 	add.w	r1, r7, #16
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2200      	movs	r2, #0
 8004a62:	f7fe fc17 	bl	8003294 <xQueueGenericSend>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24
 8004a68:	e008      	b.n	8004a7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f107 0110 	add.w	r1, r7, #16
 8004a72:	2300      	movs	r3, #0
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	f7fe fd0b 	bl	8003490 <xQueueGenericSendFromISR>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20001244 	.word	0x20001244

08004a8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <prvProcessExpiredTimer+0x94>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fa41 	bl	8002f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d022      	beq.n	8004afe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	18d1      	adds	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f000 f8d1 	bl	8004c6c <prvInsertTimerInActiveList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01f      	beq.n	8004b10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	2100      	movs	r1, #0
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff88 	bl	80049f0 <xTimerGenericCommand>
 8004ae0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	4798      	blx	r3
}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000123c 	.word	0x2000123c

08004b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f857 	bl	8004be4 <prvGetNextExpireTime>
 8004b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f803 	bl	8004b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b42:	f000 f8d5 	bl	8004cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b46:	e7f1      	b.n	8004b2c <prvTimerTask+0x8>

08004b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b52:	f7ff fa43 	bl	8003fdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f866 	bl	8004c2c <prvSampleTimeNow>
 8004b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d130      	bne.n	8004bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <prvProcessTimerOrBlockTask+0x3c>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d806      	bhi.n	8004b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b76:	f7ff fa3f 	bl	8003ff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ff85 	bl	8004a8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b82:	e024      	b.n	8004bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <prvProcessTimerOrBlockTask+0x90>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <prvProcessTimerOrBlockTask+0x50>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x52>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <prvProcessTimerOrBlockTask+0x94>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f7fe ffa7 	bl	8003afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bae:	f7ff fa23 	bl	8003ff8 <xTaskResumeAll>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <prvProcessTimerOrBlockTask+0x98>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
}
 8004bc8:	e001      	b.n	8004bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bca:	f7ff fa15 	bl	8003ff8 <xTaskResumeAll>
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20001240 	.word	0x20001240
 8004bdc:	20001244 	.word	0x20001244
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <prvGetNextExpireTime+0x44>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <prvGetNextExpireTime+0x16>
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	e000      	b.n	8004bfc <prvGetNextExpireTime+0x18>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <prvGetNextExpireTime+0x44>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e001      	b.n	8004c18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000123c 	.word	0x2000123c

08004c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c34:	f7ff fa7e 	bl	8004134 <xTaskGetTickCount>
 8004c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <prvSampleTimeNow+0x3c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d205      	bcs.n	8004c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c44:	f000 f936 	bl	8004eb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <prvSampleTimeNow+0x3c>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	2000124c 	.word	0x2000124c

08004c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d812      	bhi.n	8004cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e01b      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <prvInsertTimerInActiveList+0x7c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fe f902 	bl	8002eba <vListInsert>
 8004cb6:	e012      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d206      	bcs.n	8004cce <prvInsertTimerInActiveList+0x62>
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e007      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvInsertTimerInActiveList+0x80>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fe f8ee 	bl	8002eba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20001240 	.word	0x20001240
 8004cec:	2000123c 	.word	0x2000123c

08004cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cf6:	e0ca      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da18      	bge.n	8004d30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	3304      	adds	r3, #4
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	61fb      	str	r3, [r7, #28]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d26:	6850      	ldr	r0, [r2, #4]
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f2c0 80ab 	blt.w	8004e8e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe f8ef 	bl	8002f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4e:	463b      	mov	r3, r7
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff6b 	bl	8004c2c <prvSampleTimeNow>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	f200 8096 	bhi.w	8004e8c <prvProcessReceivedCommands+0x19c>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <prvProcessReceivedCommands+0x78>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d91 	.word	0x08004d91
 8004d74:	08004e05 	.word	0x08004e05
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e63 	.word	0x08004e63
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004d91 	.word	0x08004d91
 8004d88:	08004e05 	.word	0x08004e05
 8004d8c:	08004e19 	.word	0x08004e19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	18d1      	adds	r1, r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db0:	f7ff ff5c 	bl	8004c6c <prvInsertTimerInActiveList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d069      	beq.n	8004e8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05e      	beq.n	8004e8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f7ff fe05 	bl	80049f0 <xTimerGenericCommand>
 8004de6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14f      	bne.n	8004e8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	61bb      	str	r3, [r7, #24]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e16:	e03a      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	617b      	str	r3, [r7, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	18d1      	adds	r1, r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5c:	f7ff ff06 	bl	8004c6c <prvInsertTimerInActiveList>
					break;
 8004e60:	e015      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e72:	f000 fbdd 	bl	8005630 <vPortFree>
 8004e76:	e00a      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e8a:	e000      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004e8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <prvProcessReceivedCommands+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	1d39      	adds	r1, r7, #4
 8004e94:	2200      	movs	r2, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fb96 	bl	80035c8 <xQueueReceive>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f47f af2a 	bne.w	8004cf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3730      	adds	r7, #48	; 0x30
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20001244 	.word	0x20001244

08004eb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eba:	e048      	b.n	8004f4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe f829 	bl	8002f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02e      	beq.n	8004f4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d90e      	bls.n	8004f20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fd ffce 	bl	8002eba <vListInsert>
 8004f1e:	e016      	b.n	8004f4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f20:	2300      	movs	r3, #0
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff fd60 	bl	80049f0 <xTimerGenericCommand>
 8004f30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	603b      	str	r3, [r7, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1b1      	bne.n	8004ebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <prvSwitchTimerLists+0xc4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <prvSwitchTimerLists+0xc4>)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6013      	str	r3, [r2, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	2000123c 	.word	0x2000123c
 8004f78:	20001240 	.word	0x20001240

08004f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f82:	f000 f967 	bl	8005254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d120      	bne.n	8004fd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f8e:	4814      	ldr	r0, [pc, #80]	; (8004fe0 <prvCheckForValidListAndQueue+0x64>)
 8004f90:	f7fd ff42 	bl	8002e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f94:	4813      	ldr	r0, [pc, #76]	; (8004fe4 <prvCheckForValidListAndQueue+0x68>)
 8004f96:	f7fd ff3f 	bl	8002e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <prvCheckForValidListAndQueue+0x6c>)
 8004f9c:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <prvCheckForValidListAndQueue+0x64>)
 8004f9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <prvCheckForValidListAndQueue+0x70>)
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <prvCheckForValidListAndQueue+0x68>)
 8004fa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <prvCheckForValidListAndQueue+0x74>)
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <prvCheckForValidListAndQueue+0x78>)
 8004fae:	2110      	movs	r1, #16
 8004fb0:	200a      	movs	r0, #10
 8004fb2:	f7fe f84d 	bl	8003050 <xQueueGenericCreateStatic>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	490b      	ldr	r1, [pc, #44]	; (8004ff8 <prvCheckForValidListAndQueue+0x7c>)
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fd6c 	bl	8003aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd0:	f000 f970 	bl	80052b4 <vPortExitCritical>
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20001244 	.word	0x20001244
 8004fe0:	20001214 	.word	0x20001214
 8004fe4:	20001228 	.word	0x20001228
 8004fe8:	2000123c 	.word	0x2000123c
 8004fec:	20001240 	.word	0x20001240
 8004ff0:	200012f0 	.word	0x200012f0
 8004ff4:	20001250 	.word	0x20001250
 8004ff8:	0800a0a8 	.word	0x0800a0a8

08004ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3b04      	subs	r3, #4
 800500c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3b04      	subs	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800502c:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <pxPortInitialiseStack+0x64>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3b14      	subs	r3, #20
 8005036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f06f 0202 	mvn.w	r2, #2
 800504a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b20      	subs	r3, #32
 8005050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	08005065 	.word	0x08005065

08005064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <prvTaskExitError+0x54>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d00a      	beq.n	800508e <prvTaskExitError+0x2a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvTaskExitError+0x28>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050a2:	bf00      	nop
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0fc      	beq.n	80050a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	00000000 	.word	0x00000000

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <xPortStartScheduler+0x120>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a46      	ldr	r2, [pc, #280]	; (8005234 <xPortStartScheduler+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10a      	bne.n	8005136 <xPortStartScheduler+0x26>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005136:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <xPortStartScheduler+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10a      	bne.n	8005156 <xPortStartScheduler+0x46>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <xPortStartScheduler+0x12c>)
 8005158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <xPortStartScheduler+0x130>)
 800517c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xPortStartScheduler+0x134>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005184:	e009      	b.n	800519a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <xPortStartScheduler+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3b01      	subs	r3, #1
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <xPortStartScheduler+0x134>)
 800518e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d0ef      	beq.n	8005186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <xPortStartScheduler+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1c3 0307 	rsb	r3, r3, #7
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d00a      	beq.n	80051c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c8:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <xPortStartScheduler+0x134>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <xPortStartScheduler+0x134>)
 80051d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xPortStartScheduler+0x134>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <xPortStartScheduler+0x134>)
 80051dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <xPortStartScheduler+0x138>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <xPortStartScheduler+0x138>)
 80051ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xPortStartScheduler+0x138>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <xPortStartScheduler+0x138>)
 80051f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051fe:	f000 f8dd 	bl	80053bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <xPortStartScheduler+0x13c>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005208:	f000 f8fc 	bl	8005404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xPortStartScheduler+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <xPortStartScheduler+0x140>)
 8005212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005218:	f7ff ff66 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800521c:	f7ff f854 	bl	80042c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005220:	f7ff ff20 	bl	8005064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00
 8005234:	410fc271 	.word	0x410fc271
 8005238:	410fc270 	.word	0x410fc270
 800523c:	e000e400 	.word	0xe000e400
 8005240:	20001340 	.word	0x20001340
 8005244:	20001344 	.word	0x20001344
 8005248:	e000ed20 	.word	0xe000ed20
 800524c:	2000000c 	.word	0x2000000c
 8005250:	e000ef34 	.word	0xe000ef34

08005254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <vPortEnterCritical+0x58>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vPortEnterCritical+0x58>)
 8005276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <vPortEnterCritical+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10f      	bne.n	80052a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortEnterCritical+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortEnterCritical+0x4a>
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2000000c 	.word	0x2000000c
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vPortExitCritical+0x50>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <vPortExitCritical+0x24>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <vPortExitCritical+0x50>)
 80052e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <vPortExitCritical+0x42>
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f383 8811 	msr	BASEPRI, r3
}
 80052f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2000000c 	.word	0x2000000c
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7fe ffc2 	bl	80042c8 <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005392:	f7fe fedf 	bl	8004154 <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <xPortSysTickHandler+0x40>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vPortSetupTimerInterrupt+0x44>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	e000e018 	.word	0xe000e018
 80053f8:	20000000 	.word	0x20000000
 80053fc:	10624dd3 	.word	0x10624dd3
 8005400:	e000e014 	.word	0xe000e014

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005412:	bf00      	nop
 8005414:	e000ed88 	.word	0xe000ed88

08005418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d914      	bls.n	8005454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <vPortValidateInterruptPriority+0x70>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vPortValidateInterruptPriority+0x74>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	7afa      	ldrb	r2, [r7, #11]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20a      	bcs.n	8005454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <vPortValidateInterruptPriority+0x78>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <vPortValidateInterruptPriority+0x7c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90a      	bls.n	800547a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	603b      	str	r3, [r7, #0]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <vPortValidateInterruptPriority+0x60>
	}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e3f0 	.word	0xe000e3f0
 800548c:	20001340 	.word	0x20001340
 8005490:	e000ed0c 	.word	0xe000ed0c
 8005494:	20001344 	.word	0x20001344

08005498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054a4:	f7fe fd9a 	bl	8003fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054a8:	4b5b      	ldr	r3, [pc, #364]	; (8005618 <pvPortMalloc+0x180>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b0:	f000 f920 	bl	80056f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <pvPortMalloc+0x184>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 8093 	bne.w	80055e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01d      	beq.n	8005504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054c8:	2208      	movs	r2, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0x6c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <pvPortMalloc+0x150>
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d869      	bhi.n	80055e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005514:	4b43      	ldr	r3, [pc, #268]	; (8005624 <pvPortMalloc+0x18c>)
 8005516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <pvPortMalloc+0x18c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551e:	e004      	b.n	800552a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <pvPortMalloc+0xa4>
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f1      	bne.n	8005520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <pvPortMalloc+0x180>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d050      	beq.n	80055e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2208      	movs	r2, #8
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2308      	movs	r3, #8
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d91f      	bls.n	80055a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <pvPortMalloc+0xf8>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a2:	69b8      	ldr	r0, [r7, #24]
 80055a4:	f000 f908 	bl	80057b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <pvPortMalloc+0x188>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <pvPortMalloc+0x188>)
 80055b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <pvPortMalloc+0x188>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <pvPortMalloc+0x190>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <pvPortMalloc+0x190>)
 80055c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <pvPortMalloc+0x184>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x194>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a11      	ldr	r2, [pc, #68]	; (800562c <pvPortMalloc+0x194>)
 80055e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055e8:	f7fe fd06 	bl	8003ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <pvPortMalloc+0x174>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <pvPortMalloc+0x172>
	return pvReturn;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20004f50 	.word	0x20004f50
 800561c:	20004f64 	.word	0x20004f64
 8005620:	20004f54 	.word	0x20004f54
 8005624:	20004f48 	.word	0x20004f48
 8005628:	20004f58 	.word	0x20004f58
 800562c:	20004f5c 	.word	0x20004f5c

08005630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04d      	beq.n	80056de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005642:	2308      	movs	r3, #8
 8005644:	425b      	negs	r3, r3
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <vPortFree+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <vPortFree+0x44>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <vPortFree+0x62>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <vPortFree+0xb8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vPortFree+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056b8:	f7fe fc90 	bl	8003fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <vPortFree+0xbc>)
 80056c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f000 f874 	bl	80057b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <vPortFree+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <vPortFree+0xc0>)
 80056d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056da:	f7fe fc8d 	bl	8003ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20004f64 	.word	0x20004f64
 80056ec:	20004f54 	.word	0x20004f54
 80056f0:	20004f60 	.word	0x20004f60

080056f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <prvHeapInit+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3307      	adds	r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <prvHeapInit+0xac>)
 8005724:	4413      	add	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <prvHeapInit+0xb0>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <prvHeapInit+0xb0>)
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005740:	2208      	movs	r2, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <prvHeapInit+0xb4>)
 8005754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <prvHeapInit+0xb4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <prvHeapInit+0xb4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvHeapInit+0xb4>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <prvHeapInit+0xb8>)
 8005782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvHeapInit+0xbc>)
 800578a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvHeapInit+0xc0>)
 800578e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20001348 	.word	0x20001348
 80057a4:	20004f48 	.word	0x20004f48
 80057a8:	20004f50 	.word	0x20004f50
 80057ac:	20004f58 	.word	0x20004f58
 80057b0:	20004f54 	.word	0x20004f54
 80057b4:	20004f64 	.word	0x20004f64

080057b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <prvInsertBlockIntoFreeList+0xac>)
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <prvInsertBlockIntoFreeList+0x14>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d8f7      	bhi.n	80057c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d108      	bne.n	80057fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d118      	bne.n	8005840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d00d      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	441a      	add	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e008      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e003      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d002      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20004f48 	.word	0x20004f48
 8005868:	20004f50 	.word	0x20004f50

0800586c <__cvt>:
 800586c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	ec55 4b10 	vmov	r4, r5, d0
 8005874:	2d00      	cmp	r5, #0
 8005876:	460e      	mov	r6, r1
 8005878:	4619      	mov	r1, r3
 800587a:	462b      	mov	r3, r5
 800587c:	bfbb      	ittet	lt
 800587e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005882:	461d      	movlt	r5, r3
 8005884:	2300      	movge	r3, #0
 8005886:	232d      	movlt	r3, #45	; 0x2d
 8005888:	700b      	strb	r3, [r1, #0]
 800588a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800588c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005890:	4691      	mov	r9, r2
 8005892:	f023 0820 	bic.w	r8, r3, #32
 8005896:	bfbc      	itt	lt
 8005898:	4622      	movlt	r2, r4
 800589a:	4614      	movlt	r4, r2
 800589c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a0:	d005      	beq.n	80058ae <__cvt+0x42>
 80058a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058a6:	d100      	bne.n	80058aa <__cvt+0x3e>
 80058a8:	3601      	adds	r6, #1
 80058aa:	2102      	movs	r1, #2
 80058ac:	e000      	b.n	80058b0 <__cvt+0x44>
 80058ae:	2103      	movs	r1, #3
 80058b0:	ab03      	add	r3, sp, #12
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	ab02      	add	r3, sp, #8
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	ec45 4b10 	vmov	d0, r4, r5
 80058bc:	4653      	mov	r3, sl
 80058be:	4632      	mov	r2, r6
 80058c0:	f001 f89a 	bl	80069f8 <_dtoa_r>
 80058c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058c8:	4607      	mov	r7, r0
 80058ca:	d102      	bne.n	80058d2 <__cvt+0x66>
 80058cc:	f019 0f01 	tst.w	r9, #1
 80058d0:	d022      	beq.n	8005918 <__cvt+0xac>
 80058d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058d6:	eb07 0906 	add.w	r9, r7, r6
 80058da:	d110      	bne.n	80058fe <__cvt+0x92>
 80058dc:	783b      	ldrb	r3, [r7, #0]
 80058de:	2b30      	cmp	r3, #48	; 0x30
 80058e0:	d10a      	bne.n	80058f8 <__cvt+0x8c>
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fb f8f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ee:	b918      	cbnz	r0, 80058f8 <__cvt+0x8c>
 80058f0:	f1c6 0601 	rsb	r6, r6, #1
 80058f4:	f8ca 6000 	str.w	r6, [sl]
 80058f8:	f8da 3000 	ldr.w	r3, [sl]
 80058fc:	4499      	add	r9, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	4620      	mov	r0, r4
 8005904:	4629      	mov	r1, r5
 8005906:	f7fb f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800590a:	b108      	cbz	r0, 8005910 <__cvt+0xa4>
 800590c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005910:	2230      	movs	r2, #48	; 0x30
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	454b      	cmp	r3, r9
 8005916:	d307      	bcc.n	8005928 <__cvt+0xbc>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800591c:	1bdb      	subs	r3, r3, r7
 800591e:	4638      	mov	r0, r7
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	b004      	add	sp, #16
 8005924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005928:	1c59      	adds	r1, r3, #1
 800592a:	9103      	str	r1, [sp, #12]
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e7f0      	b.n	8005912 <__cvt+0xa6>

08005930 <__exponent>:
 8005930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005932:	4603      	mov	r3, r0
 8005934:	2900      	cmp	r1, #0
 8005936:	bfb8      	it	lt
 8005938:	4249      	neglt	r1, r1
 800593a:	f803 2b02 	strb.w	r2, [r3], #2
 800593e:	bfb4      	ite	lt
 8005940:	222d      	movlt	r2, #45	; 0x2d
 8005942:	222b      	movge	r2, #43	; 0x2b
 8005944:	2909      	cmp	r1, #9
 8005946:	7042      	strb	r2, [r0, #1]
 8005948:	dd2a      	ble.n	80059a0 <__exponent+0x70>
 800594a:	f10d 0207 	add.w	r2, sp, #7
 800594e:	4617      	mov	r7, r2
 8005950:	260a      	movs	r6, #10
 8005952:	4694      	mov	ip, r2
 8005954:	fb91 f5f6 	sdiv	r5, r1, r6
 8005958:	fb06 1415 	mls	r4, r6, r5, r1
 800595c:	3430      	adds	r4, #48	; 0x30
 800595e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005962:	460c      	mov	r4, r1
 8005964:	2c63      	cmp	r4, #99	; 0x63
 8005966:	f102 32ff 	add.w	r2, r2, #4294967295
 800596a:	4629      	mov	r1, r5
 800596c:	dcf1      	bgt.n	8005952 <__exponent+0x22>
 800596e:	3130      	adds	r1, #48	; 0x30
 8005970:	f1ac 0402 	sub.w	r4, ip, #2
 8005974:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005978:	1c41      	adds	r1, r0, #1
 800597a:	4622      	mov	r2, r4
 800597c:	42ba      	cmp	r2, r7
 800597e:	d30a      	bcc.n	8005996 <__exponent+0x66>
 8005980:	f10d 0209 	add.w	r2, sp, #9
 8005984:	eba2 020c 	sub.w	r2, r2, ip
 8005988:	42bc      	cmp	r4, r7
 800598a:	bf88      	it	hi
 800598c:	2200      	movhi	r2, #0
 800598e:	4413      	add	r3, r2
 8005990:	1a18      	subs	r0, r3, r0
 8005992:	b003      	add	sp, #12
 8005994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005996:	f812 5b01 	ldrb.w	r5, [r2], #1
 800599a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800599e:	e7ed      	b.n	800597c <__exponent+0x4c>
 80059a0:	2330      	movs	r3, #48	; 0x30
 80059a2:	3130      	adds	r1, #48	; 0x30
 80059a4:	7083      	strb	r3, [r0, #2]
 80059a6:	70c1      	strb	r1, [r0, #3]
 80059a8:	1d03      	adds	r3, r0, #4
 80059aa:	e7f1      	b.n	8005990 <__exponent+0x60>

080059ac <_printf_float>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	ed2d 8b02 	vpush	{d8}
 80059b4:	b08d      	sub	sp, #52	; 0x34
 80059b6:	460c      	mov	r4, r1
 80059b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059bc:	4616      	mov	r6, r2
 80059be:	461f      	mov	r7, r3
 80059c0:	4605      	mov	r5, r0
 80059c2:	f000 ff05 	bl	80067d0 <_localeconv_r>
 80059c6:	f8d0 a000 	ldr.w	sl, [r0]
 80059ca:	4650      	mov	r0, sl
 80059cc:	f7fa fc58 	bl	8000280 <strlen>
 80059d0:	2300      	movs	r3, #0
 80059d2:	930a      	str	r3, [sp, #40]	; 0x28
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	f8d8 3000 	ldr.w	r3, [r8]
 80059dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059e0:	3307      	adds	r3, #7
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	f103 0208 	add.w	r2, r3, #8
 80059ea:	f8c8 2000 	str.w	r2, [r8]
 80059ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059fc:	ee08 0a10 	vmov	s16, r0
 8005a00:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a08:	4b9e      	ldr	r3, [pc, #632]	; (8005c84 <_printf_float+0x2d8>)
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	f7fb f895 	bl	8000b3c <__aeabi_dcmpun>
 8005a12:	bb88      	cbnz	r0, 8005a78 <_printf_float+0xcc>
 8005a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a18:	4b9a      	ldr	r3, [pc, #616]	; (8005c84 <_printf_float+0x2d8>)
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	f7fb f86f 	bl	8000b00 <__aeabi_dcmple>
 8005a22:	bb48      	cbnz	r0, 8005a78 <_printf_float+0xcc>
 8005a24:	2200      	movs	r2, #0
 8005a26:	2300      	movs	r3, #0
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fb f85e 	bl	8000aec <__aeabi_dcmplt>
 8005a30:	b110      	cbz	r0, 8005a38 <_printf_float+0x8c>
 8005a32:	232d      	movs	r3, #45	; 0x2d
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	4a93      	ldr	r2, [pc, #588]	; (8005c88 <_printf_float+0x2dc>)
 8005a3a:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <_printf_float+0x2e0>)
 8005a3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a40:	bf94      	ite	ls
 8005a42:	4690      	movls	r8, r2
 8005a44:	4698      	movhi	r8, r3
 8005a46:	2303      	movs	r3, #3
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	f023 0304 	bic.w	r3, r3, #4
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	9700      	str	r7, [sp, #0]
 8005a58:	4633      	mov	r3, r6
 8005a5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f9da 	bl	8005e18 <_printf_common>
 8005a64:	3001      	adds	r0, #1
 8005a66:	f040 8090 	bne.w	8005b8a <_printf_float+0x1de>
 8005a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6e:	b00d      	add	sp, #52	; 0x34
 8005a70:	ecbd 8b02 	vpop	{d8}
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fb f85c 	bl	8000b3c <__aeabi_dcmpun>
 8005a84:	b140      	cbz	r0, 8005a98 <_printf_float+0xec>
 8005a86:	464b      	mov	r3, r9
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bfbc      	itt	lt
 8005a8c:	232d      	movlt	r3, #45	; 0x2d
 8005a8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a92:	4a7f      	ldr	r2, [pc, #508]	; (8005c90 <_printf_float+0x2e4>)
 8005a94:	4b7f      	ldr	r3, [pc, #508]	; (8005c94 <_printf_float+0x2e8>)
 8005a96:	e7d1      	b.n	8005a3c <_printf_float+0x90>
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a9e:	9206      	str	r2, [sp, #24]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	d13f      	bne.n	8005b24 <_printf_float+0x178>
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	6861      	ldr	r1, [r4, #4]
 8005aac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9303      	str	r3, [sp, #12]
 8005ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ab6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aba:	ab09      	add	r3, sp, #36	; 0x24
 8005abc:	ec49 8b10 	vmov	d0, r8, r9
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7ff fecf 	bl	800586c <__cvt>
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad2:	2b47      	cmp	r3, #71	; 0x47
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	d108      	bne.n	8005aea <_printf_float+0x13e>
 8005ad8:	1cc8      	adds	r0, r1, #3
 8005ada:	db02      	blt.n	8005ae2 <_printf_float+0x136>
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	dd41      	ble.n	8005b66 <_printf_float+0x1ba>
 8005ae2:	f1ab 0302 	sub.w	r3, fp, #2
 8005ae6:	fa5f fb83 	uxtb.w	fp, r3
 8005aea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aee:	d820      	bhi.n	8005b32 <_printf_float+0x186>
 8005af0:	3901      	subs	r1, #1
 8005af2:	465a      	mov	r2, fp
 8005af4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005af8:	9109      	str	r1, [sp, #36]	; 0x24
 8005afa:	f7ff ff19 	bl	8005930 <__exponent>
 8005afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b00:	1813      	adds	r3, r2, r0
 8005b02:	2a01      	cmp	r2, #1
 8005b04:	4681      	mov	r9, r0
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	dc02      	bgt.n	8005b10 <_printf_float+0x164>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	07d2      	lsls	r2, r2, #31
 8005b0e:	d501      	bpl.n	8005b14 <_printf_float+0x168>
 8005b10:	3301      	adds	r3, #1
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d09c      	beq.n	8005a56 <_printf_float+0xaa>
 8005b1c:	232d      	movs	r3, #45	; 0x2d
 8005b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b22:	e798      	b.n	8005a56 <_printf_float+0xaa>
 8005b24:	9a06      	ldr	r2, [sp, #24]
 8005b26:	2a47      	cmp	r2, #71	; 0x47
 8005b28:	d1be      	bne.n	8005aa8 <_printf_float+0xfc>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1bc      	bne.n	8005aa8 <_printf_float+0xfc>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7b9      	b.n	8005aa6 <_printf_float+0xfa>
 8005b32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b36:	d118      	bne.n	8005b6a <_printf_float+0x1be>
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	dd0b      	ble.n	8005b56 <_printf_float+0x1aa>
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	b913      	cbnz	r3, 8005b48 <_printf_float+0x19c>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	07d0      	lsls	r0, r2, #31
 8005b46:	d502      	bpl.n	8005b4e <_printf_float+0x1a2>
 8005b48:	3301      	adds	r3, #1
 8005b4a:	440b      	add	r3, r1
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b50:	f04f 0900 	mov.w	r9, #0
 8005b54:	e7de      	b.n	8005b14 <_printf_float+0x168>
 8005b56:	b913      	cbnz	r3, 8005b5e <_printf_float+0x1b2>
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	07d2      	lsls	r2, r2, #31
 8005b5c:	d501      	bpl.n	8005b62 <_printf_float+0x1b6>
 8005b5e:	3302      	adds	r3, #2
 8005b60:	e7f4      	b.n	8005b4c <_printf_float+0x1a0>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7f2      	b.n	8005b4c <_printf_float+0x1a0>
 8005b66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	db05      	blt.n	8005b7c <_printf_float+0x1d0>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	6121      	str	r1, [r4, #16]
 8005b74:	07d8      	lsls	r0, r3, #31
 8005b76:	d5ea      	bpl.n	8005b4e <_printf_float+0x1a2>
 8005b78:	1c4b      	adds	r3, r1, #1
 8005b7a:	e7e7      	b.n	8005b4c <_printf_float+0x1a0>
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	bfd4      	ite	le
 8005b80:	f1c1 0202 	rsble	r2, r1, #2
 8005b84:	2201      	movgt	r2, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	e7e0      	b.n	8005b4c <_printf_float+0x1a0>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	055a      	lsls	r2, r3, #21
 8005b8e:	d407      	bmi.n	8005ba0 <_printf_float+0x1f4>
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	4642      	mov	r2, r8
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d12c      	bne.n	8005bf8 <_printf_float+0x24c>
 8005b9e:	e764      	b.n	8005a6a <_printf_float+0xbe>
 8005ba0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ba4:	f240 80e0 	bls.w	8005d68 <_printf_float+0x3bc>
 8005ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bac:	2200      	movs	r2, #0
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f7fa ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d034      	beq.n	8005c22 <_printf_float+0x276>
 8005bb8:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <_printf_float+0x2ec>)
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f af51 	beq.w	8005a6a <_printf_float+0xbe>
 8005bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	db02      	blt.n	8005bd6 <_printf_float+0x22a>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07d8      	lsls	r0, r3, #31
 8005bd4:	d510      	bpl.n	8005bf8 <_printf_float+0x24c>
 8005bd6:	ee18 3a10 	vmov	r3, s16
 8005bda:	4652      	mov	r2, sl
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af41 	beq.w	8005a6a <_printf_float+0xbe>
 8005be8:	f04f 0800 	mov.w	r8, #0
 8005bec:	f104 091a 	add.w	r9, r4, #26
 8005bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	dc09      	bgt.n	8005c0c <_printf_float+0x260>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	079b      	lsls	r3, r3, #30
 8005bfc:	f100 8107 	bmi.w	8005e0e <_printf_float+0x462>
 8005c00:	68e0      	ldr	r0, [r4, #12]
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	4298      	cmp	r0, r3
 8005c06:	bfb8      	it	lt
 8005c08:	4618      	movlt	r0, r3
 8005c0a:	e730      	b.n	8005a6e <_printf_float+0xc2>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	464a      	mov	r2, r9
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af27 	beq.w	8005a6a <_printf_float+0xbe>
 8005c1c:	f108 0801 	add.w	r8, r8, #1
 8005c20:	e7e6      	b.n	8005bf0 <_printf_float+0x244>
 8005c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dc39      	bgt.n	8005c9c <_printf_float+0x2f0>
 8005c28:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <_printf_float+0x2ec>)
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af19 	beq.w	8005a6a <_printf_float+0xbe>
 8005c38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d102      	bne.n	8005c46 <_printf_float+0x29a>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d5d8      	bpl.n	8005bf8 <_printf_float+0x24c>
 8005c46:	ee18 3a10 	vmov	r3, s16
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f af09 	beq.w	8005a6a <_printf_float+0xbe>
 8005c58:	f04f 0900 	mov.w	r9, #0
 8005c5c:	f104 0a1a 	add.w	sl, r4, #26
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	425b      	negs	r3, r3
 8005c64:	454b      	cmp	r3, r9
 8005c66:	dc01      	bgt.n	8005c6c <_printf_float+0x2c0>
 8005c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6a:	e792      	b.n	8005b92 <_printf_float+0x1e6>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f aef7 	beq.w	8005a6a <_printf_float+0xbe>
 8005c7c:	f109 0901 	add.w	r9, r9, #1
 8005c80:	e7ee      	b.n	8005c60 <_printf_float+0x2b4>
 8005c82:	bf00      	nop
 8005c84:	7fefffff 	.word	0x7fefffff
 8005c88:	0800a178 	.word	0x0800a178
 8005c8c:	0800a17c 	.word	0x0800a17c
 8005c90:	0800a180 	.word	0x0800a180
 8005c94:	0800a184 	.word	0x0800a184
 8005c98:	0800a188 	.word	0x0800a188
 8005c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	bfa8      	it	ge
 8005ca4:	461a      	movge	r2, r3
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	4691      	mov	r9, r2
 8005caa:	dc37      	bgt.n	8005d1c <_printf_float+0x370>
 8005cac:	f04f 0b00 	mov.w	fp, #0
 8005cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb4:	f104 021a 	add.w	r2, r4, #26
 8005cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	eba3 0309 	sub.w	r3, r3, r9
 8005cc0:	455b      	cmp	r3, fp
 8005cc2:	dc33      	bgt.n	8005d2c <_printf_float+0x380>
 8005cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	db3b      	blt.n	8005d44 <_printf_float+0x398>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07da      	lsls	r2, r3, #31
 8005cd0:	d438      	bmi.n	8005d44 <_printf_float+0x398>
 8005cd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cd6:	eba2 0903 	sub.w	r9, r2, r3
 8005cda:	9b05      	ldr	r3, [sp, #20]
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	4591      	cmp	r9, r2
 8005ce0:	bfa8      	it	ge
 8005ce2:	4691      	movge	r9, r2
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dc35      	bgt.n	8005d56 <_printf_float+0x3aa>
 8005cea:	f04f 0800 	mov.w	r8, #0
 8005cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf2:	f104 0a1a 	add.w	sl, r4, #26
 8005cf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	eba3 0309 	sub.w	r3, r3, r9
 8005d00:	4543      	cmp	r3, r8
 8005d02:	f77f af79 	ble.w	8005bf8 <_printf_float+0x24c>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f aeaa 	beq.w	8005a6a <_printf_float+0xbe>
 8005d16:	f108 0801 	add.w	r8, r8, #1
 8005d1a:	e7ec      	b.n	8005cf6 <_printf_float+0x34a>
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4642      	mov	r2, r8
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1c0      	bne.n	8005cac <_printf_float+0x300>
 8005d2a:	e69e      	b.n	8005a6a <_printf_float+0xbe>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	9205      	str	r2, [sp, #20]
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f ae97 	beq.w	8005a6a <_printf_float+0xbe>
 8005d3c:	9a05      	ldr	r2, [sp, #20]
 8005d3e:	f10b 0b01 	add.w	fp, fp, #1
 8005d42:	e7b9      	b.n	8005cb8 <_printf_float+0x30c>
 8005d44:	ee18 3a10 	vmov	r3, s16
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	d1be      	bne.n	8005cd2 <_printf_float+0x326>
 8005d54:	e689      	b.n	8005a6a <_printf_float+0xbe>
 8005d56:	9a05      	ldr	r2, [sp, #20]
 8005d58:	464b      	mov	r3, r9
 8005d5a:	4442      	add	r2, r8
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	d1c1      	bne.n	8005cea <_printf_float+0x33e>
 8005d66:	e680      	b.n	8005a6a <_printf_float+0xbe>
 8005d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d6a:	2a01      	cmp	r2, #1
 8005d6c:	dc01      	bgt.n	8005d72 <_printf_float+0x3c6>
 8005d6e:	07db      	lsls	r3, r3, #31
 8005d70:	d53a      	bpl.n	8005de8 <_printf_float+0x43c>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4642      	mov	r2, r8
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae74 	beq.w	8005a6a <_printf_float+0xbe>
 8005d82:	ee18 3a10 	vmov	r3, s16
 8005d86:	4652      	mov	r2, sl
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f ae6b 	beq.w	8005a6a <_printf_float+0xbe>
 8005d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005da0:	f7fa fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005da4:	b9d8      	cbnz	r0, 8005dde <_printf_float+0x432>
 8005da6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005daa:	f108 0201 	add.w	r2, r8, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	d10e      	bne.n	8005dd6 <_printf_float+0x42a>
 8005db8:	e657      	b.n	8005a6a <_printf_float+0xbe>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f ae50 	beq.w	8005a6a <_printf_float+0xbe>
 8005dca:	f108 0801 	add.w	r8, r8, #1
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	4543      	cmp	r3, r8
 8005dd4:	dcf1      	bgt.n	8005dba <_printf_float+0x40e>
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ddc:	e6da      	b.n	8005b94 <_printf_float+0x1e8>
 8005dde:	f04f 0800 	mov.w	r8, #0
 8005de2:	f104 0a1a 	add.w	sl, r4, #26
 8005de6:	e7f2      	b.n	8005dce <_printf_float+0x422>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4642      	mov	r2, r8
 8005dec:	e7df      	b.n	8005dae <_printf_float+0x402>
 8005dee:	2301      	movs	r3, #1
 8005df0:	464a      	mov	r2, r9
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f ae36 	beq.w	8005a6a <_printf_float+0xbe>
 8005dfe:	f108 0801 	add.w	r8, r8, #1
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e06:	1a5b      	subs	r3, r3, r1
 8005e08:	4543      	cmp	r3, r8
 8005e0a:	dcf0      	bgt.n	8005dee <_printf_float+0x442>
 8005e0c:	e6f8      	b.n	8005c00 <_printf_float+0x254>
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	f104 0919 	add.w	r9, r4, #25
 8005e16:	e7f4      	b.n	8005e02 <_printf_float+0x456>

08005e18 <_printf_common>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	4699      	mov	r9, r3
 8005e20:	688a      	ldr	r2, [r1, #8]
 8005e22:	690b      	ldr	r3, [r1, #16]
 8005e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	bfb8      	it	lt
 8005e2c:	4613      	movlt	r3, r2
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e34:	4607      	mov	r7, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	b10a      	cbz	r2, 8005e3e <_printf_common+0x26>
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	6033      	str	r3, [r6, #0]
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	0699      	lsls	r1, r3, #26
 8005e42:	bf42      	ittt	mi
 8005e44:	6833      	ldrmi	r3, [r6, #0]
 8005e46:	3302      	addmi	r3, #2
 8005e48:	6033      	strmi	r3, [r6, #0]
 8005e4a:	6825      	ldr	r5, [r4, #0]
 8005e4c:	f015 0506 	ands.w	r5, r5, #6
 8005e50:	d106      	bne.n	8005e60 <_printf_common+0x48>
 8005e52:	f104 0a19 	add.w	sl, r4, #25
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	6832      	ldr	r2, [r6, #0]
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	42ab      	cmp	r3, r5
 8005e5e:	dc26      	bgt.n	8005eae <_printf_common+0x96>
 8005e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e64:	1e13      	subs	r3, r2, #0
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	bf18      	it	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	0692      	lsls	r2, r2, #26
 8005e6e:	d42b      	bmi.n	8005ec8 <_printf_common+0xb0>
 8005e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e74:	4649      	mov	r1, r9
 8005e76:	4638      	mov	r0, r7
 8005e78:	47c0      	blx	r8
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d01e      	beq.n	8005ebc <_printf_common+0xa4>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	6922      	ldr	r2, [r4, #16]
 8005e82:	f003 0306 	and.w	r3, r3, #6
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	bf02      	ittt	eq
 8005e8a:	68e5      	ldreq	r5, [r4, #12]
 8005e8c:	6833      	ldreq	r3, [r6, #0]
 8005e8e:	1aed      	subeq	r5, r5, r3
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	bf0c      	ite	eq
 8005e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e98:	2500      	movne	r5, #0
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	bfc4      	itt	gt
 8005e9e:	1a9b      	subgt	r3, r3, r2
 8005ea0:	18ed      	addgt	r5, r5, r3
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	341a      	adds	r4, #26
 8005ea6:	42b5      	cmp	r5, r6
 8005ea8:	d11a      	bne.n	8005ee0 <_printf_common+0xc8>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e008      	b.n	8005ec0 <_printf_common+0xa8>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	47c0      	blx	r8
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d103      	bne.n	8005ec4 <_printf_common+0xac>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	e7c6      	b.n	8005e56 <_printf_common+0x3e>
 8005ec8:	18e1      	adds	r1, r4, r3
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	2030      	movs	r0, #48	; 0x30
 8005ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed2:	4422      	add	r2, r4
 8005ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005edc:	3302      	adds	r3, #2
 8005ede:	e7c7      	b.n	8005e70 <_printf_common+0x58>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c0      	blx	r8
 8005eea:	3001      	adds	r0, #1
 8005eec:	d0e6      	beq.n	8005ebc <_printf_common+0xa4>
 8005eee:	3601      	adds	r6, #1
 8005ef0:	e7d9      	b.n	8005ea6 <_printf_common+0x8e>
	...

08005ef4 <_printf_i>:
 8005ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	7e0f      	ldrb	r7, [r1, #24]
 8005efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005efc:	2f78      	cmp	r7, #120	; 0x78
 8005efe:	4691      	mov	r9, r2
 8005f00:	4680      	mov	r8, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	469a      	mov	sl, r3
 8005f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f0a:	d807      	bhi.n	8005f1c <_printf_i+0x28>
 8005f0c:	2f62      	cmp	r7, #98	; 0x62
 8005f0e:	d80a      	bhi.n	8005f26 <_printf_i+0x32>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	f000 80d4 	beq.w	80060be <_printf_i+0x1ca>
 8005f16:	2f58      	cmp	r7, #88	; 0x58
 8005f18:	f000 80c0 	beq.w	800609c <_printf_i+0x1a8>
 8005f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f24:	e03a      	b.n	8005f9c <_printf_i+0xa8>
 8005f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2a:	2b15      	cmp	r3, #21
 8005f2c:	d8f6      	bhi.n	8005f1c <_printf_i+0x28>
 8005f2e:	a101      	add	r1, pc, #4	; (adr r1, 8005f34 <_printf_i+0x40>)
 8005f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f34:	08005f8d 	.word	0x08005f8d
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005f1d 	.word	0x08005f1d
 8005f40:	08005f1d 	.word	0x08005f1d
 8005f44:	08005f1d 	.word	0x08005f1d
 8005f48:	08005f1d 	.word	0x08005f1d
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005f1d 	.word	0x08005f1d
 8005f54:	08005f1d 	.word	0x08005f1d
 8005f58:	08005f1d 	.word	0x08005f1d
 8005f5c:	08005f1d 	.word	0x08005f1d
 8005f60:	080060a5 	.word	0x080060a5
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	0800605f 	.word	0x0800605f
 8005f6c:	08005f1d 	.word	0x08005f1d
 8005f70:	08005f1d 	.word	0x08005f1d
 8005f74:	080060c7 	.word	0x080060c7
 8005f78:	08005f1d 	.word	0x08005f1d
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005f1d 	.word	0x08005f1d
 8005f84:	08005f1d 	.word	0x08005f1d
 8005f88:	08006067 	.word	0x08006067
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	602a      	str	r2, [r5, #0]
 8005f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e09f      	b.n	80060e0 <_printf_i+0x1ec>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	0607      	lsls	r7, r0, #24
 8005fa6:	f103 0104 	add.w	r1, r3, #4
 8005faa:	6029      	str	r1, [r5, #0]
 8005fac:	d501      	bpl.n	8005fb2 <_printf_i+0xbe>
 8005fae:	681e      	ldr	r6, [r3, #0]
 8005fb0:	e003      	b.n	8005fba <_printf_i+0xc6>
 8005fb2:	0646      	lsls	r6, r0, #25
 8005fb4:	d5fb      	bpl.n	8005fae <_printf_i+0xba>
 8005fb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	da03      	bge.n	8005fc6 <_printf_i+0xd2>
 8005fbe:	232d      	movs	r3, #45	; 0x2d
 8005fc0:	4276      	negs	r6, r6
 8005fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc6:	485a      	ldr	r0, [pc, #360]	; (8006130 <_printf_i+0x23c>)
 8005fc8:	230a      	movs	r3, #10
 8005fca:	e012      	b.n	8005ff2 <_printf_i+0xfe>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	6029      	str	r1, [r5, #0]
 8005fd4:	0605      	lsls	r5, r0, #24
 8005fd6:	d501      	bpl.n	8005fdc <_printf_i+0xe8>
 8005fd8:	681e      	ldr	r6, [r3, #0]
 8005fda:	e002      	b.n	8005fe2 <_printf_i+0xee>
 8005fdc:	0641      	lsls	r1, r0, #25
 8005fde:	d5fb      	bpl.n	8005fd8 <_printf_i+0xe4>
 8005fe0:	881e      	ldrh	r6, [r3, #0]
 8005fe2:	4853      	ldr	r0, [pc, #332]	; (8006130 <_printf_i+0x23c>)
 8005fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2308      	moveq	r3, #8
 8005fea:	230a      	movne	r3, #10
 8005fec:	2100      	movs	r1, #0
 8005fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff2:	6865      	ldr	r5, [r4, #4]
 8005ff4:	60a5      	str	r5, [r4, #8]
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	bfa2      	ittt	ge
 8005ffa:	6821      	ldrge	r1, [r4, #0]
 8005ffc:	f021 0104 	bicge.w	r1, r1, #4
 8006000:	6021      	strge	r1, [r4, #0]
 8006002:	b90e      	cbnz	r6, 8006008 <_printf_i+0x114>
 8006004:	2d00      	cmp	r5, #0
 8006006:	d04b      	beq.n	80060a0 <_printf_i+0x1ac>
 8006008:	4615      	mov	r5, r2
 800600a:	fbb6 f1f3 	udiv	r1, r6, r3
 800600e:	fb03 6711 	mls	r7, r3, r1, r6
 8006012:	5dc7      	ldrb	r7, [r0, r7]
 8006014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006018:	4637      	mov	r7, r6
 800601a:	42bb      	cmp	r3, r7
 800601c:	460e      	mov	r6, r1
 800601e:	d9f4      	bls.n	800600a <_printf_i+0x116>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d10b      	bne.n	800603c <_printf_i+0x148>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07de      	lsls	r6, r3, #31
 8006028:	d508      	bpl.n	800603c <_printf_i+0x148>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	6861      	ldr	r1, [r4, #4]
 800602e:	4299      	cmp	r1, r3
 8006030:	bfde      	ittt	le
 8006032:	2330      	movle	r3, #48	; 0x30
 8006034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800603c:	1b52      	subs	r2, r2, r5
 800603e:	6122      	str	r2, [r4, #16]
 8006040:	f8cd a000 	str.w	sl, [sp]
 8006044:	464b      	mov	r3, r9
 8006046:	aa03      	add	r2, sp, #12
 8006048:	4621      	mov	r1, r4
 800604a:	4640      	mov	r0, r8
 800604c:	f7ff fee4 	bl	8005e18 <_printf_common>
 8006050:	3001      	adds	r0, #1
 8006052:	d14a      	bne.n	80060ea <_printf_i+0x1f6>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	b004      	add	sp, #16
 800605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	f043 0320 	orr.w	r3, r3, #32
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	4833      	ldr	r0, [pc, #204]	; (8006134 <_printf_i+0x240>)
 8006068:	2778      	movs	r7, #120	; 0x78
 800606a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	6829      	ldr	r1, [r5, #0]
 8006072:	061f      	lsls	r7, r3, #24
 8006074:	f851 6b04 	ldr.w	r6, [r1], #4
 8006078:	d402      	bmi.n	8006080 <_printf_i+0x18c>
 800607a:	065f      	lsls	r7, r3, #25
 800607c:	bf48      	it	mi
 800607e:	b2b6      	uxthmi	r6, r6
 8006080:	07df      	lsls	r7, r3, #31
 8006082:	bf48      	it	mi
 8006084:	f043 0320 	orrmi.w	r3, r3, #32
 8006088:	6029      	str	r1, [r5, #0]
 800608a:	bf48      	it	mi
 800608c:	6023      	strmi	r3, [r4, #0]
 800608e:	b91e      	cbnz	r6, 8006098 <_printf_i+0x1a4>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	f023 0320 	bic.w	r3, r3, #32
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	2310      	movs	r3, #16
 800609a:	e7a7      	b.n	8005fec <_printf_i+0xf8>
 800609c:	4824      	ldr	r0, [pc, #144]	; (8006130 <_printf_i+0x23c>)
 800609e:	e7e4      	b.n	800606a <_printf_i+0x176>
 80060a0:	4615      	mov	r5, r2
 80060a2:	e7bd      	b.n	8006020 <_printf_i+0x12c>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	6826      	ldr	r6, [r4, #0]
 80060a8:	6961      	ldr	r1, [r4, #20]
 80060aa:	1d18      	adds	r0, r3, #4
 80060ac:	6028      	str	r0, [r5, #0]
 80060ae:	0635      	lsls	r5, r6, #24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	d501      	bpl.n	80060b8 <_printf_i+0x1c4>
 80060b4:	6019      	str	r1, [r3, #0]
 80060b6:	e002      	b.n	80060be <_printf_i+0x1ca>
 80060b8:	0670      	lsls	r0, r6, #25
 80060ba:	d5fb      	bpl.n	80060b4 <_printf_i+0x1c0>
 80060bc:	8019      	strh	r1, [r3, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	4615      	mov	r5, r2
 80060c4:	e7bc      	b.n	8006040 <_printf_i+0x14c>
 80060c6:	682b      	ldr	r3, [r5, #0]
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	602a      	str	r2, [r5, #0]
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	2100      	movs	r1, #0
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fa f884 	bl	80001e0 <memchr>
 80060d8:	b108      	cbz	r0, 80060de <_printf_i+0x1ea>
 80060da:	1b40      	subs	r0, r0, r5
 80060dc:	6060      	str	r0, [r4, #4]
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	2300      	movs	r3, #0
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e8:	e7aa      	b.n	8006040 <_printf_i+0x14c>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	462a      	mov	r2, r5
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d0ad      	beq.n	8006054 <_printf_i+0x160>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	079b      	lsls	r3, r3, #30
 80060fc:	d413      	bmi.n	8006126 <_printf_i+0x232>
 80060fe:	68e0      	ldr	r0, [r4, #12]
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	4298      	cmp	r0, r3
 8006104:	bfb8      	it	lt
 8006106:	4618      	movlt	r0, r3
 8006108:	e7a6      	b.n	8006058 <_printf_i+0x164>
 800610a:	2301      	movs	r3, #1
 800610c:	4632      	mov	r2, r6
 800610e:	4649      	mov	r1, r9
 8006110:	4640      	mov	r0, r8
 8006112:	47d0      	blx	sl
 8006114:	3001      	adds	r0, #1
 8006116:	d09d      	beq.n	8006054 <_printf_i+0x160>
 8006118:	3501      	adds	r5, #1
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	9903      	ldr	r1, [sp, #12]
 800611e:	1a5b      	subs	r3, r3, r1
 8006120:	42ab      	cmp	r3, r5
 8006122:	dcf2      	bgt.n	800610a <_printf_i+0x216>
 8006124:	e7eb      	b.n	80060fe <_printf_i+0x20a>
 8006126:	2500      	movs	r5, #0
 8006128:	f104 0619 	add.w	r6, r4, #25
 800612c:	e7f5      	b.n	800611a <_printf_i+0x226>
 800612e:	bf00      	nop
 8006130:	0800a18a 	.word	0x0800a18a
 8006134:	0800a19b 	.word	0x0800a19b

08006138 <_scanf_float>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	b087      	sub	sp, #28
 800613e:	4617      	mov	r7, r2
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	688b      	ldr	r3, [r1, #8]
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800614a:	bf83      	ittte	hi
 800614c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006150:	195b      	addhi	r3, r3, r5
 8006152:	9302      	strhi	r3, [sp, #8]
 8006154:	2300      	movls	r3, #0
 8006156:	bf86      	itte	hi
 8006158:	f240 135d 	movwhi	r3, #349	; 0x15d
 800615c:	608b      	strhi	r3, [r1, #8]
 800615e:	9302      	strls	r3, [sp, #8]
 8006160:	680b      	ldr	r3, [r1, #0]
 8006162:	468b      	mov	fp, r1
 8006164:	2500      	movs	r5, #0
 8006166:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800616a:	f84b 3b1c 	str.w	r3, [fp], #28
 800616e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006172:	4680      	mov	r8, r0
 8006174:	460c      	mov	r4, r1
 8006176:	465e      	mov	r6, fp
 8006178:	46aa      	mov	sl, r5
 800617a:	46a9      	mov	r9, r5
 800617c:	9501      	str	r5, [sp, #4]
 800617e:	68a2      	ldr	r2, [r4, #8]
 8006180:	b152      	cbz	r2, 8006198 <_scanf_float+0x60>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b4e      	cmp	r3, #78	; 0x4e
 8006188:	d864      	bhi.n	8006254 <_scanf_float+0x11c>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d83c      	bhi.n	8006208 <_scanf_float+0xd0>
 800618e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006192:	b2c8      	uxtb	r0, r1
 8006194:	280e      	cmp	r0, #14
 8006196:	d93a      	bls.n	800620e <_scanf_float+0xd6>
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	d003      	beq.n	80061a6 <_scanf_float+0x6e>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061aa:	f1ba 0f01 	cmp.w	sl, #1
 80061ae:	f200 8113 	bhi.w	80063d8 <_scanf_float+0x2a0>
 80061b2:	455e      	cmp	r6, fp
 80061b4:	f200 8105 	bhi.w	80063c2 <_scanf_float+0x28a>
 80061b8:	2501      	movs	r5, #1
 80061ba:	4628      	mov	r0, r5
 80061bc:	b007      	add	sp, #28
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061c6:	2a0d      	cmp	r2, #13
 80061c8:	d8e6      	bhi.n	8006198 <_scanf_float+0x60>
 80061ca:	a101      	add	r1, pc, #4	; (adr r1, 80061d0 <_scanf_float+0x98>)
 80061cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061d0:	0800630f 	.word	0x0800630f
 80061d4:	08006199 	.word	0x08006199
 80061d8:	08006199 	.word	0x08006199
 80061dc:	08006199 	.word	0x08006199
 80061e0:	0800636f 	.word	0x0800636f
 80061e4:	08006347 	.word	0x08006347
 80061e8:	08006199 	.word	0x08006199
 80061ec:	08006199 	.word	0x08006199
 80061f0:	0800631d 	.word	0x0800631d
 80061f4:	08006199 	.word	0x08006199
 80061f8:	08006199 	.word	0x08006199
 80061fc:	08006199 	.word	0x08006199
 8006200:	08006199 	.word	0x08006199
 8006204:	080062d5 	.word	0x080062d5
 8006208:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800620c:	e7db      	b.n	80061c6 <_scanf_float+0x8e>
 800620e:	290e      	cmp	r1, #14
 8006210:	d8c2      	bhi.n	8006198 <_scanf_float+0x60>
 8006212:	a001      	add	r0, pc, #4	; (adr r0, 8006218 <_scanf_float+0xe0>)
 8006214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006218:	080062c7 	.word	0x080062c7
 800621c:	08006199 	.word	0x08006199
 8006220:	080062c7 	.word	0x080062c7
 8006224:	0800635b 	.word	0x0800635b
 8006228:	08006199 	.word	0x08006199
 800622c:	08006275 	.word	0x08006275
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080062b1 	.word	0x080062b1
 8006238:	080062b1 	.word	0x080062b1
 800623c:	080062b1 	.word	0x080062b1
 8006240:	080062b1 	.word	0x080062b1
 8006244:	080062b1 	.word	0x080062b1
 8006248:	080062b1 	.word	0x080062b1
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	2b6e      	cmp	r3, #110	; 0x6e
 8006256:	d809      	bhi.n	800626c <_scanf_float+0x134>
 8006258:	2b60      	cmp	r3, #96	; 0x60
 800625a:	d8b2      	bhi.n	80061c2 <_scanf_float+0x8a>
 800625c:	2b54      	cmp	r3, #84	; 0x54
 800625e:	d077      	beq.n	8006350 <_scanf_float+0x218>
 8006260:	2b59      	cmp	r3, #89	; 0x59
 8006262:	d199      	bne.n	8006198 <_scanf_float+0x60>
 8006264:	2d07      	cmp	r5, #7
 8006266:	d197      	bne.n	8006198 <_scanf_float+0x60>
 8006268:	2508      	movs	r5, #8
 800626a:	e029      	b.n	80062c0 <_scanf_float+0x188>
 800626c:	2b74      	cmp	r3, #116	; 0x74
 800626e:	d06f      	beq.n	8006350 <_scanf_float+0x218>
 8006270:	2b79      	cmp	r3, #121	; 0x79
 8006272:	e7f6      	b.n	8006262 <_scanf_float+0x12a>
 8006274:	6821      	ldr	r1, [r4, #0]
 8006276:	05c8      	lsls	r0, r1, #23
 8006278:	d51a      	bpl.n	80062b0 <_scanf_float+0x178>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006280:	6021      	str	r1, [r4, #0]
 8006282:	f109 0901 	add.w	r9, r9, #1
 8006286:	b11b      	cbz	r3, 8006290 <_scanf_float+0x158>
 8006288:	3b01      	subs	r3, #1
 800628a:	3201      	adds	r2, #1
 800628c:	9302      	str	r3, [sp, #8]
 800628e:	60a2      	str	r2, [r4, #8]
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	3b01      	subs	r3, #1
 8006294:	60a3      	str	r3, [r4, #8]
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	f340 8084 	ble.w	80063b0 <_scanf_float+0x278>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	e766      	b.n	800617e <_scanf_float+0x46>
 80062b0:	eb1a 0f05 	cmn.w	sl, r5
 80062b4:	f47f af70 	bne.w	8006198 <_scanf_float+0x60>
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	f806 3b01 	strb.w	r3, [r6], #1
 80062c4:	e7e4      	b.n	8006290 <_scanf_float+0x158>
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	0610      	lsls	r0, r2, #24
 80062ca:	f57f af65 	bpl.w	8006198 <_scanf_float+0x60>
 80062ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d2:	e7f4      	b.n	80062be <_scanf_float+0x186>
 80062d4:	f1ba 0f00 	cmp.w	sl, #0
 80062d8:	d10e      	bne.n	80062f8 <_scanf_float+0x1c0>
 80062da:	f1b9 0f00 	cmp.w	r9, #0
 80062de:	d10e      	bne.n	80062fe <_scanf_float+0x1c6>
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062ea:	d108      	bne.n	80062fe <_scanf_float+0x1c6>
 80062ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	f04f 0a01 	mov.w	sl, #1
 80062f6:	e7e3      	b.n	80062c0 <_scanf_float+0x188>
 80062f8:	f1ba 0f02 	cmp.w	sl, #2
 80062fc:	d055      	beq.n	80063aa <_scanf_float+0x272>
 80062fe:	2d01      	cmp	r5, #1
 8006300:	d002      	beq.n	8006308 <_scanf_float+0x1d0>
 8006302:	2d04      	cmp	r5, #4
 8006304:	f47f af48 	bne.w	8006198 <_scanf_float+0x60>
 8006308:	3501      	adds	r5, #1
 800630a:	b2ed      	uxtb	r5, r5
 800630c:	e7d8      	b.n	80062c0 <_scanf_float+0x188>
 800630e:	f1ba 0f01 	cmp.w	sl, #1
 8006312:	f47f af41 	bne.w	8006198 <_scanf_float+0x60>
 8006316:	f04f 0a02 	mov.w	sl, #2
 800631a:	e7d1      	b.n	80062c0 <_scanf_float+0x188>
 800631c:	b97d      	cbnz	r5, 800633e <_scanf_float+0x206>
 800631e:	f1b9 0f00 	cmp.w	r9, #0
 8006322:	f47f af3c 	bne.w	800619e <_scanf_float+0x66>
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800632c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006330:	f47f af39 	bne.w	80061a6 <_scanf_float+0x6e>
 8006334:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	2501      	movs	r5, #1
 800633c:	e7c0      	b.n	80062c0 <_scanf_float+0x188>
 800633e:	2d03      	cmp	r5, #3
 8006340:	d0e2      	beq.n	8006308 <_scanf_float+0x1d0>
 8006342:	2d05      	cmp	r5, #5
 8006344:	e7de      	b.n	8006304 <_scanf_float+0x1cc>
 8006346:	2d02      	cmp	r5, #2
 8006348:	f47f af26 	bne.w	8006198 <_scanf_float+0x60>
 800634c:	2503      	movs	r5, #3
 800634e:	e7b7      	b.n	80062c0 <_scanf_float+0x188>
 8006350:	2d06      	cmp	r5, #6
 8006352:	f47f af21 	bne.w	8006198 <_scanf_float+0x60>
 8006356:	2507      	movs	r5, #7
 8006358:	e7b2      	b.n	80062c0 <_scanf_float+0x188>
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	0591      	lsls	r1, r2, #22
 800635e:	f57f af1b 	bpl.w	8006198 <_scanf_float+0x60>
 8006362:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006366:	6022      	str	r2, [r4, #0]
 8006368:	f8cd 9004 	str.w	r9, [sp, #4]
 800636c:	e7a8      	b.n	80062c0 <_scanf_float+0x188>
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006374:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006378:	d006      	beq.n	8006388 <_scanf_float+0x250>
 800637a:	0550      	lsls	r0, r2, #21
 800637c:	f57f af0c 	bpl.w	8006198 <_scanf_float+0x60>
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	f43f af0f 	beq.w	80061a6 <_scanf_float+0x6e>
 8006388:	0591      	lsls	r1, r2, #22
 800638a:	bf58      	it	pl
 800638c:	9901      	ldrpl	r1, [sp, #4]
 800638e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006392:	bf58      	it	pl
 8006394:	eba9 0101 	subpl.w	r1, r9, r1
 8006398:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800639c:	bf58      	it	pl
 800639e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063a2:	6022      	str	r2, [r4, #0]
 80063a4:	f04f 0900 	mov.w	r9, #0
 80063a8:	e78a      	b.n	80062c0 <_scanf_float+0x188>
 80063aa:	f04f 0a03 	mov.w	sl, #3
 80063ae:	e787      	b.n	80062c0 <_scanf_float+0x188>
 80063b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063b4:	4639      	mov	r1, r7
 80063b6:	4640      	mov	r0, r8
 80063b8:	4798      	blx	r3
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f43f aedf 	beq.w	800617e <_scanf_float+0x46>
 80063c0:	e6ea      	b.n	8006198 <_scanf_float+0x60>
 80063c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ca:	463a      	mov	r2, r7
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	e6ec      	b.n	80061b2 <_scanf_float+0x7a>
 80063d8:	1e6b      	subs	r3, r5, #1
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d825      	bhi.n	800642a <_scanf_float+0x2f2>
 80063de:	2d02      	cmp	r5, #2
 80063e0:	d836      	bhi.n	8006450 <_scanf_float+0x318>
 80063e2:	455e      	cmp	r6, fp
 80063e4:	f67f aee8 	bls.w	80061b8 <_scanf_float+0x80>
 80063e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063f0:	463a      	mov	r2, r7
 80063f2:	4640      	mov	r0, r8
 80063f4:	4798      	blx	r3
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	e7f1      	b.n	80063e2 <_scanf_float+0x2aa>
 80063fe:	9802      	ldr	r0, [sp, #8]
 8006400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006404:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006408:	9002      	str	r0, [sp, #8]
 800640a:	463a      	mov	r2, r7
 800640c:	4640      	mov	r0, r8
 800640e:	4798      	blx	r3
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	3b01      	subs	r3, #1
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641a:	fa5f fa8a 	uxtb.w	sl, sl
 800641e:	f1ba 0f02 	cmp.w	sl, #2
 8006422:	d1ec      	bne.n	80063fe <_scanf_float+0x2c6>
 8006424:	3d03      	subs	r5, #3
 8006426:	b2ed      	uxtb	r5, r5
 8006428:	1b76      	subs	r6, r6, r5
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	05da      	lsls	r2, r3, #23
 800642e:	d52f      	bpl.n	8006490 <_scanf_float+0x358>
 8006430:	055b      	lsls	r3, r3, #21
 8006432:	d510      	bpl.n	8006456 <_scanf_float+0x31e>
 8006434:	455e      	cmp	r6, fp
 8006436:	f67f aebf 	bls.w	80061b8 <_scanf_float+0x80>
 800643a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800643e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006442:	463a      	mov	r2, r7
 8006444:	4640      	mov	r0, r8
 8006446:	4798      	blx	r3
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	3b01      	subs	r3, #1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	e7f1      	b.n	8006434 <_scanf_float+0x2fc>
 8006450:	46aa      	mov	sl, r5
 8006452:	9602      	str	r6, [sp, #8]
 8006454:	e7df      	b.n	8006416 <_scanf_float+0x2de>
 8006456:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	2965      	cmp	r1, #101	; 0x65
 800645e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006462:	f106 35ff 	add.w	r5, r6, #4294967295
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	d00c      	beq.n	8006484 <_scanf_float+0x34c>
 800646a:	2945      	cmp	r1, #69	; 0x45
 800646c:	d00a      	beq.n	8006484 <_scanf_float+0x34c>
 800646e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006472:	463a      	mov	r2, r7
 8006474:	4640      	mov	r0, r8
 8006476:	4798      	blx	r3
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800647e:	3b01      	subs	r3, #1
 8006480:	1eb5      	subs	r5, r6, #2
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006488:	463a      	mov	r2, r7
 800648a:	4640      	mov	r0, r8
 800648c:	4798      	blx	r3
 800648e:	462e      	mov	r6, r5
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	f015 0510 	ands.w	r5, r5, #16
 8006496:	d158      	bne.n	800654a <_scanf_float+0x412>
 8006498:	7035      	strb	r5, [r6, #0]
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a4:	d11c      	bne.n	80064e0 <_scanf_float+0x3a8>
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	454b      	cmp	r3, r9
 80064aa:	eba3 0209 	sub.w	r2, r3, r9
 80064ae:	d124      	bne.n	80064fa <_scanf_float+0x3c2>
 80064b0:	2200      	movs	r2, #0
 80064b2:	4659      	mov	r1, fp
 80064b4:	4640      	mov	r0, r8
 80064b6:	f002 fc4b 	bl	8008d50 <_strtod_r>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	6821      	ldr	r1, [r4, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f011 0f02 	tst.w	r1, #2
 80064c4:	ec57 6b10 	vmov	r6, r7, d0
 80064c8:	f103 0204 	add.w	r2, r3, #4
 80064cc:	d020      	beq.n	8006510 <_scanf_float+0x3d8>
 80064ce:	9903      	ldr	r1, [sp, #12]
 80064d0:	600a      	str	r2, [r1, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	e9c3 6700 	strd	r6, r7, [r3]
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60e3      	str	r3, [r4, #12]
 80064de:	e66c      	b.n	80061ba <_scanf_float+0x82>
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0e4      	beq.n	80064b0 <_scanf_float+0x378>
 80064e6:	9905      	ldr	r1, [sp, #20]
 80064e8:	230a      	movs	r3, #10
 80064ea:	462a      	mov	r2, r5
 80064ec:	3101      	adds	r1, #1
 80064ee:	4640      	mov	r0, r8
 80064f0:	f002 fcb6 	bl	8008e60 <_strtol_r>
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	9e05      	ldr	r6, [sp, #20]
 80064f8:	1ac2      	subs	r2, r0, r3
 80064fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064fe:	429e      	cmp	r6, r3
 8006500:	bf28      	it	cs
 8006502:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006506:	4912      	ldr	r1, [pc, #72]	; (8006550 <_scanf_float+0x418>)
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f8d5 	bl	80066b8 <siprintf>
 800650e:	e7cf      	b.n	80064b0 <_scanf_float+0x378>
 8006510:	f011 0f04 	tst.w	r1, #4
 8006514:	9903      	ldr	r1, [sp, #12]
 8006516:	600a      	str	r2, [r1, #0]
 8006518:	d1db      	bne.n	80064d2 <_scanf_float+0x39a>
 800651a:	f8d3 8000 	ldr.w	r8, [r3]
 800651e:	ee10 2a10 	vmov	r2, s0
 8006522:	ee10 0a10 	vmov	r0, s0
 8006526:	463b      	mov	r3, r7
 8006528:	4639      	mov	r1, r7
 800652a:	f7fa fb07 	bl	8000b3c <__aeabi_dcmpun>
 800652e:	b128      	cbz	r0, 800653c <_scanf_float+0x404>
 8006530:	4808      	ldr	r0, [pc, #32]	; (8006554 <_scanf_float+0x41c>)
 8006532:	f000 f9d1 	bl	80068d8 <nanf>
 8006536:	ed88 0a00 	vstr	s0, [r8]
 800653a:	e7cd      	b.n	80064d8 <_scanf_float+0x3a0>
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fb5a 	bl	8000bf8 <__aeabi_d2f>
 8006544:	f8c8 0000 	str.w	r0, [r8]
 8006548:	e7c6      	b.n	80064d8 <_scanf_float+0x3a0>
 800654a:	2500      	movs	r5, #0
 800654c:	e635      	b.n	80061ba <_scanf_float+0x82>
 800654e:	bf00      	nop
 8006550:	0800a1ac 	.word	0x0800a1ac
 8006554:	0800a53d 	.word	0x0800a53d

08006558 <std>:
 8006558:	2300      	movs	r3, #0
 800655a:	b510      	push	{r4, lr}
 800655c:	4604      	mov	r4, r0
 800655e:	e9c0 3300 	strd	r3, r3, [r0]
 8006562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006566:	6083      	str	r3, [r0, #8]
 8006568:	8181      	strh	r1, [r0, #12]
 800656a:	6643      	str	r3, [r0, #100]	; 0x64
 800656c:	81c2      	strh	r2, [r0, #14]
 800656e:	6183      	str	r3, [r0, #24]
 8006570:	4619      	mov	r1, r3
 8006572:	2208      	movs	r2, #8
 8006574:	305c      	adds	r0, #92	; 0x5c
 8006576:	f000 f923 	bl	80067c0 <memset>
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <std+0x38>)
 800657c:	6263      	str	r3, [r4, #36]	; 0x24
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <std+0x3c>)
 8006580:	62a3      	str	r3, [r4, #40]	; 0x28
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <std+0x40>)
 8006584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006586:	4b05      	ldr	r3, [pc, #20]	; (800659c <std+0x44>)
 8006588:	6224      	str	r4, [r4, #32]
 800658a:	6323      	str	r3, [r4, #48]	; 0x30
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	080066f9 	.word	0x080066f9
 8006594:	0800671b 	.word	0x0800671b
 8006598:	08006753 	.word	0x08006753
 800659c:	08006777 	.word	0x08006777

080065a0 <stdio_exit_handler>:
 80065a0:	4a02      	ldr	r2, [pc, #8]	; (80065ac <stdio_exit_handler+0xc>)
 80065a2:	4903      	ldr	r1, [pc, #12]	; (80065b0 <stdio_exit_handler+0x10>)
 80065a4:	4803      	ldr	r0, [pc, #12]	; (80065b4 <stdio_exit_handler+0x14>)
 80065a6:	f000 b869 	b.w	800667c <_fwalk_sglue>
 80065aa:	bf00      	nop
 80065ac:	20000010 	.word	0x20000010
 80065b0:	08009221 	.word	0x08009221
 80065b4:	2000001c 	.word	0x2000001c

080065b8 <cleanup_stdio>:
 80065b8:	6841      	ldr	r1, [r0, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <cleanup_stdio+0x34>)
 80065bc:	4299      	cmp	r1, r3
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	d001      	beq.n	80065c8 <cleanup_stdio+0x10>
 80065c4:	f002 fe2c 	bl	8009220 <_fflush_r>
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <cleanup_stdio+0x38>)
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d002      	beq.n	80065d6 <cleanup_stdio+0x1e>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f002 fe25 	bl	8009220 <_fflush_r>
 80065d6:	68e1      	ldr	r1, [r4, #12]
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <cleanup_stdio+0x3c>)
 80065da:	4299      	cmp	r1, r3
 80065dc:	d004      	beq.n	80065e8 <cleanup_stdio+0x30>
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f002 be1c 	b.w	8009220 <_fflush_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	20004f68 	.word	0x20004f68
 80065f0:	20004fd0 	.word	0x20004fd0
 80065f4:	20005038 	.word	0x20005038

080065f8 <global_stdio_init.part.0>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <global_stdio_init.part.0+0x30>)
 80065fc:	4c0b      	ldr	r4, [pc, #44]	; (800662c <global_stdio_init.part.0+0x34>)
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <global_stdio_init.part.0+0x38>)
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4620      	mov	r0, r4
 8006604:	2200      	movs	r2, #0
 8006606:	2104      	movs	r1, #4
 8006608:	f7ff ffa6 	bl	8006558 <std>
 800660c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006610:	2201      	movs	r2, #1
 8006612:	2109      	movs	r1, #9
 8006614:	f7ff ffa0 	bl	8006558 <std>
 8006618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800661c:	2202      	movs	r2, #2
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff bf98 	b.w	8006558 <std>
 8006628:	200050a0 	.word	0x200050a0
 800662c:	20004f68 	.word	0x20004f68
 8006630:	080065a1 	.word	0x080065a1

08006634 <__sfp_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sfp_lock_acquire+0x8>)
 8006636:	f000 b93f 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	200050a9 	.word	0x200050a9

08006640 <__sfp_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sfp_lock_release+0x8>)
 8006642:	f000 b93a 	b.w	80068ba <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	200050a9 	.word	0x200050a9

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sfp_lock_acquire>
 8006654:	6a23      	ldr	r3, [r4, #32]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sfp_lock_release>
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <__sinit+0x28>)
 8006662:	6223      	str	r3, [r4, #32]
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__sinit+0x2c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <__sinit+0xc>
 800666c:	f7ff ffc4 	bl	80065f8 <global_stdio_init.part.0>
 8006670:	e7f2      	b.n	8006658 <__sinit+0xc>
 8006672:	bf00      	nop
 8006674:	080065b9 	.word	0x080065b9
 8006678:	200050a0 	.word	0x200050a0

0800667c <_fwalk_sglue>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	4607      	mov	r7, r0
 8006682:	4688      	mov	r8, r1
 8006684:	4614      	mov	r4, r2
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800668c:	f1b9 0901 	subs.w	r9, r9, #1
 8006690:	d505      	bpl.n	800669e <_fwalk_sglue+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk_sglue+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d907      	bls.n	80066b4 <_fwalk_sglue+0x38>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d003      	beq.n	80066b4 <_fwalk_sglue+0x38>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	4306      	orrs	r6, r0
 80066b4:	3568      	adds	r5, #104	; 0x68
 80066b6:	e7e9      	b.n	800668c <_fwalk_sglue+0x10>

080066b8 <siprintf>:
 80066b8:	b40e      	push	{r1, r2, r3}
 80066ba:	b500      	push	{lr}
 80066bc:	b09c      	sub	sp, #112	; 0x70
 80066be:	ab1d      	add	r3, sp, #116	; 0x74
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	9006      	str	r0, [sp, #24]
 80066c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066c8:	4809      	ldr	r0, [pc, #36]	; (80066f0 <siprintf+0x38>)
 80066ca:	9107      	str	r1, [sp, #28]
 80066cc:	9104      	str	r1, [sp, #16]
 80066ce:	4909      	ldr	r1, [pc, #36]	; (80066f4 <siprintf+0x3c>)
 80066d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d4:	9105      	str	r1, [sp, #20]
 80066d6:	6800      	ldr	r0, [r0, #0]
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	a902      	add	r1, sp, #8
 80066dc:	f002 fc1c 	bl	8008f18 <_svfiprintf_r>
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	b01c      	add	sp, #112	; 0x70
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b003      	add	sp, #12
 80066ee:	4770      	bx	lr
 80066f0:	20000068 	.word	0x20000068
 80066f4:	ffff0208 	.word	0xffff0208

080066f8 <__sread>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	460c      	mov	r4, r1
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	f000 f88c 	bl	800681c <_read_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	bfab      	itete	ge
 8006708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800670a:	89a3      	ldrhlt	r3, [r4, #12]
 800670c:	181b      	addge	r3, r3, r0
 800670e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006712:	bfac      	ite	ge
 8006714:	6563      	strge	r3, [r4, #84]	; 0x54
 8006716:	81a3      	strhlt	r3, [r4, #12]
 8006718:	bd10      	pop	{r4, pc}

0800671a <__swrite>:
 800671a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	461f      	mov	r7, r3
 8006720:	898b      	ldrh	r3, [r1, #12]
 8006722:	05db      	lsls	r3, r3, #23
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	4616      	mov	r6, r2
 800672a:	d505      	bpl.n	8006738 <__swrite+0x1e>
 800672c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006730:	2302      	movs	r3, #2
 8006732:	2200      	movs	r2, #0
 8006734:	f000 f860 	bl	80067f8 <_lseek_r>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800673e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	4632      	mov	r2, r6
 8006746:	463b      	mov	r3, r7
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	f000 b877 	b.w	8006840 <_write_r>

08006752 <__sseek>:
 8006752:	b510      	push	{r4, lr}
 8006754:	460c      	mov	r4, r1
 8006756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675a:	f000 f84d 	bl	80067f8 <_lseek_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	bf15      	itete	ne
 8006764:	6560      	strne	r0, [r4, #84]	; 0x54
 8006766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800676a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800676e:	81a3      	strheq	r3, [r4, #12]
 8006770:	bf18      	it	ne
 8006772:	81a3      	strhne	r3, [r4, #12]
 8006774:	bd10      	pop	{r4, pc}

08006776 <__sclose>:
 8006776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677a:	f000 b82d 	b.w	80067d8 <_close_r>
	...

08006780 <_vsiprintf_r>:
 8006780:	b500      	push	{lr}
 8006782:	b09b      	sub	sp, #108	; 0x6c
 8006784:	9100      	str	r1, [sp, #0]
 8006786:	9104      	str	r1, [sp, #16]
 8006788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	9102      	str	r1, [sp, #8]
 8006790:	4905      	ldr	r1, [pc, #20]	; (80067a8 <_vsiprintf_r+0x28>)
 8006792:	9103      	str	r1, [sp, #12]
 8006794:	4669      	mov	r1, sp
 8006796:	f002 fbbf 	bl	8008f18 <_svfiprintf_r>
 800679a:	9b00      	ldr	r3, [sp, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	b01b      	add	sp, #108	; 0x6c
 80067a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80067a6:	bf00      	nop
 80067a8:	ffff0208 	.word	0xffff0208

080067ac <vsiprintf>:
 80067ac:	4613      	mov	r3, r2
 80067ae:	460a      	mov	r2, r1
 80067b0:	4601      	mov	r1, r0
 80067b2:	4802      	ldr	r0, [pc, #8]	; (80067bc <vsiprintf+0x10>)
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f7ff bfe3 	b.w	8006780 <_vsiprintf_r>
 80067ba:	bf00      	nop
 80067bc:	20000068 	.word	0x20000068

080067c0 <memset>:
 80067c0:	4402      	add	r2, r0
 80067c2:	4603      	mov	r3, r0
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d100      	bne.n	80067ca <memset+0xa>
 80067c8:	4770      	bx	lr
 80067ca:	f803 1b01 	strb.w	r1, [r3], #1
 80067ce:	e7f9      	b.n	80067c4 <memset+0x4>

080067d0 <_localeconv_r>:
 80067d0:	4800      	ldr	r0, [pc, #0]	; (80067d4 <_localeconv_r+0x4>)
 80067d2:	4770      	bx	lr
 80067d4:	2000015c 	.word	0x2000015c

080067d8 <_close_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	; (80067f4 <_close_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fb f842 	bl	800186c <_close>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_close_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_close_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200050a4 	.word	0x200050a4

080067f8 <_lseek_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_lseek_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fb f857 	bl	80018ba <_lseek>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_lseek_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_lseek_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	200050a4 	.word	0x200050a4

0800681c <_read_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d07      	ldr	r5, [pc, #28]	; (800683c <_read_r+0x20>)
 8006820:	4604      	mov	r4, r0
 8006822:	4608      	mov	r0, r1
 8006824:	4611      	mov	r1, r2
 8006826:	2200      	movs	r2, #0
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fa ffe5 	bl	80017fa <_read>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_read_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_read_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	200050a4 	.word	0x200050a4

08006840 <_write_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_write_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fff0 	bl	8001834 <_write>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_write_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_write_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200050a4 	.word	0x200050a4

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000068 	.word	0x20000068

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4d0d      	ldr	r5, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1b64      	subs	r4, r4, r5
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2600      	movs	r6, #0
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4d0b      	ldr	r5, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f003 fbd4 	bl	800a030 <_init>
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2600      	movs	r6, #0
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	0800a5a8 	.word	0x0800a5a8
 80068ac:	0800a5a8 	.word	0x0800a5a8
 80068b0:	0800a5a8 	.word	0x0800a5a8
 80068b4:	0800a5ac 	.word	0x0800a5ac

080068b8 <__retarget_lock_acquire_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_release_recursive>:
 80068ba:	4770      	bx	lr

080068bc <memcpy>:
 80068bc:	440a      	add	r2, r1
 80068be:	4291      	cmp	r1, r2
 80068c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c4:	d100      	bne.n	80068c8 <memcpy+0xc>
 80068c6:	4770      	bx	lr
 80068c8:	b510      	push	{r4, lr}
 80068ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068d2:	4291      	cmp	r1, r2
 80068d4:	d1f9      	bne.n	80068ca <memcpy+0xe>
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <nanf>:
 80068d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068e0 <nanf+0x8>
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	7fc00000 	.word	0x7fc00000

080068e4 <quorem>:
 80068e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	6903      	ldr	r3, [r0, #16]
 80068ea:	690c      	ldr	r4, [r1, #16]
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	4607      	mov	r7, r0
 80068f0:	db7e      	blt.n	80069f0 <quorem+0x10c>
 80068f2:	3c01      	subs	r4, #1
 80068f4:	f101 0814 	add.w	r8, r1, #20
 80068f8:	f100 0514 	add.w	r5, r0, #20
 80068fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800690a:	3301      	adds	r3, #1
 800690c:	429a      	cmp	r2, r3
 800690e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006916:	fbb2 f6f3 	udiv	r6, r2, r3
 800691a:	d331      	bcc.n	8006980 <quorem+0x9c>
 800691c:	f04f 0e00 	mov.w	lr, #0
 8006920:	4640      	mov	r0, r8
 8006922:	46ac      	mov	ip, r5
 8006924:	46f2      	mov	sl, lr
 8006926:	f850 2b04 	ldr.w	r2, [r0], #4
 800692a:	b293      	uxth	r3, r2
 800692c:	fb06 e303 	mla	r3, r6, r3, lr
 8006930:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006934:	0c1a      	lsrs	r2, r3, #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	ebaa 0303 	sub.w	r3, sl, r3
 800693c:	f8dc a000 	ldr.w	sl, [ip]
 8006940:	fa13 f38a 	uxtah	r3, r3, sl
 8006944:	fb06 220e 	mla	r2, r6, lr, r2
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	9b00      	ldr	r3, [sp, #0]
 800694c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006950:	b292      	uxth	r2, r2
 8006952:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006956:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800695a:	f8bd 3000 	ldrh.w	r3, [sp]
 800695e:	4581      	cmp	r9, r0
 8006960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006964:	f84c 3b04 	str.w	r3, [ip], #4
 8006968:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800696c:	d2db      	bcs.n	8006926 <quorem+0x42>
 800696e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006972:	b92b      	cbnz	r3, 8006980 <quorem+0x9c>
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	3b04      	subs	r3, #4
 8006978:	429d      	cmp	r5, r3
 800697a:	461a      	mov	r2, r3
 800697c:	d32c      	bcc.n	80069d8 <quorem+0xf4>
 800697e:	613c      	str	r4, [r7, #16]
 8006980:	4638      	mov	r0, r7
 8006982:	f001 f9f1 	bl	8007d68 <__mcmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	db22      	blt.n	80069d0 <quorem+0xec>
 800698a:	3601      	adds	r6, #1
 800698c:	4629      	mov	r1, r5
 800698e:	2000      	movs	r0, #0
 8006990:	f858 2b04 	ldr.w	r2, [r8], #4
 8006994:	f8d1 c000 	ldr.w	ip, [r1]
 8006998:	b293      	uxth	r3, r2
 800699a:	1ac3      	subs	r3, r0, r3
 800699c:	0c12      	lsrs	r2, r2, #16
 800699e:	fa13 f38c 	uxtah	r3, r3, ip
 80069a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b0:	45c1      	cmp	r9, r8
 80069b2:	f841 3b04 	str.w	r3, [r1], #4
 80069b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ba:	d2e9      	bcs.n	8006990 <quorem+0xac>
 80069bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069c4:	b922      	cbnz	r2, 80069d0 <quorem+0xec>
 80069c6:	3b04      	subs	r3, #4
 80069c8:	429d      	cmp	r5, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	d30a      	bcc.n	80069e4 <quorem+0x100>
 80069ce:	613c      	str	r4, [r7, #16]
 80069d0:	4630      	mov	r0, r6
 80069d2:	b003      	add	sp, #12
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	3b04      	subs	r3, #4
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d1ce      	bne.n	800697e <quorem+0x9a>
 80069e0:	3c01      	subs	r4, #1
 80069e2:	e7c9      	b.n	8006978 <quorem+0x94>
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	3b04      	subs	r3, #4
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	d1f0      	bne.n	80069ce <quorem+0xea>
 80069ec:	3c01      	subs	r4, #1
 80069ee:	e7eb      	b.n	80069c8 <quorem+0xe4>
 80069f0:	2000      	movs	r0, #0
 80069f2:	e7ee      	b.n	80069d2 <quorem+0xee>
 80069f4:	0000      	movs	r0, r0
	...

080069f8 <_dtoa_r>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	ed2d 8b04 	vpush	{d8-d9}
 8006a00:	69c5      	ldr	r5, [r0, #28]
 8006a02:	b093      	sub	sp, #76	; 0x4c
 8006a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a08:	ec57 6b10 	vmov	r6, r7, d0
 8006a0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a10:	9107      	str	r1, [sp, #28]
 8006a12:	4604      	mov	r4, r0
 8006a14:	920a      	str	r2, [sp, #40]	; 0x28
 8006a16:	930d      	str	r3, [sp, #52]	; 0x34
 8006a18:	b975      	cbnz	r5, 8006a38 <_dtoa_r+0x40>
 8006a1a:	2010      	movs	r0, #16
 8006a1c:	f000 fe2a 	bl	8007674 <malloc>
 8006a20:	4602      	mov	r2, r0
 8006a22:	61e0      	str	r0, [r4, #28]
 8006a24:	b920      	cbnz	r0, 8006a30 <_dtoa_r+0x38>
 8006a26:	4bae      	ldr	r3, [pc, #696]	; (8006ce0 <_dtoa_r+0x2e8>)
 8006a28:	21ef      	movs	r1, #239	; 0xef
 8006a2a:	48ae      	ldr	r0, [pc, #696]	; (8006ce4 <_dtoa_r+0x2ec>)
 8006a2c:	f002 fc64 	bl	80092f8 <__assert_func>
 8006a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a34:	6005      	str	r5, [r0, #0]
 8006a36:	60c5      	str	r5, [r0, #12]
 8006a38:	69e3      	ldr	r3, [r4, #28]
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	b151      	cbz	r1, 8006a54 <_dtoa_r+0x5c>
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	604a      	str	r2, [r1, #4]
 8006a42:	2301      	movs	r3, #1
 8006a44:	4093      	lsls	r3, r2
 8006a46:	608b      	str	r3, [r1, #8]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 ff07 	bl	800785c <_Bfree>
 8006a4e:	69e3      	ldr	r3, [r4, #28]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	1e3b      	subs	r3, r7, #0
 8006a56:	bfbb      	ittet	lt
 8006a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a5c:	9303      	strlt	r3, [sp, #12]
 8006a5e:	2300      	movge	r3, #0
 8006a60:	2201      	movlt	r2, #1
 8006a62:	bfac      	ite	ge
 8006a64:	f8c8 3000 	strge.w	r3, [r8]
 8006a68:	f8c8 2000 	strlt.w	r2, [r8]
 8006a6c:	4b9e      	ldr	r3, [pc, #632]	; (8006ce8 <_dtoa_r+0x2f0>)
 8006a6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a72:	ea33 0308 	bics.w	r3, r3, r8
 8006a76:	d11b      	bne.n	8006ab0 <_dtoa_r+0xb8>
 8006a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a84:	4333      	orrs	r3, r6
 8006a86:	f000 8593 	beq.w	80075b0 <_dtoa_r+0xbb8>
 8006a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a8c:	b963      	cbnz	r3, 8006aa8 <_dtoa_r+0xb0>
 8006a8e:	4b97      	ldr	r3, [pc, #604]	; (8006cec <_dtoa_r+0x2f4>)
 8006a90:	e027      	b.n	8006ae2 <_dtoa_r+0xea>
 8006a92:	4b97      	ldr	r3, [pc, #604]	; (8006cf0 <_dtoa_r+0x2f8>)
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	9800      	ldr	r0, [sp, #0]
 8006a9e:	b013      	add	sp, #76	; 0x4c
 8006aa0:	ecbd 8b04 	vpop	{d8-d9}
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	4b90      	ldr	r3, [pc, #576]	; (8006cec <_dtoa_r+0x2f4>)
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	3303      	adds	r3, #3
 8006aae:	e7f3      	b.n	8006a98 <_dtoa_r+0xa0>
 8006ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	ec51 0b17 	vmov	r0, r1, d7
 8006aba:	eeb0 8a47 	vmov.f32	s16, s14
 8006abe:	eef0 8a67 	vmov.f32	s17, s15
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f7fa f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac8:	4681      	mov	r9, r0
 8006aca:	b160      	cbz	r0, 8006ae6 <_dtoa_r+0xee>
 8006acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ace:	2301      	movs	r3, #1
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8568 	beq.w	80075aa <_dtoa_r+0xbb2>
 8006ada:	4b86      	ldr	r3, [pc, #536]	; (8006cf4 <_dtoa_r+0x2fc>)
 8006adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	e7da      	b.n	8006a9c <_dtoa_r+0xa4>
 8006ae6:	aa10      	add	r2, sp, #64	; 0x40
 8006ae8:	a911      	add	r1, sp, #68	; 0x44
 8006aea:	4620      	mov	r0, r4
 8006aec:	eeb0 0a48 	vmov.f32	s0, s16
 8006af0:	eef0 0a68 	vmov.f32	s1, s17
 8006af4:	f001 fa4e 	bl	8007f94 <__d2b>
 8006af8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006afc:	4682      	mov	sl, r0
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	d07f      	beq.n	8006c02 <_dtoa_r+0x20a>
 8006b02:	ee18 3a90 	vmov	r3, s17
 8006b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b0e:	ec51 0b18 	vmov	r0, r1, d8
 8006b12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b1e:	4619      	mov	r1, r3
 8006b20:	2200      	movs	r2, #0
 8006b22:	4b75      	ldr	r3, [pc, #468]	; (8006cf8 <_dtoa_r+0x300>)
 8006b24:	f7f9 fbb8 	bl	8000298 <__aeabi_dsub>
 8006b28:	a367      	add	r3, pc, #412	; (adr r3, 8006cc8 <_dtoa_r+0x2d0>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fd6b 	bl	8000608 <__aeabi_dmul>
 8006b32:	a367      	add	r3, pc, #412	; (adr r3, 8006cd0 <_dtoa_r+0x2d8>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fbb0 	bl	800029c <__adddf3>
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	4628      	mov	r0, r5
 8006b40:	460f      	mov	r7, r1
 8006b42:	f7f9 fcf7 	bl	8000534 <__aeabi_i2d>
 8006b46:	a364      	add	r3, pc, #400	; (adr r3, 8006cd8 <_dtoa_r+0x2e0>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fd5c 	bl	8000608 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fba0 	bl	800029c <__adddf3>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	f7fa f802 	bl	8000b68 <__aeabi_d2iz>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4683      	mov	fp, r0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 ffbd 	bl	8000aec <__aeabi_dcmplt>
 8006b72:	b148      	cbz	r0, 8006b88 <_dtoa_r+0x190>
 8006b74:	4658      	mov	r0, fp
 8006b76:	f7f9 fcdd 	bl	8000534 <__aeabi_i2d>
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	f7f9 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b82:	b908      	cbnz	r0, 8006b88 <_dtoa_r+0x190>
 8006b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b88:	f1bb 0f16 	cmp.w	fp, #22
 8006b8c:	d857      	bhi.n	8006c3e <_dtoa_r+0x246>
 8006b8e:	4b5b      	ldr	r3, [pc, #364]	; (8006cfc <_dtoa_r+0x304>)
 8006b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	ec51 0b18 	vmov	r0, r1, d8
 8006b9c:	f7f9 ffa6 	bl	8000aec <__aeabi_dcmplt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d04e      	beq.n	8006c42 <_dtoa_r+0x24a>
 8006ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ba8:	2300      	movs	r3, #0
 8006baa:	930c      	str	r3, [sp, #48]	; 0x30
 8006bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bae:	1b5b      	subs	r3, r3, r5
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	bf45      	ittet	mi
 8006bb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bb8:	9305      	strmi	r3, [sp, #20]
 8006bba:	2300      	movpl	r3, #0
 8006bbc:	2300      	movmi	r3, #0
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	bf54      	ite	pl
 8006bc2:	9305      	strpl	r3, [sp, #20]
 8006bc4:	9306      	strmi	r3, [sp, #24]
 8006bc6:	f1bb 0f00 	cmp.w	fp, #0
 8006bca:	db3c      	blt.n	8006c46 <_dtoa_r+0x24e>
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bd2:	445b      	add	r3, fp
 8006bd4:	9306      	str	r3, [sp, #24]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9308      	str	r3, [sp, #32]
 8006bda:	9b07      	ldr	r3, [sp, #28]
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d868      	bhi.n	8006cb2 <_dtoa_r+0x2ba>
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	bfc4      	itt	gt
 8006be4:	3b04      	subgt	r3, #4
 8006be6:	9307      	strgt	r3, [sp, #28]
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	f1a3 0302 	sub.w	r3, r3, #2
 8006bee:	bfcc      	ite	gt
 8006bf0:	2500      	movgt	r5, #0
 8006bf2:	2501      	movle	r5, #1
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	f200 8085 	bhi.w	8006d04 <_dtoa_r+0x30c>
 8006bfa:	e8df f003 	tbb	[pc, r3]
 8006bfe:	3b2e      	.short	0x3b2e
 8006c00:	5839      	.short	0x5839
 8006c02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c06:	441d      	add	r5, r3
 8006c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	bfc1      	itttt	gt
 8006c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c14:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c20:	bfd6      	itet	le
 8006c22:	f1c3 0320 	rsble	r3, r3, #32
 8006c26:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c2a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c2e:	f7f9 fc71 	bl	8000514 <__aeabi_ui2d>
 8006c32:	2201      	movs	r2, #1
 8006c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c38:	3d01      	subs	r5, #1
 8006c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c3c:	e76f      	b.n	8006b1e <_dtoa_r+0x126>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e7b3      	b.n	8006baa <_dtoa_r+0x1b2>
 8006c42:	900c      	str	r0, [sp, #48]	; 0x30
 8006c44:	e7b2      	b.n	8006bac <_dtoa_r+0x1b4>
 8006c46:	9b05      	ldr	r3, [sp, #20]
 8006c48:	eba3 030b 	sub.w	r3, r3, fp
 8006c4c:	9305      	str	r3, [sp, #20]
 8006c4e:	f1cb 0300 	rsb	r3, fp, #0
 8006c52:	9308      	str	r3, [sp, #32]
 8006c54:	2300      	movs	r3, #0
 8006c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c58:	e7bf      	b.n	8006bda <_dtoa_r+0x1e2>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dc52      	bgt.n	8006d0a <_dtoa_r+0x312>
 8006c64:	2301      	movs	r3, #1
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c6e:	e00b      	b.n	8006c88 <_dtoa_r+0x290>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7f3      	b.n	8006c5c <_dtoa_r+0x264>
 8006c74:	2300      	movs	r3, #0
 8006c76:	9309      	str	r3, [sp, #36]	; 0x24
 8006c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7a:	445b      	add	r3, fp
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	bfb8      	it	lt
 8006c86:	2301      	movlt	r3, #1
 8006c88:	69e0      	ldr	r0, [r4, #28]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	f102 0614 	add.w	r6, r2, #20
 8006c92:	429e      	cmp	r6, r3
 8006c94:	d93d      	bls.n	8006d12 <_dtoa_r+0x31a>
 8006c96:	6041      	str	r1, [r0, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fd9f 	bl	80077dc <_Balloc>
 8006c9e:	9000      	str	r0, [sp, #0]
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d139      	bne.n	8006d18 <_dtoa_r+0x320>
 8006ca4:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <_dtoa_r+0x308>)
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cac:	e6bd      	b.n	8006a2a <_dtoa_r+0x32>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e7e1      	b.n	8006c76 <_dtoa_r+0x27e>
 8006cb2:	2501      	movs	r5, #1
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	9509      	str	r5, [sp, #36]	; 0x24
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2312      	movs	r3, #18
 8006cc6:	e7d1      	b.n	8006c6c <_dtoa_r+0x274>
 8006cc8:	636f4361 	.word	0x636f4361
 8006ccc:	3fd287a7 	.word	0x3fd287a7
 8006cd0:	8b60c8b3 	.word	0x8b60c8b3
 8006cd4:	3fc68a28 	.word	0x3fc68a28
 8006cd8:	509f79fb 	.word	0x509f79fb
 8006cdc:	3fd34413 	.word	0x3fd34413
 8006ce0:	0800a1be 	.word	0x0800a1be
 8006ce4:	0800a1d5 	.word	0x0800a1d5
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	0800a1ba 	.word	0x0800a1ba
 8006cf0:	0800a1b1 	.word	0x0800a1b1
 8006cf4:	0800a189 	.word	0x0800a189
 8006cf8:	3ff80000 	.word	0x3ff80000
 8006cfc:	0800a2c0 	.word	0x0800a2c0
 8006d00:	0800a22d 	.word	0x0800a22d
 8006d04:	2301      	movs	r3, #1
 8006d06:	9309      	str	r3, [sp, #36]	; 0x24
 8006d08:	e7d7      	b.n	8006cba <_dtoa_r+0x2c2>
 8006d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	e7ba      	b.n	8006c88 <_dtoa_r+0x290>
 8006d12:	3101      	adds	r1, #1
 8006d14:	0052      	lsls	r2, r2, #1
 8006d16:	e7ba      	b.n	8006c8e <_dtoa_r+0x296>
 8006d18:	69e3      	ldr	r3, [r4, #28]
 8006d1a:	9a00      	ldr	r2, [sp, #0]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	2b0e      	cmp	r3, #14
 8006d22:	f200 80a8 	bhi.w	8006e76 <_dtoa_r+0x47e>
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	f000 80a5 	beq.w	8006e76 <_dtoa_r+0x47e>
 8006d2c:	f1bb 0f00 	cmp.w	fp, #0
 8006d30:	dd38      	ble.n	8006da4 <_dtoa_r+0x3ac>
 8006d32:	4bc0      	ldr	r3, [pc, #768]	; (8007034 <_dtoa_r+0x63c>)
 8006d34:	f00b 020f 	and.w	r2, fp, #15
 8006d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d48:	d019      	beq.n	8006d7e <_dtoa_r+0x386>
 8006d4a:	4bbb      	ldr	r3, [pc, #748]	; (8007038 <_dtoa_r+0x640>)
 8006d4c:	ec51 0b18 	vmov	r0, r1, d8
 8006d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d54:	f7f9 fd82 	bl	800085c <__aeabi_ddiv>
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	f008 080f 	and.w	r8, r8, #15
 8006d60:	2503      	movs	r5, #3
 8006d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007038 <_dtoa_r+0x640>
 8006d66:	f1b8 0f00 	cmp.w	r8, #0
 8006d6a:	d10a      	bne.n	8006d82 <_dtoa_r+0x38a>
 8006d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d70:	4632      	mov	r2, r6
 8006d72:	463b      	mov	r3, r7
 8006d74:	f7f9 fd72 	bl	800085c <__aeabi_ddiv>
 8006d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d7c:	e02b      	b.n	8006dd6 <_dtoa_r+0x3de>
 8006d7e:	2502      	movs	r5, #2
 8006d80:	e7ef      	b.n	8006d62 <_dtoa_r+0x36a>
 8006d82:	f018 0f01 	tst.w	r8, #1
 8006d86:	d008      	beq.n	8006d9a <_dtoa_r+0x3a2>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d90:	f7f9 fc3a 	bl	8000608 <__aeabi_dmul>
 8006d94:	3501      	adds	r5, #1
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d9e:	f109 0908 	add.w	r9, r9, #8
 8006da2:	e7e0      	b.n	8006d66 <_dtoa_r+0x36e>
 8006da4:	f000 809f 	beq.w	8006ee6 <_dtoa_r+0x4ee>
 8006da8:	f1cb 0600 	rsb	r6, fp, #0
 8006dac:	4ba1      	ldr	r3, [pc, #644]	; (8007034 <_dtoa_r+0x63c>)
 8006dae:	4fa2      	ldr	r7, [pc, #648]	; (8007038 <_dtoa_r+0x640>)
 8006db0:	f006 020f 	and.w	r2, r6, #15
 8006db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	ec51 0b18 	vmov	r0, r1, d8
 8006dc0:	f7f9 fc22 	bl	8000608 <__aeabi_dmul>
 8006dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc8:	1136      	asrs	r6, r6, #4
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2502      	movs	r5, #2
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d17e      	bne.n	8006ed0 <_dtoa_r+0x4d8>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d0      	bne.n	8006d78 <_dtoa_r+0x380>
 8006dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8084 	beq.w	8006eea <_dtoa_r+0x4f2>
 8006de2:	4b96      	ldr	r3, [pc, #600]	; (800703c <_dtoa_r+0x644>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	4640      	mov	r0, r8
 8006de8:	4649      	mov	r1, r9
 8006dea:	f7f9 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d07b      	beq.n	8006eea <_dtoa_r+0x4f2>
 8006df2:	9b04      	ldr	r3, [sp, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d078      	beq.n	8006eea <_dtoa_r+0x4f2>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	dd39      	ble.n	8006e72 <_dtoa_r+0x47a>
 8006dfe:	4b90      	ldr	r3, [pc, #576]	; (8007040 <_dtoa_r+0x648>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fbff 	bl	8000608 <__aeabi_dmul>
 8006e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e0e:	9e01      	ldr	r6, [sp, #4]
 8006e10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e14:	3501      	adds	r5, #1
 8006e16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f7f9 fb8a 	bl	8000534 <__aeabi_i2d>
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	f7f9 fbf0 	bl	8000608 <__aeabi_dmul>
 8006e28:	4b86      	ldr	r3, [pc, #536]	; (8007044 <_dtoa_r+0x64c>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fa36 	bl	800029c <__adddf3>
 8006e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	d158      	bne.n	8006ef0 <_dtoa_r+0x4f8>
 8006e3e:	4b82      	ldr	r3, [pc, #520]	; (8007048 <_dtoa_r+0x650>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fa27 	bl	8000298 <__aeabi_dsub>
 8006e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4e:	4680      	mov	r8, r0
 8006e50:	4689      	mov	r9, r1
 8006e52:	f7f9 fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f040 8296 	bne.w	8007388 <_dtoa_r+0x990>
 8006e5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e60:	4640      	mov	r0, r8
 8006e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe40 	bl	8000aec <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 8289 	bne.w	8007384 <_dtoa_r+0x98c>
 8006e72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f2c0 814e 	blt.w	800711a <_dtoa_r+0x722>
 8006e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e82:	f300 814a 	bgt.w	800711a <_dtoa_r+0x722>
 8006e86:	4b6b      	ldr	r3, [pc, #428]	; (8007034 <_dtoa_r+0x63c>)
 8006e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f280 80dc 	bge.w	8007050 <_dtoa_r+0x658>
 8006e98:	9b04      	ldr	r3, [sp, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f300 80d8 	bgt.w	8007050 <_dtoa_r+0x658>
 8006ea0:	f040 826f 	bne.w	8007382 <_dtoa_r+0x98a>
 8006ea4:	4b68      	ldr	r3, [pc, #416]	; (8007048 <_dtoa_r+0x650>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fbac 	bl	8000608 <__aeabi_dmul>
 8006eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb4:	f7f9 fe2e 	bl	8000b14 <__aeabi_dcmpge>
 8006eb8:	9e04      	ldr	r6, [sp, #16]
 8006eba:	4637      	mov	r7, r6
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 8245 	bne.w	800734c <_dtoa_r+0x954>
 8006ec2:	9d00      	ldr	r5, [sp, #0]
 8006ec4:	2331      	movs	r3, #49	; 0x31
 8006ec6:	f805 3b01 	strb.w	r3, [r5], #1
 8006eca:	f10b 0b01 	add.w	fp, fp, #1
 8006ece:	e241      	b.n	8007354 <_dtoa_r+0x95c>
 8006ed0:	07f2      	lsls	r2, r6, #31
 8006ed2:	d505      	bpl.n	8006ee0 <_dtoa_r+0x4e8>
 8006ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed8:	f7f9 fb96 	bl	8000608 <__aeabi_dmul>
 8006edc:	3501      	adds	r5, #1
 8006ede:	2301      	movs	r3, #1
 8006ee0:	1076      	asrs	r6, r6, #1
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	e773      	b.n	8006dce <_dtoa_r+0x3d6>
 8006ee6:	2502      	movs	r5, #2
 8006ee8:	e775      	b.n	8006dd6 <_dtoa_r+0x3de>
 8006eea:	9e04      	ldr	r6, [sp, #16]
 8006eec:	465f      	mov	r7, fp
 8006eee:	e792      	b.n	8006e16 <_dtoa_r+0x41e>
 8006ef0:	9900      	ldr	r1, [sp, #0]
 8006ef2:	4b50      	ldr	r3, [pc, #320]	; (8007034 <_dtoa_r+0x63c>)
 8006ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ef8:	4431      	add	r1, r6
 8006efa:	9102      	str	r1, [sp, #8]
 8006efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006efe:	eeb0 9a47 	vmov.f32	s18, s14
 8006f02:	eef0 9a67 	vmov.f32	s19, s15
 8006f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f0e:	2900      	cmp	r1, #0
 8006f10:	d044      	beq.n	8006f9c <_dtoa_r+0x5a4>
 8006f12:	494e      	ldr	r1, [pc, #312]	; (800704c <_dtoa_r+0x654>)
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7f9 fca1 	bl	800085c <__aeabi_ddiv>
 8006f1a:	ec53 2b19 	vmov	r2, r3, d9
 8006f1e:	f7f9 f9bb 	bl	8000298 <__aeabi_dsub>
 8006f22:	9d00      	ldr	r5, [sp, #0]
 8006f24:	ec41 0b19 	vmov	d9, r0, r1
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7f9 fe1c 	bl	8000b68 <__aeabi_d2iz>
 8006f30:	4606      	mov	r6, r0
 8006f32:	f7f9 faff 	bl	8000534 <__aeabi_i2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 f9ab 	bl	8000298 <__aeabi_dsub>
 8006f42:	3630      	adds	r6, #48	; 0x30
 8006f44:	f805 6b01 	strb.w	r6, [r5], #1
 8006f48:	ec53 2b19 	vmov	r2, r3, d9
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	4689      	mov	r9, r1
 8006f50:	f7f9 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d164      	bne.n	8007022 <_dtoa_r+0x62a>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	4937      	ldr	r1, [pc, #220]	; (800703c <_dtoa_r+0x644>)
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f7f9 f99a 	bl	8000298 <__aeabi_dsub>
 8006f64:	ec53 2b19 	vmov	r2, r3, d9
 8006f68:	f7f9 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f040 80b6 	bne.w	80070de <_dtoa_r+0x6e6>
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	429d      	cmp	r5, r3
 8006f76:	f43f af7c 	beq.w	8006e72 <_dtoa_r+0x47a>
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <_dtoa_r+0x648>)
 8006f7c:	ec51 0b19 	vmov	r0, r1, d9
 8006f80:	2200      	movs	r2, #0
 8006f82:	f7f9 fb41 	bl	8000608 <__aeabi_dmul>
 8006f86:	4b2e      	ldr	r3, [pc, #184]	; (8007040 <_dtoa_r+0x648>)
 8006f88:	ec41 0b19 	vmov	d9, r0, r1
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fb39 	bl	8000608 <__aeabi_dmul>
 8006f96:	4680      	mov	r8, r0
 8006f98:	4689      	mov	r9, r1
 8006f9a:	e7c5      	b.n	8006f28 <_dtoa_r+0x530>
 8006f9c:	ec51 0b17 	vmov	r0, r1, d7
 8006fa0:	f7f9 fb32 	bl	8000608 <__aeabi_dmul>
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	9d00      	ldr	r5, [sp, #0]
 8006fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006faa:	ec41 0b19 	vmov	d9, r0, r1
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7f9 fdd9 	bl	8000b68 <__aeabi_d2iz>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	f7f9 fabc 	bl	8000534 <__aeabi_i2d>
 8006fbc:	3630      	adds	r6, #48	; 0x30
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 f967 	bl	8000298 <__aeabi_dsub>
 8006fca:	f805 6b01 	strb.w	r6, [r5], #1
 8006fce:	9b02      	ldr	r3, [sp, #8]
 8006fd0:	429d      	cmp	r5, r3
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	d124      	bne.n	8007026 <_dtoa_r+0x62e>
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <_dtoa_r+0x654>)
 8006fde:	ec51 0b19 	vmov	r0, r1, d9
 8006fe2:	f7f9 f95b 	bl	800029c <__adddf3>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 fd9b 	bl	8000b28 <__aeabi_dcmpgt>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d173      	bne.n	80070de <_dtoa_r+0x6e6>
 8006ff6:	ec53 2b19 	vmov	r2, r3, d9
 8006ffa:	4914      	ldr	r1, [pc, #80]	; (800704c <_dtoa_r+0x654>)
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f7f9 f94b 	bl	8000298 <__aeabi_dsub>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	f43f af2f 	beq.w	8006e72 <_dtoa_r+0x47a>
 8007014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007016:	1e6b      	subs	r3, r5, #1
 8007018:	930f      	str	r3, [sp, #60]	; 0x3c
 800701a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800701e:	2b30      	cmp	r3, #48	; 0x30
 8007020:	d0f8      	beq.n	8007014 <_dtoa_r+0x61c>
 8007022:	46bb      	mov	fp, r7
 8007024:	e04a      	b.n	80070bc <_dtoa_r+0x6c4>
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <_dtoa_r+0x648>)
 8007028:	f7f9 faee 	bl	8000608 <__aeabi_dmul>
 800702c:	4680      	mov	r8, r0
 800702e:	4689      	mov	r9, r1
 8007030:	e7bd      	b.n	8006fae <_dtoa_r+0x5b6>
 8007032:	bf00      	nop
 8007034:	0800a2c0 	.word	0x0800a2c0
 8007038:	0800a298 	.word	0x0800a298
 800703c:	3ff00000 	.word	0x3ff00000
 8007040:	40240000 	.word	0x40240000
 8007044:	401c0000 	.word	0x401c0000
 8007048:	40140000 	.word	0x40140000
 800704c:	3fe00000 	.word	0x3fe00000
 8007050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007054:	9d00      	ldr	r5, [sp, #0]
 8007056:	4642      	mov	r2, r8
 8007058:	464b      	mov	r3, r9
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 fbfd 	bl	800085c <__aeabi_ddiv>
 8007062:	f7f9 fd81 	bl	8000b68 <__aeabi_d2iz>
 8007066:	9001      	str	r0, [sp, #4]
 8007068:	f7f9 fa64 	bl	8000534 <__aeabi_i2d>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	f7f9 faca 	bl	8000608 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 f90c 	bl	8000298 <__aeabi_dsub>
 8007080:	9e01      	ldr	r6, [sp, #4]
 8007082:	9f04      	ldr	r7, [sp, #16]
 8007084:	3630      	adds	r6, #48	; 0x30
 8007086:	f805 6b01 	strb.w	r6, [r5], #1
 800708a:	9e00      	ldr	r6, [sp, #0]
 800708c:	1bae      	subs	r6, r5, r6
 800708e:	42b7      	cmp	r7, r6
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	d134      	bne.n	8007100 <_dtoa_r+0x708>
 8007096:	f7f9 f901 	bl	800029c <__adddf3>
 800709a:	4642      	mov	r2, r8
 800709c:	464b      	mov	r3, r9
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	f7f9 fd41 	bl	8000b28 <__aeabi_dcmpgt>
 80070a6:	b9c8      	cbnz	r0, 80070dc <_dtoa_r+0x6e4>
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b4:	b110      	cbz	r0, 80070bc <_dtoa_r+0x6c4>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	07db      	lsls	r3, r3, #31
 80070ba:	d40f      	bmi.n	80070dc <_dtoa_r+0x6e4>
 80070bc:	4651      	mov	r1, sl
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fbcc 	bl	800785c <_Bfree>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070c8:	702b      	strb	r3, [r5, #0]
 80070ca:	f10b 0301 	add.w	r3, fp, #1
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f43f ace2 	beq.w	8006a9c <_dtoa_r+0xa4>
 80070d8:	601d      	str	r5, [r3, #0]
 80070da:	e4df      	b.n	8006a9c <_dtoa_r+0xa4>
 80070dc:	465f      	mov	r7, fp
 80070de:	462b      	mov	r3, r5
 80070e0:	461d      	mov	r5, r3
 80070e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070e6:	2a39      	cmp	r2, #57	; 0x39
 80070e8:	d106      	bne.n	80070f8 <_dtoa_r+0x700>
 80070ea:	9a00      	ldr	r2, [sp, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1f7      	bne.n	80070e0 <_dtoa_r+0x6e8>
 80070f0:	9900      	ldr	r1, [sp, #0]
 80070f2:	2230      	movs	r2, #48	; 0x30
 80070f4:	3701      	adds	r7, #1
 80070f6:	700a      	strb	r2, [r1, #0]
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	3201      	adds	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e790      	b.n	8007022 <_dtoa_r+0x62a>
 8007100:	4ba3      	ldr	r3, [pc, #652]	; (8007390 <_dtoa_r+0x998>)
 8007102:	2200      	movs	r2, #0
 8007104:	f7f9 fa80 	bl	8000608 <__aeabi_dmul>
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	4606      	mov	r6, r0
 800710e:	460f      	mov	r7, r1
 8007110:	f7f9 fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007114:	2800      	cmp	r0, #0
 8007116:	d09e      	beq.n	8007056 <_dtoa_r+0x65e>
 8007118:	e7d0      	b.n	80070bc <_dtoa_r+0x6c4>
 800711a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800711c:	2a00      	cmp	r2, #0
 800711e:	f000 80ca 	beq.w	80072b6 <_dtoa_r+0x8be>
 8007122:	9a07      	ldr	r2, [sp, #28]
 8007124:	2a01      	cmp	r2, #1
 8007126:	f300 80ad 	bgt.w	8007284 <_dtoa_r+0x88c>
 800712a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800712c:	2a00      	cmp	r2, #0
 800712e:	f000 80a5 	beq.w	800727c <_dtoa_r+0x884>
 8007132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007136:	9e08      	ldr	r6, [sp, #32]
 8007138:	9d05      	ldr	r5, [sp, #20]
 800713a:	9a05      	ldr	r2, [sp, #20]
 800713c:	441a      	add	r2, r3
 800713e:	9205      	str	r2, [sp, #20]
 8007140:	9a06      	ldr	r2, [sp, #24]
 8007142:	2101      	movs	r1, #1
 8007144:	441a      	add	r2, r3
 8007146:	4620      	mov	r0, r4
 8007148:	9206      	str	r2, [sp, #24]
 800714a:	f000 fc87 	bl	8007a5c <__i2b>
 800714e:	4607      	mov	r7, r0
 8007150:	b165      	cbz	r5, 800716c <_dtoa_r+0x774>
 8007152:	9b06      	ldr	r3, [sp, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd09      	ble.n	800716c <_dtoa_r+0x774>
 8007158:	42ab      	cmp	r3, r5
 800715a:	9a05      	ldr	r2, [sp, #20]
 800715c:	bfa8      	it	ge
 800715e:	462b      	movge	r3, r5
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	9205      	str	r2, [sp, #20]
 8007164:	9a06      	ldr	r2, [sp, #24]
 8007166:	1aed      	subs	r5, r5, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	b1f3      	cbz	r3, 80071ae <_dtoa_r+0x7b6>
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a3 	beq.w	80072be <_dtoa_r+0x8c6>
 8007178:	2e00      	cmp	r6, #0
 800717a:	dd10      	ble.n	800719e <_dtoa_r+0x7a6>
 800717c:	4639      	mov	r1, r7
 800717e:	4632      	mov	r2, r6
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fd2b 	bl	8007bdc <__pow5mult>
 8007186:	4652      	mov	r2, sl
 8007188:	4601      	mov	r1, r0
 800718a:	4607      	mov	r7, r0
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fc7b 	bl	8007a88 <__multiply>
 8007192:	4651      	mov	r1, sl
 8007194:	4680      	mov	r8, r0
 8007196:	4620      	mov	r0, r4
 8007198:	f000 fb60 	bl	800785c <_Bfree>
 800719c:	46c2      	mov	sl, r8
 800719e:	9b08      	ldr	r3, [sp, #32]
 80071a0:	1b9a      	subs	r2, r3, r6
 80071a2:	d004      	beq.n	80071ae <_dtoa_r+0x7b6>
 80071a4:	4651      	mov	r1, sl
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fd18 	bl	8007bdc <__pow5mult>
 80071ac:	4682      	mov	sl, r0
 80071ae:	2101      	movs	r1, #1
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fc53 	bl	8007a5c <__i2b>
 80071b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	4606      	mov	r6, r0
 80071bc:	f340 8081 	ble.w	80072c2 <_dtoa_r+0x8ca>
 80071c0:	461a      	mov	r2, r3
 80071c2:	4601      	mov	r1, r0
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 fd09 	bl	8007bdc <__pow5mult>
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	4606      	mov	r6, r0
 80071d0:	dd7a      	ble.n	80072c8 <_dtoa_r+0x8d0>
 80071d2:	f04f 0800 	mov.w	r8, #0
 80071d6:	6933      	ldr	r3, [r6, #16]
 80071d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071dc:	6918      	ldr	r0, [r3, #16]
 80071de:	f000 fbef 	bl	80079c0 <__hi0bits>
 80071e2:	f1c0 0020 	rsb	r0, r0, #32
 80071e6:	9b06      	ldr	r3, [sp, #24]
 80071e8:	4418      	add	r0, r3
 80071ea:	f010 001f 	ands.w	r0, r0, #31
 80071ee:	f000 8094 	beq.w	800731a <_dtoa_r+0x922>
 80071f2:	f1c0 0320 	rsb	r3, r0, #32
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	f340 8085 	ble.w	8007306 <_dtoa_r+0x90e>
 80071fc:	9b05      	ldr	r3, [sp, #20]
 80071fe:	f1c0 001c 	rsb	r0, r0, #28
 8007202:	4403      	add	r3, r0
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	4403      	add	r3, r0
 800720a:	4405      	add	r5, r0
 800720c:	9306      	str	r3, [sp, #24]
 800720e:	9b05      	ldr	r3, [sp, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	dd05      	ble.n	8007220 <_dtoa_r+0x828>
 8007214:	4651      	mov	r1, sl
 8007216:	461a      	mov	r2, r3
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fd39 	bl	8007c90 <__lshift>
 800721e:	4682      	mov	sl, r0
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd05      	ble.n	8007232 <_dtoa_r+0x83a>
 8007226:	4631      	mov	r1, r6
 8007228:	461a      	mov	r2, r3
 800722a:	4620      	mov	r0, r4
 800722c:	f000 fd30 	bl	8007c90 <__lshift>
 8007230:	4606      	mov	r6, r0
 8007232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007234:	2b00      	cmp	r3, #0
 8007236:	d072      	beq.n	800731e <_dtoa_r+0x926>
 8007238:	4631      	mov	r1, r6
 800723a:	4650      	mov	r0, sl
 800723c:	f000 fd94 	bl	8007d68 <__mcmp>
 8007240:	2800      	cmp	r0, #0
 8007242:	da6c      	bge.n	800731e <_dtoa_r+0x926>
 8007244:	2300      	movs	r3, #0
 8007246:	4651      	mov	r1, sl
 8007248:	220a      	movs	r2, #10
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fb28 	bl	80078a0 <__multadd>
 8007250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007252:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007256:	4682      	mov	sl, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 81b0 	beq.w	80075be <_dtoa_r+0xbc6>
 800725e:	2300      	movs	r3, #0
 8007260:	4639      	mov	r1, r7
 8007262:	220a      	movs	r2, #10
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fb1b 	bl	80078a0 <__multadd>
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	4607      	mov	r7, r0
 8007270:	f300 8096 	bgt.w	80073a0 <_dtoa_r+0x9a8>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	2b02      	cmp	r3, #2
 8007278:	dc59      	bgt.n	800732e <_dtoa_r+0x936>
 800727a:	e091      	b.n	80073a0 <_dtoa_r+0x9a8>
 800727c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800727e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007282:	e758      	b.n	8007136 <_dtoa_r+0x73e>
 8007284:	9b04      	ldr	r3, [sp, #16]
 8007286:	1e5e      	subs	r6, r3, #1
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	42b3      	cmp	r3, r6
 800728c:	bfbf      	itttt	lt
 800728e:	9b08      	ldrlt	r3, [sp, #32]
 8007290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007292:	9608      	strlt	r6, [sp, #32]
 8007294:	1af3      	sublt	r3, r6, r3
 8007296:	bfb4      	ite	lt
 8007298:	18d2      	addlt	r2, r2, r3
 800729a:	1b9e      	subge	r6, r3, r6
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	bfbc      	itt	lt
 80072a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072a2:	2600      	movlt	r6, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bfb7      	itett	lt
 80072a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072b0:	1a9d      	sublt	r5, r3, r2
 80072b2:	2300      	movlt	r3, #0
 80072b4:	e741      	b.n	800713a <_dtoa_r+0x742>
 80072b6:	9e08      	ldr	r6, [sp, #32]
 80072b8:	9d05      	ldr	r5, [sp, #20]
 80072ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072bc:	e748      	b.n	8007150 <_dtoa_r+0x758>
 80072be:	9a08      	ldr	r2, [sp, #32]
 80072c0:	e770      	b.n	80071a4 <_dtoa_r+0x7ac>
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	dc19      	bgt.n	80072fc <_dtoa_r+0x904>
 80072c8:	9b02      	ldr	r3, [sp, #8]
 80072ca:	b9bb      	cbnz	r3, 80072fc <_dtoa_r+0x904>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d2:	b99b      	cbnz	r3, 80072fc <_dtoa_r+0x904>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	051b      	lsls	r3, r3, #20
 80072de:	b183      	cbz	r3, 8007302 <_dtoa_r+0x90a>
 80072e0:	9b05      	ldr	r3, [sp, #20]
 80072e2:	3301      	adds	r3, #1
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	9b06      	ldr	r3, [sp, #24]
 80072e8:	3301      	adds	r3, #1
 80072ea:	9306      	str	r3, [sp, #24]
 80072ec:	f04f 0801 	mov.w	r8, #1
 80072f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f47f af6f 	bne.w	80071d6 <_dtoa_r+0x7de>
 80072f8:	2001      	movs	r0, #1
 80072fa:	e774      	b.n	80071e6 <_dtoa_r+0x7ee>
 80072fc:	f04f 0800 	mov.w	r8, #0
 8007300:	e7f6      	b.n	80072f0 <_dtoa_r+0x8f8>
 8007302:	4698      	mov	r8, r3
 8007304:	e7f4      	b.n	80072f0 <_dtoa_r+0x8f8>
 8007306:	d082      	beq.n	800720e <_dtoa_r+0x816>
 8007308:	9a05      	ldr	r2, [sp, #20]
 800730a:	331c      	adds	r3, #28
 800730c:	441a      	add	r2, r3
 800730e:	9205      	str	r2, [sp, #20]
 8007310:	9a06      	ldr	r2, [sp, #24]
 8007312:	441a      	add	r2, r3
 8007314:	441d      	add	r5, r3
 8007316:	9206      	str	r2, [sp, #24]
 8007318:	e779      	b.n	800720e <_dtoa_r+0x816>
 800731a:	4603      	mov	r3, r0
 800731c:	e7f4      	b.n	8007308 <_dtoa_r+0x910>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	dc37      	bgt.n	8007394 <_dtoa_r+0x99c>
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	2b02      	cmp	r3, #2
 8007328:	dd34      	ble.n	8007394 <_dtoa_r+0x99c>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	b963      	cbnz	r3, 800734c <_dtoa_r+0x954>
 8007332:	4631      	mov	r1, r6
 8007334:	2205      	movs	r2, #5
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fab2 	bl	80078a0 <__multadd>
 800733c:	4601      	mov	r1, r0
 800733e:	4606      	mov	r6, r0
 8007340:	4650      	mov	r0, sl
 8007342:	f000 fd11 	bl	8007d68 <__mcmp>
 8007346:	2800      	cmp	r0, #0
 8007348:	f73f adbb 	bgt.w	8006ec2 <_dtoa_r+0x4ca>
 800734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734e:	9d00      	ldr	r5, [sp, #0]
 8007350:	ea6f 0b03 	mvn.w	fp, r3
 8007354:	f04f 0800 	mov.w	r8, #0
 8007358:	4631      	mov	r1, r6
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fa7e 	bl	800785c <_Bfree>
 8007360:	2f00      	cmp	r7, #0
 8007362:	f43f aeab 	beq.w	80070bc <_dtoa_r+0x6c4>
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	d005      	beq.n	8007378 <_dtoa_r+0x980>
 800736c:	45b8      	cmp	r8, r7
 800736e:	d003      	beq.n	8007378 <_dtoa_r+0x980>
 8007370:	4641      	mov	r1, r8
 8007372:	4620      	mov	r0, r4
 8007374:	f000 fa72 	bl	800785c <_Bfree>
 8007378:	4639      	mov	r1, r7
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fa6e 	bl	800785c <_Bfree>
 8007380:	e69c      	b.n	80070bc <_dtoa_r+0x6c4>
 8007382:	2600      	movs	r6, #0
 8007384:	4637      	mov	r7, r6
 8007386:	e7e1      	b.n	800734c <_dtoa_r+0x954>
 8007388:	46bb      	mov	fp, r7
 800738a:	4637      	mov	r7, r6
 800738c:	e599      	b.n	8006ec2 <_dtoa_r+0x4ca>
 800738e:	bf00      	nop
 8007390:	40240000 	.word	0x40240000
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80c8 	beq.w	800752c <_dtoa_r+0xb34>
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	dd05      	ble.n	80073b0 <_dtoa_r+0x9b8>
 80073a4:	4639      	mov	r1, r7
 80073a6:	462a      	mov	r2, r5
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fc71 	bl	8007c90 <__lshift>
 80073ae:	4607      	mov	r7, r0
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	d05b      	beq.n	800746e <_dtoa_r+0xa76>
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fa0f 	bl	80077dc <_Balloc>
 80073be:	4605      	mov	r5, r0
 80073c0:	b928      	cbnz	r0, 80073ce <_dtoa_r+0x9d6>
 80073c2:	4b83      	ldr	r3, [pc, #524]	; (80075d0 <_dtoa_r+0xbd8>)
 80073c4:	4602      	mov	r2, r0
 80073c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073ca:	f7ff bb2e 	b.w	8006a2a <_dtoa_r+0x32>
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	3202      	adds	r2, #2
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	f107 010c 	add.w	r1, r7, #12
 80073d8:	300c      	adds	r0, #12
 80073da:	f7ff fa6f 	bl	80068bc <memcpy>
 80073de:	2201      	movs	r2, #1
 80073e0:	4629      	mov	r1, r5
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fc54 	bl	8007c90 <__lshift>
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f2:	4413      	add	r3, r2
 80073f4:	9308      	str	r3, [sp, #32]
 80073f6:	9b02      	ldr	r3, [sp, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	46b8      	mov	r8, r7
 80073fe:	9306      	str	r3, [sp, #24]
 8007400:	4607      	mov	r7, r0
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	4631      	mov	r1, r6
 8007406:	3b01      	subs	r3, #1
 8007408:	4650      	mov	r0, sl
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	f7ff fa6a 	bl	80068e4 <quorem>
 8007410:	4641      	mov	r1, r8
 8007412:	9002      	str	r0, [sp, #8]
 8007414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007418:	4650      	mov	r0, sl
 800741a:	f000 fca5 	bl	8007d68 <__mcmp>
 800741e:	463a      	mov	r2, r7
 8007420:	9005      	str	r0, [sp, #20]
 8007422:	4631      	mov	r1, r6
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fcbb 	bl	8007da0 <__mdiff>
 800742a:	68c2      	ldr	r2, [r0, #12]
 800742c:	4605      	mov	r5, r0
 800742e:	bb02      	cbnz	r2, 8007472 <_dtoa_r+0xa7a>
 8007430:	4601      	mov	r1, r0
 8007432:	4650      	mov	r0, sl
 8007434:	f000 fc98 	bl	8007d68 <__mcmp>
 8007438:	4602      	mov	r2, r0
 800743a:	4629      	mov	r1, r5
 800743c:	4620      	mov	r0, r4
 800743e:	9209      	str	r2, [sp, #36]	; 0x24
 8007440:	f000 fa0c 	bl	800785c <_Bfree>
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007448:	9d04      	ldr	r5, [sp, #16]
 800744a:	ea43 0102 	orr.w	r1, r3, r2
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	4319      	orrs	r1, r3
 8007452:	d110      	bne.n	8007476 <_dtoa_r+0xa7e>
 8007454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007458:	d029      	beq.n	80074ae <_dtoa_r+0xab6>
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd02      	ble.n	8007466 <_dtoa_r+0xa6e>
 8007460:	9b02      	ldr	r3, [sp, #8]
 8007462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	f883 9000 	strb.w	r9, [r3]
 800746c:	e774      	b.n	8007358 <_dtoa_r+0x960>
 800746e:	4638      	mov	r0, r7
 8007470:	e7ba      	b.n	80073e8 <_dtoa_r+0x9f0>
 8007472:	2201      	movs	r2, #1
 8007474:	e7e1      	b.n	800743a <_dtoa_r+0xa42>
 8007476:	9b05      	ldr	r3, [sp, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db04      	blt.n	8007486 <_dtoa_r+0xa8e>
 800747c:	9907      	ldr	r1, [sp, #28]
 800747e:	430b      	orrs	r3, r1
 8007480:	9906      	ldr	r1, [sp, #24]
 8007482:	430b      	orrs	r3, r1
 8007484:	d120      	bne.n	80074c8 <_dtoa_r+0xad0>
 8007486:	2a00      	cmp	r2, #0
 8007488:	dded      	ble.n	8007466 <_dtoa_r+0xa6e>
 800748a:	4651      	mov	r1, sl
 800748c:	2201      	movs	r2, #1
 800748e:	4620      	mov	r0, r4
 8007490:	f000 fbfe 	bl	8007c90 <__lshift>
 8007494:	4631      	mov	r1, r6
 8007496:	4682      	mov	sl, r0
 8007498:	f000 fc66 	bl	8007d68 <__mcmp>
 800749c:	2800      	cmp	r0, #0
 800749e:	dc03      	bgt.n	80074a8 <_dtoa_r+0xab0>
 80074a0:	d1e1      	bne.n	8007466 <_dtoa_r+0xa6e>
 80074a2:	f019 0f01 	tst.w	r9, #1
 80074a6:	d0de      	beq.n	8007466 <_dtoa_r+0xa6e>
 80074a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074ac:	d1d8      	bne.n	8007460 <_dtoa_r+0xa68>
 80074ae:	9a01      	ldr	r2, [sp, #4]
 80074b0:	2339      	movs	r3, #57	; 0x39
 80074b2:	7013      	strb	r3, [r2, #0]
 80074b4:	462b      	mov	r3, r5
 80074b6:	461d      	mov	r5, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074be:	2a39      	cmp	r2, #57	; 0x39
 80074c0:	d06c      	beq.n	800759c <_dtoa_r+0xba4>
 80074c2:	3201      	adds	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e747      	b.n	8007358 <_dtoa_r+0x960>
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	dd07      	ble.n	80074dc <_dtoa_r+0xae4>
 80074cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074d0:	d0ed      	beq.n	80074ae <_dtoa_r+0xab6>
 80074d2:	9a01      	ldr	r2, [sp, #4]
 80074d4:	f109 0301 	add.w	r3, r9, #1
 80074d8:	7013      	strb	r3, [r2, #0]
 80074da:	e73d      	b.n	8007358 <_dtoa_r+0x960>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	9a08      	ldr	r2, [sp, #32]
 80074e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d043      	beq.n	8007570 <_dtoa_r+0xb78>
 80074e8:	4651      	mov	r1, sl
 80074ea:	2300      	movs	r3, #0
 80074ec:	220a      	movs	r2, #10
 80074ee:	4620      	mov	r0, r4
 80074f0:	f000 f9d6 	bl	80078a0 <__multadd>
 80074f4:	45b8      	cmp	r8, r7
 80074f6:	4682      	mov	sl, r0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	f04f 020a 	mov.w	r2, #10
 8007500:	4641      	mov	r1, r8
 8007502:	4620      	mov	r0, r4
 8007504:	d107      	bne.n	8007516 <_dtoa_r+0xb1e>
 8007506:	f000 f9cb 	bl	80078a0 <__multadd>
 800750a:	4680      	mov	r8, r0
 800750c:	4607      	mov	r7, r0
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	3301      	adds	r3, #1
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	e775      	b.n	8007402 <_dtoa_r+0xa0a>
 8007516:	f000 f9c3 	bl	80078a0 <__multadd>
 800751a:	4639      	mov	r1, r7
 800751c:	4680      	mov	r8, r0
 800751e:	2300      	movs	r3, #0
 8007520:	220a      	movs	r2, #10
 8007522:	4620      	mov	r0, r4
 8007524:	f000 f9bc 	bl	80078a0 <__multadd>
 8007528:	4607      	mov	r7, r0
 800752a:	e7f0      	b.n	800750e <_dtoa_r+0xb16>
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9d00      	ldr	r5, [sp, #0]
 8007532:	4631      	mov	r1, r6
 8007534:	4650      	mov	r0, sl
 8007536:	f7ff f9d5 	bl	80068e4 <quorem>
 800753a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	f805 9b01 	strb.w	r9, [r5], #1
 8007544:	1aea      	subs	r2, r5, r3
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	4293      	cmp	r3, r2
 800754a:	dd07      	ble.n	800755c <_dtoa_r+0xb64>
 800754c:	4651      	mov	r1, sl
 800754e:	2300      	movs	r3, #0
 8007550:	220a      	movs	r2, #10
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f9a4 	bl	80078a0 <__multadd>
 8007558:	4682      	mov	sl, r0
 800755a:	e7ea      	b.n	8007532 <_dtoa_r+0xb3a>
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfc8      	it	gt
 8007562:	461d      	movgt	r5, r3
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	bfd8      	it	le
 8007568:	2501      	movle	r5, #1
 800756a:	441d      	add	r5, r3
 800756c:	f04f 0800 	mov.w	r8, #0
 8007570:	4651      	mov	r1, sl
 8007572:	2201      	movs	r2, #1
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fb8b 	bl	8007c90 <__lshift>
 800757a:	4631      	mov	r1, r6
 800757c:	4682      	mov	sl, r0
 800757e:	f000 fbf3 	bl	8007d68 <__mcmp>
 8007582:	2800      	cmp	r0, #0
 8007584:	dc96      	bgt.n	80074b4 <_dtoa_r+0xabc>
 8007586:	d102      	bne.n	800758e <_dtoa_r+0xb96>
 8007588:	f019 0f01 	tst.w	r9, #1
 800758c:	d192      	bne.n	80074b4 <_dtoa_r+0xabc>
 800758e:	462b      	mov	r3, r5
 8007590:	461d      	mov	r5, r3
 8007592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007596:	2a30      	cmp	r2, #48	; 0x30
 8007598:	d0fa      	beq.n	8007590 <_dtoa_r+0xb98>
 800759a:	e6dd      	b.n	8007358 <_dtoa_r+0x960>
 800759c:	9a00      	ldr	r2, [sp, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d189      	bne.n	80074b6 <_dtoa_r+0xabe>
 80075a2:	f10b 0b01 	add.w	fp, fp, #1
 80075a6:	2331      	movs	r3, #49	; 0x31
 80075a8:	e796      	b.n	80074d8 <_dtoa_r+0xae0>
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <_dtoa_r+0xbdc>)
 80075ac:	f7ff ba99 	b.w	8006ae2 <_dtoa_r+0xea>
 80075b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f47f aa6d 	bne.w	8006a92 <_dtoa_r+0x9a>
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <_dtoa_r+0xbe0>)
 80075ba:	f7ff ba92 	b.w	8006ae2 <_dtoa_r+0xea>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dcb5      	bgt.n	8007530 <_dtoa_r+0xb38>
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	f73f aeb1 	bgt.w	800732e <_dtoa_r+0x936>
 80075cc:	e7b0      	b.n	8007530 <_dtoa_r+0xb38>
 80075ce:	bf00      	nop
 80075d0:	0800a22d 	.word	0x0800a22d
 80075d4:	0800a188 	.word	0x0800a188
 80075d8:	0800a1b1 	.word	0x0800a1b1

080075dc <_free_r>:
 80075dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075de:	2900      	cmp	r1, #0
 80075e0:	d044      	beq.n	800766c <_free_r+0x90>
 80075e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e6:	9001      	str	r0, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f1a1 0404 	sub.w	r4, r1, #4
 80075ee:	bfb8      	it	lt
 80075f0:	18e4      	addlt	r4, r4, r3
 80075f2:	f000 f8e7 	bl	80077c4 <__malloc_lock>
 80075f6:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <_free_r+0x94>)
 80075f8:	9801      	ldr	r0, [sp, #4]
 80075fa:	6813      	ldr	r3, [r2, #0]
 80075fc:	b933      	cbnz	r3, 800760c <_free_r+0x30>
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6014      	str	r4, [r2, #0]
 8007602:	b003      	add	sp, #12
 8007604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007608:	f000 b8e2 	b.w	80077d0 <__malloc_unlock>
 800760c:	42a3      	cmp	r3, r4
 800760e:	d908      	bls.n	8007622 <_free_r+0x46>
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	1961      	adds	r1, r4, r5
 8007614:	428b      	cmp	r3, r1
 8007616:	bf01      	itttt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	1949      	addeq	r1, r1, r5
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	e7ed      	b.n	80075fe <_free_r+0x22>
 8007622:	461a      	mov	r2, r3
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	b10b      	cbz	r3, 800762c <_free_r+0x50>
 8007628:	42a3      	cmp	r3, r4
 800762a:	d9fa      	bls.n	8007622 <_free_r+0x46>
 800762c:	6811      	ldr	r1, [r2, #0]
 800762e:	1855      	adds	r5, r2, r1
 8007630:	42a5      	cmp	r5, r4
 8007632:	d10b      	bne.n	800764c <_free_r+0x70>
 8007634:	6824      	ldr	r4, [r4, #0]
 8007636:	4421      	add	r1, r4
 8007638:	1854      	adds	r4, r2, r1
 800763a:	42a3      	cmp	r3, r4
 800763c:	6011      	str	r1, [r2, #0]
 800763e:	d1e0      	bne.n	8007602 <_free_r+0x26>
 8007640:	681c      	ldr	r4, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	6053      	str	r3, [r2, #4]
 8007646:	440c      	add	r4, r1
 8007648:	6014      	str	r4, [r2, #0]
 800764a:	e7da      	b.n	8007602 <_free_r+0x26>
 800764c:	d902      	bls.n	8007654 <_free_r+0x78>
 800764e:	230c      	movs	r3, #12
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	e7d6      	b.n	8007602 <_free_r+0x26>
 8007654:	6825      	ldr	r5, [r4, #0]
 8007656:	1961      	adds	r1, r4, r5
 8007658:	428b      	cmp	r3, r1
 800765a:	bf04      	itt	eq
 800765c:	6819      	ldreq	r1, [r3, #0]
 800765e:	685b      	ldreq	r3, [r3, #4]
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	bf04      	itt	eq
 8007664:	1949      	addeq	r1, r1, r5
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	6054      	str	r4, [r2, #4]
 800766a:	e7ca      	b.n	8007602 <_free_r+0x26>
 800766c:	b003      	add	sp, #12
 800766e:	bd30      	pop	{r4, r5, pc}
 8007670:	200050ac 	.word	0x200050ac

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 b823 	b.w	80076c4 <_malloc_r>
 800767e:	bf00      	nop
 8007680:	20000068 	.word	0x20000068

08007684 <sbrk_aligned>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0e      	ldr	r6, [pc, #56]	; (80076c0 <sbrk_aligned+0x3c>)
 8007688:	460c      	mov	r4, r1
 800768a:	6831      	ldr	r1, [r6, #0]
 800768c:	4605      	mov	r5, r0
 800768e:	b911      	cbnz	r1, 8007696 <sbrk_aligned+0x12>
 8007690:	f001 fe1a 	bl	80092c8 <_sbrk_r>
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f001 fe15 	bl	80092c8 <_sbrk_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d00a      	beq.n	80076b8 <sbrk_aligned+0x34>
 80076a2:	1cc4      	adds	r4, r0, #3
 80076a4:	f024 0403 	bic.w	r4, r4, #3
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d007      	beq.n	80076bc <sbrk_aligned+0x38>
 80076ac:	1a21      	subs	r1, r4, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f001 fe0a 	bl	80092c8 <_sbrk_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d101      	bne.n	80076bc <sbrk_aligned+0x38>
 80076b8:	f04f 34ff 	mov.w	r4, #4294967295
 80076bc:	4620      	mov	r0, r4
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	200050b0 	.word	0x200050b0

080076c4 <_malloc_r>:
 80076c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c8:	1ccd      	adds	r5, r1, #3
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	4607      	mov	r7, r0
 80076da:	db01      	blt.n	80076e0 <_malloc_r+0x1c>
 80076dc:	42a9      	cmp	r1, r5
 80076de:	d905      	bls.n	80076ec <_malloc_r+0x28>
 80076e0:	230c      	movs	r3, #12
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	2600      	movs	r6, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077c0 <_malloc_r+0xfc>
 80076f0:	f000 f868 	bl	80077c4 <__malloc_lock>
 80076f4:	f8d8 3000 	ldr.w	r3, [r8]
 80076f8:	461c      	mov	r4, r3
 80076fa:	bb5c      	cbnz	r4, 8007754 <_malloc_r+0x90>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4638      	mov	r0, r7
 8007700:	f7ff ffc0 	bl	8007684 <sbrk_aligned>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	4604      	mov	r4, r0
 8007708:	d155      	bne.n	80077b6 <_malloc_r+0xf2>
 800770a:	f8d8 4000 	ldr.w	r4, [r8]
 800770e:	4626      	mov	r6, r4
 8007710:	2e00      	cmp	r6, #0
 8007712:	d145      	bne.n	80077a0 <_malloc_r+0xdc>
 8007714:	2c00      	cmp	r4, #0
 8007716:	d048      	beq.n	80077aa <_malloc_r+0xe6>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	4631      	mov	r1, r6
 800771c:	4638      	mov	r0, r7
 800771e:	eb04 0903 	add.w	r9, r4, r3
 8007722:	f001 fdd1 	bl	80092c8 <_sbrk_r>
 8007726:	4581      	cmp	r9, r0
 8007728:	d13f      	bne.n	80077aa <_malloc_r+0xe6>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1a6d      	subs	r5, r5, r1
 800772e:	4629      	mov	r1, r5
 8007730:	4638      	mov	r0, r7
 8007732:	f7ff ffa7 	bl	8007684 <sbrk_aligned>
 8007736:	3001      	adds	r0, #1
 8007738:	d037      	beq.n	80077aa <_malloc_r+0xe6>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	442b      	add	r3, r5
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	f8d8 3000 	ldr.w	r3, [r8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d038      	beq.n	80077ba <_malloc_r+0xf6>
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	42a2      	cmp	r2, r4
 800774c:	d12b      	bne.n	80077a6 <_malloc_r+0xe2>
 800774e:	2200      	movs	r2, #0
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e00f      	b.n	8007774 <_malloc_r+0xb0>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	1b52      	subs	r2, r2, r5
 8007758:	d41f      	bmi.n	800779a <_malloc_r+0xd6>
 800775a:	2a0b      	cmp	r2, #11
 800775c:	d917      	bls.n	800778e <_malloc_r+0xca>
 800775e:	1961      	adds	r1, r4, r5
 8007760:	42a3      	cmp	r3, r4
 8007762:	6025      	str	r5, [r4, #0]
 8007764:	bf18      	it	ne
 8007766:	6059      	strne	r1, [r3, #4]
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	bf08      	it	eq
 800776c:	f8c8 1000 	streq.w	r1, [r8]
 8007770:	5162      	str	r2, [r4, r5]
 8007772:	604b      	str	r3, [r1, #4]
 8007774:	4638      	mov	r0, r7
 8007776:	f104 060b 	add.w	r6, r4, #11
 800777a:	f000 f829 	bl	80077d0 <__malloc_unlock>
 800777e:	f026 0607 	bic.w	r6, r6, #7
 8007782:	1d23      	adds	r3, r4, #4
 8007784:	1af2      	subs	r2, r6, r3
 8007786:	d0ae      	beq.n	80076e6 <_malloc_r+0x22>
 8007788:	1b9b      	subs	r3, r3, r6
 800778a:	50a3      	str	r3, [r4, r2]
 800778c:	e7ab      	b.n	80076e6 <_malloc_r+0x22>
 800778e:	42a3      	cmp	r3, r4
 8007790:	6862      	ldr	r2, [r4, #4]
 8007792:	d1dd      	bne.n	8007750 <_malloc_r+0x8c>
 8007794:	f8c8 2000 	str.w	r2, [r8]
 8007798:	e7ec      	b.n	8007774 <_malloc_r+0xb0>
 800779a:	4623      	mov	r3, r4
 800779c:	6864      	ldr	r4, [r4, #4]
 800779e:	e7ac      	b.n	80076fa <_malloc_r+0x36>
 80077a0:	4634      	mov	r4, r6
 80077a2:	6876      	ldr	r6, [r6, #4]
 80077a4:	e7b4      	b.n	8007710 <_malloc_r+0x4c>
 80077a6:	4613      	mov	r3, r2
 80077a8:	e7cc      	b.n	8007744 <_malloc_r+0x80>
 80077aa:	230c      	movs	r3, #12
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 f80e 	bl	80077d0 <__malloc_unlock>
 80077b4:	e797      	b.n	80076e6 <_malloc_r+0x22>
 80077b6:	6025      	str	r5, [r4, #0]
 80077b8:	e7dc      	b.n	8007774 <_malloc_r+0xb0>
 80077ba:	605b      	str	r3, [r3, #4]
 80077bc:	deff      	udf	#255	; 0xff
 80077be:	bf00      	nop
 80077c0:	200050ac 	.word	0x200050ac

080077c4 <__malloc_lock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__malloc_lock+0x8>)
 80077c6:	f7ff b877 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	200050a8 	.word	0x200050a8

080077d0 <__malloc_unlock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_unlock+0x8>)
 80077d2:	f7ff b872 	b.w	80068ba <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	200050a8 	.word	0x200050a8

080077dc <_Balloc>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	69c6      	ldr	r6, [r0, #28]
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	b976      	cbnz	r6, 8007804 <_Balloc+0x28>
 80077e6:	2010      	movs	r0, #16
 80077e8:	f7ff ff44 	bl	8007674 <malloc>
 80077ec:	4602      	mov	r2, r0
 80077ee:	61e0      	str	r0, [r4, #28]
 80077f0:	b920      	cbnz	r0, 80077fc <_Balloc+0x20>
 80077f2:	4b18      	ldr	r3, [pc, #96]	; (8007854 <_Balloc+0x78>)
 80077f4:	4818      	ldr	r0, [pc, #96]	; (8007858 <_Balloc+0x7c>)
 80077f6:	216b      	movs	r1, #107	; 0x6b
 80077f8:	f001 fd7e 	bl	80092f8 <__assert_func>
 80077fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007800:	6006      	str	r6, [r0, #0]
 8007802:	60c6      	str	r6, [r0, #12]
 8007804:	69e6      	ldr	r6, [r4, #28]
 8007806:	68f3      	ldr	r3, [r6, #12]
 8007808:	b183      	cbz	r3, 800782c <_Balloc+0x50>
 800780a:	69e3      	ldr	r3, [r4, #28]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007812:	b9b8      	cbnz	r0, 8007844 <_Balloc+0x68>
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f605 	lsl.w	r6, r1, r5
 800781a:	1d72      	adds	r2, r6, #5
 800781c:	0092      	lsls	r2, r2, #2
 800781e:	4620      	mov	r0, r4
 8007820:	f001 fd88 	bl	8009334 <_calloc_r>
 8007824:	b160      	cbz	r0, 8007840 <_Balloc+0x64>
 8007826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800782a:	e00e      	b.n	800784a <_Balloc+0x6e>
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	2104      	movs	r1, #4
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fd7f 	bl	8009334 <_calloc_r>
 8007836:	69e3      	ldr	r3, [r4, #28]
 8007838:	60f0      	str	r0, [r6, #12]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e4      	bne.n	800780a <_Balloc+0x2e>
 8007840:	2000      	movs	r0, #0
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	6802      	ldr	r2, [r0, #0]
 8007846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800784a:	2300      	movs	r3, #0
 800784c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007850:	e7f7      	b.n	8007842 <_Balloc+0x66>
 8007852:	bf00      	nop
 8007854:	0800a1be 	.word	0x0800a1be
 8007858:	0800a23e 	.word	0x0800a23e

0800785c <_Bfree>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	69c6      	ldr	r6, [r0, #28]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b976      	cbnz	r6, 8007884 <_Bfree+0x28>
 8007866:	2010      	movs	r0, #16
 8007868:	f7ff ff04 	bl	8007674 <malloc>
 800786c:	4602      	mov	r2, r0
 800786e:	61e8      	str	r0, [r5, #28]
 8007870:	b920      	cbnz	r0, 800787c <_Bfree+0x20>
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <_Bfree+0x3c>)
 8007874:	4809      	ldr	r0, [pc, #36]	; (800789c <_Bfree+0x40>)
 8007876:	218f      	movs	r1, #143	; 0x8f
 8007878:	f001 fd3e 	bl	80092f8 <__assert_func>
 800787c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007880:	6006      	str	r6, [r0, #0]
 8007882:	60c6      	str	r6, [r0, #12]
 8007884:	b13c      	cbz	r4, 8007896 <_Bfree+0x3a>
 8007886:	69eb      	ldr	r3, [r5, #28]
 8007888:	6862      	ldr	r2, [r4, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007890:	6021      	str	r1, [r4, #0]
 8007892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	0800a1be 	.word	0x0800a1be
 800789c:	0800a23e 	.word	0x0800a23e

080078a0 <__multadd>:
 80078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	690d      	ldr	r5, [r1, #16]
 80078a6:	4607      	mov	r7, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	461e      	mov	r6, r3
 80078ac:	f101 0c14 	add.w	ip, r1, #20
 80078b0:	2000      	movs	r0, #0
 80078b2:	f8dc 3000 	ldr.w	r3, [ip]
 80078b6:	b299      	uxth	r1, r3
 80078b8:	fb02 6101 	mla	r1, r2, r1, r6
 80078bc:	0c1e      	lsrs	r6, r3, #16
 80078be:	0c0b      	lsrs	r3, r1, #16
 80078c0:	fb02 3306 	mla	r3, r2, r6, r3
 80078c4:	b289      	uxth	r1, r1
 80078c6:	3001      	adds	r0, #1
 80078c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078cc:	4285      	cmp	r5, r0
 80078ce:	f84c 1b04 	str.w	r1, [ip], #4
 80078d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078d6:	dcec      	bgt.n	80078b2 <__multadd+0x12>
 80078d8:	b30e      	cbz	r6, 800791e <__multadd+0x7e>
 80078da:	68a3      	ldr	r3, [r4, #8]
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc19      	bgt.n	8007914 <__multadd+0x74>
 80078e0:	6861      	ldr	r1, [r4, #4]
 80078e2:	4638      	mov	r0, r7
 80078e4:	3101      	adds	r1, #1
 80078e6:	f7ff ff79 	bl	80077dc <_Balloc>
 80078ea:	4680      	mov	r8, r0
 80078ec:	b928      	cbnz	r0, 80078fa <__multadd+0x5a>
 80078ee:	4602      	mov	r2, r0
 80078f0:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <__multadd+0x84>)
 80078f2:	480d      	ldr	r0, [pc, #52]	; (8007928 <__multadd+0x88>)
 80078f4:	21ba      	movs	r1, #186	; 0xba
 80078f6:	f001 fcff 	bl	80092f8 <__assert_func>
 80078fa:	6922      	ldr	r2, [r4, #16]
 80078fc:	3202      	adds	r2, #2
 80078fe:	f104 010c 	add.w	r1, r4, #12
 8007902:	0092      	lsls	r2, r2, #2
 8007904:	300c      	adds	r0, #12
 8007906:	f7fe ffd9 	bl	80068bc <memcpy>
 800790a:	4621      	mov	r1, r4
 800790c:	4638      	mov	r0, r7
 800790e:	f7ff ffa5 	bl	800785c <_Bfree>
 8007912:	4644      	mov	r4, r8
 8007914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007918:	3501      	adds	r5, #1
 800791a:	615e      	str	r6, [r3, #20]
 800791c:	6125      	str	r5, [r4, #16]
 800791e:	4620      	mov	r0, r4
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	0800a22d 	.word	0x0800a22d
 8007928:	0800a23e 	.word	0x0800a23e

0800792c <__s2b>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	460c      	mov	r4, r1
 8007932:	4615      	mov	r5, r2
 8007934:	461f      	mov	r7, r3
 8007936:	2209      	movs	r2, #9
 8007938:	3308      	adds	r3, #8
 800793a:	4606      	mov	r6, r0
 800793c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007940:	2100      	movs	r1, #0
 8007942:	2201      	movs	r2, #1
 8007944:	429a      	cmp	r2, r3
 8007946:	db09      	blt.n	800795c <__s2b+0x30>
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff ff47 	bl	80077dc <_Balloc>
 800794e:	b940      	cbnz	r0, 8007962 <__s2b+0x36>
 8007950:	4602      	mov	r2, r0
 8007952:	4b19      	ldr	r3, [pc, #100]	; (80079b8 <__s2b+0x8c>)
 8007954:	4819      	ldr	r0, [pc, #100]	; (80079bc <__s2b+0x90>)
 8007956:	21d3      	movs	r1, #211	; 0xd3
 8007958:	f001 fcce 	bl	80092f8 <__assert_func>
 800795c:	0052      	lsls	r2, r2, #1
 800795e:	3101      	adds	r1, #1
 8007960:	e7f0      	b.n	8007944 <__s2b+0x18>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	6143      	str	r3, [r0, #20]
 8007966:	2d09      	cmp	r5, #9
 8007968:	f04f 0301 	mov.w	r3, #1
 800796c:	6103      	str	r3, [r0, #16]
 800796e:	dd16      	ble.n	800799e <__s2b+0x72>
 8007970:	f104 0909 	add.w	r9, r4, #9
 8007974:	46c8      	mov	r8, r9
 8007976:	442c      	add	r4, r5
 8007978:	f818 3b01 	ldrb.w	r3, [r8], #1
 800797c:	4601      	mov	r1, r0
 800797e:	3b30      	subs	r3, #48	; 0x30
 8007980:	220a      	movs	r2, #10
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ff8c 	bl	80078a0 <__multadd>
 8007988:	45a0      	cmp	r8, r4
 800798a:	d1f5      	bne.n	8007978 <__s2b+0x4c>
 800798c:	f1a5 0408 	sub.w	r4, r5, #8
 8007990:	444c      	add	r4, r9
 8007992:	1b2d      	subs	r5, r5, r4
 8007994:	1963      	adds	r3, r4, r5
 8007996:	42bb      	cmp	r3, r7
 8007998:	db04      	blt.n	80079a4 <__s2b+0x78>
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	340a      	adds	r4, #10
 80079a0:	2509      	movs	r5, #9
 80079a2:	e7f6      	b.n	8007992 <__s2b+0x66>
 80079a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079a8:	4601      	mov	r1, r0
 80079aa:	3b30      	subs	r3, #48	; 0x30
 80079ac:	220a      	movs	r2, #10
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ff76 	bl	80078a0 <__multadd>
 80079b4:	e7ee      	b.n	8007994 <__s2b+0x68>
 80079b6:	bf00      	nop
 80079b8:	0800a22d 	.word	0x0800a22d
 80079bc:	0800a23e 	.word	0x0800a23e

080079c0 <__hi0bits>:
 80079c0:	0c03      	lsrs	r3, r0, #16
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	b9d3      	cbnz	r3, 80079fc <__hi0bits+0x3c>
 80079c6:	0400      	lsls	r0, r0, #16
 80079c8:	2310      	movs	r3, #16
 80079ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ce:	bf04      	itt	eq
 80079d0:	0200      	lsleq	r0, r0, #8
 80079d2:	3308      	addeq	r3, #8
 80079d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079d8:	bf04      	itt	eq
 80079da:	0100      	lsleq	r0, r0, #4
 80079dc:	3304      	addeq	r3, #4
 80079de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079e2:	bf04      	itt	eq
 80079e4:	0080      	lsleq	r0, r0, #2
 80079e6:	3302      	addeq	r3, #2
 80079e8:	2800      	cmp	r0, #0
 80079ea:	db05      	blt.n	80079f8 <__hi0bits+0x38>
 80079ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079f0:	f103 0301 	add.w	r3, r3, #1
 80079f4:	bf08      	it	eq
 80079f6:	2320      	moveq	r3, #32
 80079f8:	4618      	mov	r0, r3
 80079fa:	4770      	bx	lr
 80079fc:	2300      	movs	r3, #0
 80079fe:	e7e4      	b.n	80079ca <__hi0bits+0xa>

08007a00 <__lo0bits>:
 8007a00:	6803      	ldr	r3, [r0, #0]
 8007a02:	f013 0207 	ands.w	r2, r3, #7
 8007a06:	d00c      	beq.n	8007a22 <__lo0bits+0x22>
 8007a08:	07d9      	lsls	r1, r3, #31
 8007a0a:	d422      	bmi.n	8007a52 <__lo0bits+0x52>
 8007a0c:	079a      	lsls	r2, r3, #30
 8007a0e:	bf49      	itett	mi
 8007a10:	085b      	lsrmi	r3, r3, #1
 8007a12:	089b      	lsrpl	r3, r3, #2
 8007a14:	6003      	strmi	r3, [r0, #0]
 8007a16:	2201      	movmi	r2, #1
 8007a18:	bf5c      	itt	pl
 8007a1a:	6003      	strpl	r3, [r0, #0]
 8007a1c:	2202      	movpl	r2, #2
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4770      	bx	lr
 8007a22:	b299      	uxth	r1, r3
 8007a24:	b909      	cbnz	r1, 8007a2a <__lo0bits+0x2a>
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	2210      	movs	r2, #16
 8007a2a:	b2d9      	uxtb	r1, r3
 8007a2c:	b909      	cbnz	r1, 8007a32 <__lo0bits+0x32>
 8007a2e:	3208      	adds	r2, #8
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	0719      	lsls	r1, r3, #28
 8007a34:	bf04      	itt	eq
 8007a36:	091b      	lsreq	r3, r3, #4
 8007a38:	3204      	addeq	r2, #4
 8007a3a:	0799      	lsls	r1, r3, #30
 8007a3c:	bf04      	itt	eq
 8007a3e:	089b      	lsreq	r3, r3, #2
 8007a40:	3202      	addeq	r2, #2
 8007a42:	07d9      	lsls	r1, r3, #31
 8007a44:	d403      	bmi.n	8007a4e <__lo0bits+0x4e>
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f102 0201 	add.w	r2, r2, #1
 8007a4c:	d003      	beq.n	8007a56 <__lo0bits+0x56>
 8007a4e:	6003      	str	r3, [r0, #0]
 8007a50:	e7e5      	b.n	8007a1e <__lo0bits+0x1e>
 8007a52:	2200      	movs	r2, #0
 8007a54:	e7e3      	b.n	8007a1e <__lo0bits+0x1e>
 8007a56:	2220      	movs	r2, #32
 8007a58:	e7e1      	b.n	8007a1e <__lo0bits+0x1e>
	...

08007a5c <__i2b>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	2101      	movs	r1, #1
 8007a62:	f7ff febb 	bl	80077dc <_Balloc>
 8007a66:	4602      	mov	r2, r0
 8007a68:	b928      	cbnz	r0, 8007a76 <__i2b+0x1a>
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <__i2b+0x24>)
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <__i2b+0x28>)
 8007a6e:	f240 1145 	movw	r1, #325	; 0x145
 8007a72:	f001 fc41 	bl	80092f8 <__assert_func>
 8007a76:	2301      	movs	r3, #1
 8007a78:	6144      	str	r4, [r0, #20]
 8007a7a:	6103      	str	r3, [r0, #16]
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800a22d 	.word	0x0800a22d
 8007a84:	0800a23e 	.word	0x0800a23e

08007a88 <__multiply>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	4691      	mov	r9, r2
 8007a8e:	690a      	ldr	r2, [r1, #16]
 8007a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	bfb8      	it	lt
 8007a98:	460b      	movlt	r3, r1
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	bfbc      	itt	lt
 8007a9e:	464c      	movlt	r4, r9
 8007aa0:	4699      	movlt	r9, r3
 8007aa2:	6927      	ldr	r7, [r4, #16]
 8007aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007aa8:	68a3      	ldr	r3, [r4, #8]
 8007aaa:	6861      	ldr	r1, [r4, #4]
 8007aac:	eb07 060a 	add.w	r6, r7, sl
 8007ab0:	42b3      	cmp	r3, r6
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	bfb8      	it	lt
 8007ab6:	3101      	addlt	r1, #1
 8007ab8:	f7ff fe90 	bl	80077dc <_Balloc>
 8007abc:	b930      	cbnz	r0, 8007acc <__multiply+0x44>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4b44      	ldr	r3, [pc, #272]	; (8007bd4 <__multiply+0x14c>)
 8007ac2:	4845      	ldr	r0, [pc, #276]	; (8007bd8 <__multiply+0x150>)
 8007ac4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ac8:	f001 fc16 	bl	80092f8 <__assert_func>
 8007acc:	f100 0514 	add.w	r5, r0, #20
 8007ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4543      	cmp	r3, r8
 8007ada:	d321      	bcc.n	8007b20 <__multiply+0x98>
 8007adc:	f104 0314 	add.w	r3, r4, #20
 8007ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ae4:	f109 0314 	add.w	r3, r9, #20
 8007ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007aec:	9202      	str	r2, [sp, #8]
 8007aee:	1b3a      	subs	r2, r7, r4
 8007af0:	3a15      	subs	r2, #21
 8007af2:	f022 0203 	bic.w	r2, r2, #3
 8007af6:	3204      	adds	r2, #4
 8007af8:	f104 0115 	add.w	r1, r4, #21
 8007afc:	428f      	cmp	r7, r1
 8007afe:	bf38      	it	cc
 8007b00:	2204      	movcc	r2, #4
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	9a02      	ldr	r2, [sp, #8]
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d80c      	bhi.n	8007b26 <__multiply+0x9e>
 8007b0c:	2e00      	cmp	r6, #0
 8007b0e:	dd03      	ble.n	8007b18 <__multiply+0x90>
 8007b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05b      	beq.n	8007bd0 <__multiply+0x148>
 8007b18:	6106      	str	r6, [r0, #16]
 8007b1a:	b005      	add	sp, #20
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	f843 2b04 	str.w	r2, [r3], #4
 8007b24:	e7d8      	b.n	8007ad8 <__multiply+0x50>
 8007b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b2a:	f1ba 0f00 	cmp.w	sl, #0
 8007b2e:	d024      	beq.n	8007b7a <__multiply+0xf2>
 8007b30:	f104 0e14 	add.w	lr, r4, #20
 8007b34:	46a9      	mov	r9, r5
 8007b36:	f04f 0c00 	mov.w	ip, #0
 8007b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b42:	fa1f fb82 	uxth.w	fp, r2
 8007b46:	b289      	uxth	r1, r1
 8007b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b50:	f8d9 2000 	ldr.w	r2, [r9]
 8007b54:	4461      	add	r1, ip
 8007b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b62:	b289      	uxth	r1, r1
 8007b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b68:	4577      	cmp	r7, lr
 8007b6a:	f849 1b04 	str.w	r1, [r9], #4
 8007b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b72:	d8e2      	bhi.n	8007b3a <__multiply+0xb2>
 8007b74:	9a01      	ldr	r2, [sp, #4]
 8007b76:	f845 c002 	str.w	ip, [r5, r2]
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b80:	3304      	adds	r3, #4
 8007b82:	f1b9 0f00 	cmp.w	r9, #0
 8007b86:	d021      	beq.n	8007bcc <__multiply+0x144>
 8007b88:	6829      	ldr	r1, [r5, #0]
 8007b8a:	f104 0c14 	add.w	ip, r4, #20
 8007b8e:	46ae      	mov	lr, r5
 8007b90:	f04f 0a00 	mov.w	sl, #0
 8007b94:	f8bc b000 	ldrh.w	fp, [ip]
 8007b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8007ba0:	4452      	add	r2, sl
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bb4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bb8:	fb09 110a 	mla	r1, r9, sl, r1
 8007bbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007bc0:	4567      	cmp	r7, ip
 8007bc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bc6:	d8e5      	bhi.n	8007b94 <__multiply+0x10c>
 8007bc8:	9a01      	ldr	r2, [sp, #4]
 8007bca:	50a9      	str	r1, [r5, r2]
 8007bcc:	3504      	adds	r5, #4
 8007bce:	e799      	b.n	8007b04 <__multiply+0x7c>
 8007bd0:	3e01      	subs	r6, #1
 8007bd2:	e79b      	b.n	8007b0c <__multiply+0x84>
 8007bd4:	0800a22d 	.word	0x0800a22d
 8007bd8:	0800a23e 	.word	0x0800a23e

08007bdc <__pow5mult>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	4615      	mov	r5, r2
 8007be2:	f012 0203 	ands.w	r2, r2, #3
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	d007      	beq.n	8007bfc <__pow5mult+0x20>
 8007bec:	4c25      	ldr	r4, [pc, #148]	; (8007c84 <__pow5mult+0xa8>)
 8007bee:	3a01      	subs	r2, #1
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bf6:	f7ff fe53 	bl	80078a0 <__multadd>
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	10ad      	asrs	r5, r5, #2
 8007bfe:	d03d      	beq.n	8007c7c <__pow5mult+0xa0>
 8007c00:	69f4      	ldr	r4, [r6, #28]
 8007c02:	b97c      	cbnz	r4, 8007c24 <__pow5mult+0x48>
 8007c04:	2010      	movs	r0, #16
 8007c06:	f7ff fd35 	bl	8007674 <malloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	61f0      	str	r0, [r6, #28]
 8007c0e:	b928      	cbnz	r0, 8007c1c <__pow5mult+0x40>
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <__pow5mult+0xac>)
 8007c12:	481e      	ldr	r0, [pc, #120]	; (8007c8c <__pow5mult+0xb0>)
 8007c14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c18:	f001 fb6e 	bl	80092f8 <__assert_func>
 8007c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c20:	6004      	str	r4, [r0, #0]
 8007c22:	60c4      	str	r4, [r0, #12]
 8007c24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c2c:	b94c      	cbnz	r4, 8007c42 <__pow5mult+0x66>
 8007c2e:	f240 2171 	movw	r1, #625	; 0x271
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff12 	bl	8007a5c <__i2b>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c3e:	4604      	mov	r4, r0
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	f04f 0900 	mov.w	r9, #0
 8007c46:	07eb      	lsls	r3, r5, #31
 8007c48:	d50a      	bpl.n	8007c60 <__pow5mult+0x84>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ff1a 	bl	8007a88 <__multiply>
 8007c54:	4639      	mov	r1, r7
 8007c56:	4680      	mov	r8, r0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff fdff 	bl	800785c <_Bfree>
 8007c5e:	4647      	mov	r7, r8
 8007c60:	106d      	asrs	r5, r5, #1
 8007c62:	d00b      	beq.n	8007c7c <__pow5mult+0xa0>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	b938      	cbnz	r0, 8007c78 <__pow5mult+0x9c>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff ff0b 	bl	8007a88 <__multiply>
 8007c72:	6020      	str	r0, [r4, #0]
 8007c74:	f8c0 9000 	str.w	r9, [r0]
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e7e4      	b.n	8007c46 <__pow5mult+0x6a>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c82:	bf00      	nop
 8007c84:	0800a388 	.word	0x0800a388
 8007c88:	0800a1be 	.word	0x0800a1be
 8007c8c:	0800a23e 	.word	0x0800a23e

08007c90 <__lshift>:
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	6849      	ldr	r1, [r1, #4]
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	4691      	mov	r9, r2
 8007ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ca8:	f108 0601 	add.w	r6, r8, #1
 8007cac:	42b3      	cmp	r3, r6
 8007cae:	db0b      	blt.n	8007cc8 <__lshift+0x38>
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff fd93 	bl	80077dc <_Balloc>
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	b948      	cbnz	r0, 8007cce <__lshift+0x3e>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b28      	ldr	r3, [pc, #160]	; (8007d60 <__lshift+0xd0>)
 8007cbe:	4829      	ldr	r0, [pc, #164]	; (8007d64 <__lshift+0xd4>)
 8007cc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007cc4:	f001 fb18 	bl	80092f8 <__assert_func>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	e7ee      	b.n	8007cac <__lshift+0x1c>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f100 0114 	add.w	r1, r0, #20
 8007cd4:	f100 0210 	add.w	r2, r0, #16
 8007cd8:	4618      	mov	r0, r3
 8007cda:	4553      	cmp	r3, sl
 8007cdc:	db33      	blt.n	8007d46 <__lshift+0xb6>
 8007cde:	6920      	ldr	r0, [r4, #16]
 8007ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ce4:	f104 0314 	add.w	r3, r4, #20
 8007ce8:	f019 091f 	ands.w	r9, r9, #31
 8007cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cf4:	d02b      	beq.n	8007d4e <__lshift+0xbe>
 8007cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cfa:	468a      	mov	sl, r1
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	fa00 f009 	lsl.w	r0, r0, r9
 8007d04:	4310      	orrs	r0, r2
 8007d06:	f84a 0b04 	str.w	r0, [sl], #4
 8007d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d0e:	459c      	cmp	ip, r3
 8007d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d14:	d8f3      	bhi.n	8007cfe <__lshift+0x6e>
 8007d16:	ebac 0304 	sub.w	r3, ip, r4
 8007d1a:	3b15      	subs	r3, #21
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	3304      	adds	r3, #4
 8007d22:	f104 0015 	add.w	r0, r4, #21
 8007d26:	4584      	cmp	ip, r0
 8007d28:	bf38      	it	cc
 8007d2a:	2304      	movcc	r3, #4
 8007d2c:	50ca      	str	r2, [r1, r3]
 8007d2e:	b10a      	cbz	r2, 8007d34 <__lshift+0xa4>
 8007d30:	f108 0602 	add.w	r6, r8, #2
 8007d34:	3e01      	subs	r6, #1
 8007d36:	4638      	mov	r0, r7
 8007d38:	612e      	str	r6, [r5, #16]
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	f7ff fd8e 	bl	800785c <_Bfree>
 8007d40:	4628      	mov	r0, r5
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	e7c5      	b.n	8007cda <__lshift+0x4a>
 8007d4e:	3904      	subs	r1, #4
 8007d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d54:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d58:	459c      	cmp	ip, r3
 8007d5a:	d8f9      	bhi.n	8007d50 <__lshift+0xc0>
 8007d5c:	e7ea      	b.n	8007d34 <__lshift+0xa4>
 8007d5e:	bf00      	nop
 8007d60:	0800a22d 	.word	0x0800a22d
 8007d64:	0800a23e 	.word	0x0800a23e

08007d68 <__mcmp>:
 8007d68:	b530      	push	{r4, r5, lr}
 8007d6a:	6902      	ldr	r2, [r0, #16]
 8007d6c:	690c      	ldr	r4, [r1, #16]
 8007d6e:	1b12      	subs	r2, r2, r4
 8007d70:	d10e      	bne.n	8007d90 <__mcmp+0x28>
 8007d72:	f100 0314 	add.w	r3, r0, #20
 8007d76:	3114      	adds	r1, #20
 8007d78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d88:	42a5      	cmp	r5, r4
 8007d8a:	d003      	beq.n	8007d94 <__mcmp+0x2c>
 8007d8c:	d305      	bcc.n	8007d9a <__mcmp+0x32>
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4610      	mov	r0, r2
 8007d92:	bd30      	pop	{r4, r5, pc}
 8007d94:	4283      	cmp	r3, r0
 8007d96:	d3f3      	bcc.n	8007d80 <__mcmp+0x18>
 8007d98:	e7fa      	b.n	8007d90 <__mcmp+0x28>
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	e7f7      	b.n	8007d90 <__mcmp+0x28>

08007da0 <__mdiff>:
 8007da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	460c      	mov	r4, r1
 8007da6:	4606      	mov	r6, r0
 8007da8:	4611      	mov	r1, r2
 8007daa:	4620      	mov	r0, r4
 8007dac:	4690      	mov	r8, r2
 8007dae:	f7ff ffdb 	bl	8007d68 <__mcmp>
 8007db2:	1e05      	subs	r5, r0, #0
 8007db4:	d110      	bne.n	8007dd8 <__mdiff+0x38>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff fd0f 	bl	80077dc <_Balloc>
 8007dbe:	b930      	cbnz	r0, 8007dce <__mdiff+0x2e>
 8007dc0:	4b3a      	ldr	r3, [pc, #232]	; (8007eac <__mdiff+0x10c>)
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	f240 2137 	movw	r1, #567	; 0x237
 8007dc8:	4839      	ldr	r0, [pc, #228]	; (8007eb0 <__mdiff+0x110>)
 8007dca:	f001 fa95 	bl	80092f8 <__assert_func>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd8:	bfa4      	itt	ge
 8007dda:	4643      	movge	r3, r8
 8007ddc:	46a0      	movge	r8, r4
 8007dde:	4630      	mov	r0, r6
 8007de0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007de4:	bfa6      	itte	ge
 8007de6:	461c      	movge	r4, r3
 8007de8:	2500      	movge	r5, #0
 8007dea:	2501      	movlt	r5, #1
 8007dec:	f7ff fcf6 	bl	80077dc <_Balloc>
 8007df0:	b920      	cbnz	r0, 8007dfc <__mdiff+0x5c>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__mdiff+0x10c>)
 8007df4:	4602      	mov	r2, r0
 8007df6:	f240 2145 	movw	r1, #581	; 0x245
 8007dfa:	e7e5      	b.n	8007dc8 <__mdiff+0x28>
 8007dfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e00:	6926      	ldr	r6, [r4, #16]
 8007e02:	60c5      	str	r5, [r0, #12]
 8007e04:	f104 0914 	add.w	r9, r4, #20
 8007e08:	f108 0514 	add.w	r5, r8, #20
 8007e0c:	f100 0e14 	add.w	lr, r0, #20
 8007e10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e18:	f108 0210 	add.w	r2, r8, #16
 8007e1c:	46f2      	mov	sl, lr
 8007e1e:	2100      	movs	r1, #0
 8007e20:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e28:	fa11 f88b 	uxtah	r8, r1, fp
 8007e2c:	b299      	uxth	r1, r3
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	eba8 0801 	sub.w	r8, r8, r1
 8007e34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e3c:	fa1f f888 	uxth.w	r8, r8
 8007e40:	1419      	asrs	r1, r3, #16
 8007e42:	454e      	cmp	r6, r9
 8007e44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e48:	f84a 3b04 	str.w	r3, [sl], #4
 8007e4c:	d8e8      	bhi.n	8007e20 <__mdiff+0x80>
 8007e4e:	1b33      	subs	r3, r6, r4
 8007e50:	3b15      	subs	r3, #21
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	3304      	adds	r3, #4
 8007e58:	3415      	adds	r4, #21
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	bf38      	it	cc
 8007e5e:	2304      	movcc	r3, #4
 8007e60:	441d      	add	r5, r3
 8007e62:	4473      	add	r3, lr
 8007e64:	469e      	mov	lr, r3
 8007e66:	462e      	mov	r6, r5
 8007e68:	4566      	cmp	r6, ip
 8007e6a:	d30e      	bcc.n	8007e8a <__mdiff+0xea>
 8007e6c:	f10c 0203 	add.w	r2, ip, #3
 8007e70:	1b52      	subs	r2, r2, r5
 8007e72:	f022 0203 	bic.w	r2, r2, #3
 8007e76:	3d03      	subs	r5, #3
 8007e78:	45ac      	cmp	ip, r5
 8007e7a:	bf38      	it	cc
 8007e7c:	2200      	movcc	r2, #0
 8007e7e:	4413      	add	r3, r2
 8007e80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e84:	b17a      	cbz	r2, 8007ea6 <__mdiff+0x106>
 8007e86:	6107      	str	r7, [r0, #16]
 8007e88:	e7a4      	b.n	8007dd4 <__mdiff+0x34>
 8007e8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e8e:	fa11 f288 	uxtah	r2, r1, r8
 8007e92:	1414      	asrs	r4, r2, #16
 8007e94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e9e:	f84e 2b04 	str.w	r2, [lr], #4
 8007ea2:	1421      	asrs	r1, r4, #16
 8007ea4:	e7e0      	b.n	8007e68 <__mdiff+0xc8>
 8007ea6:	3f01      	subs	r7, #1
 8007ea8:	e7ea      	b.n	8007e80 <__mdiff+0xe0>
 8007eaa:	bf00      	nop
 8007eac:	0800a22d 	.word	0x0800a22d
 8007eb0:	0800a23e 	.word	0x0800a23e

08007eb4 <__ulp>:
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	ed8d 0b00 	vstr	d0, [sp]
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <__ulp+0x48>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dc08      	bgt.n	8007eda <__ulp+0x26>
 8007ec8:	425b      	negs	r3, r3
 8007eca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007ece:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ed2:	da04      	bge.n	8007ede <__ulp+0x2a>
 8007ed4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ed8:	4113      	asrs	r3, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	e008      	b.n	8007ef0 <__ulp+0x3c>
 8007ede:	f1a2 0314 	sub.w	r3, r2, #20
 8007ee2:	2b1e      	cmp	r3, #30
 8007ee4:	bfda      	itte	le
 8007ee6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007eea:	40da      	lsrle	r2, r3
 8007eec:	2201      	movgt	r2, #1
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	ec41 0b10 	vmov	d0, r0, r1
 8007ef8:	b002      	add	sp, #8
 8007efa:	4770      	bx	lr
 8007efc:	7ff00000 	.word	0x7ff00000

08007f00 <__b2d>:
 8007f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	6906      	ldr	r6, [r0, #16]
 8007f06:	f100 0814 	add.w	r8, r0, #20
 8007f0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f0e:	1f37      	subs	r7, r6, #4
 8007f10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff fd53 	bl	80079c0 <__hi0bits>
 8007f1a:	f1c0 0320 	rsb	r3, r0, #32
 8007f1e:	280a      	cmp	r0, #10
 8007f20:	600b      	str	r3, [r1, #0]
 8007f22:	491b      	ldr	r1, [pc, #108]	; (8007f90 <__b2d+0x90>)
 8007f24:	dc15      	bgt.n	8007f52 <__b2d+0x52>
 8007f26:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f2e:	45b8      	cmp	r8, r7
 8007f30:	ea43 0501 	orr.w	r5, r3, r1
 8007f34:	bf34      	ite	cc
 8007f36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f3a:	2300      	movcs	r3, #0
 8007f3c:	3015      	adds	r0, #21
 8007f3e:	fa02 f000 	lsl.w	r0, r2, r0
 8007f42:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f46:	4303      	orrs	r3, r0
 8007f48:	461c      	mov	r4, r3
 8007f4a:	ec45 4b10 	vmov	d0, r4, r5
 8007f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f52:	45b8      	cmp	r8, r7
 8007f54:	bf3a      	itte	cc
 8007f56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f5e:	2300      	movcs	r3, #0
 8007f60:	380b      	subs	r0, #11
 8007f62:	d012      	beq.n	8007f8a <__b2d+0x8a>
 8007f64:	f1c0 0120 	rsb	r1, r0, #32
 8007f68:	fa23 f401 	lsr.w	r4, r3, r1
 8007f6c:	4082      	lsls	r2, r0
 8007f6e:	4322      	orrs	r2, r4
 8007f70:	4547      	cmp	r7, r8
 8007f72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007f76:	bf8c      	ite	hi
 8007f78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f7c:	2200      	movls	r2, #0
 8007f7e:	4083      	lsls	r3, r0
 8007f80:	40ca      	lsrs	r2, r1
 8007f82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f86:	4313      	orrs	r3, r2
 8007f88:	e7de      	b.n	8007f48 <__b2d+0x48>
 8007f8a:	ea42 0501 	orr.w	r5, r2, r1
 8007f8e:	e7db      	b.n	8007f48 <__b2d+0x48>
 8007f90:	3ff00000 	.word	0x3ff00000

08007f94 <__d2b>:
 8007f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	460f      	mov	r7, r1
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	ec59 8b10 	vmov	r8, r9, d0
 8007fa0:	4616      	mov	r6, r2
 8007fa2:	f7ff fc1b 	bl	80077dc <_Balloc>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	b930      	cbnz	r0, 8007fb8 <__d2b+0x24>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b24      	ldr	r3, [pc, #144]	; (8008040 <__d2b+0xac>)
 8007fae:	4825      	ldr	r0, [pc, #148]	; (8008044 <__d2b+0xb0>)
 8007fb0:	f240 310f 	movw	r1, #783	; 0x30f
 8007fb4:	f001 f9a0 	bl	80092f8 <__assert_func>
 8007fb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fc0:	bb2d      	cbnz	r5, 800800e <__d2b+0x7a>
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	f1b8 0300 	subs.w	r3, r8, #0
 8007fc8:	d026      	beq.n	8008018 <__d2b+0x84>
 8007fca:	4668      	mov	r0, sp
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	f7ff fd17 	bl	8007a00 <__lo0bits>
 8007fd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fd6:	b1e8      	cbz	r0, 8008014 <__d2b+0x80>
 8007fd8:	f1c0 0320 	rsb	r3, r0, #32
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	40c2      	lsrs	r2, r0
 8007fe4:	6163      	str	r3, [r4, #20]
 8007fe6:	9201      	str	r2, [sp, #4]
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	61a3      	str	r3, [r4, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bf14      	ite	ne
 8007ff0:	2202      	movne	r2, #2
 8007ff2:	2201      	moveq	r2, #1
 8007ff4:	6122      	str	r2, [r4, #16]
 8007ff6:	b1bd      	cbz	r5, 8008028 <__d2b+0x94>
 8007ff8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ffc:	4405      	add	r5, r0
 8007ffe:	603d      	str	r5, [r7, #0]
 8008000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008004:	6030      	str	r0, [r6, #0]
 8008006:	4620      	mov	r0, r4
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800800e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008012:	e7d6      	b.n	8007fc2 <__d2b+0x2e>
 8008014:	6161      	str	r1, [r4, #20]
 8008016:	e7e7      	b.n	8007fe8 <__d2b+0x54>
 8008018:	a801      	add	r0, sp, #4
 800801a:	f7ff fcf1 	bl	8007a00 <__lo0bits>
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	6163      	str	r3, [r4, #20]
 8008022:	3020      	adds	r0, #32
 8008024:	2201      	movs	r2, #1
 8008026:	e7e5      	b.n	8007ff4 <__d2b+0x60>
 8008028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800802c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008030:	6038      	str	r0, [r7, #0]
 8008032:	6918      	ldr	r0, [r3, #16]
 8008034:	f7ff fcc4 	bl	80079c0 <__hi0bits>
 8008038:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800803c:	e7e2      	b.n	8008004 <__d2b+0x70>
 800803e:	bf00      	nop
 8008040:	0800a22d 	.word	0x0800a22d
 8008044:	0800a23e 	.word	0x0800a23e

08008048 <__ratio>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4688      	mov	r8, r1
 800804e:	4669      	mov	r1, sp
 8008050:	4681      	mov	r9, r0
 8008052:	f7ff ff55 	bl	8007f00 <__b2d>
 8008056:	a901      	add	r1, sp, #4
 8008058:	4640      	mov	r0, r8
 800805a:	ec55 4b10 	vmov	r4, r5, d0
 800805e:	f7ff ff4f 	bl	8007f00 <__b2d>
 8008062:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008066:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800806a:	eba3 0c02 	sub.w	ip, r3, r2
 800806e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008078:	ec51 0b10 	vmov	r0, r1, d0
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfd6      	itet	le
 8008080:	460a      	movle	r2, r1
 8008082:	462a      	movgt	r2, r5
 8008084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008088:	468b      	mov	fp, r1
 800808a:	462f      	mov	r7, r5
 800808c:	bfd4      	ite	le
 800808e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008092:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008096:	4620      	mov	r0, r4
 8008098:	ee10 2a10 	vmov	r2, s0
 800809c:	465b      	mov	r3, fp
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fbdc 	bl	800085c <__aeabi_ddiv>
 80080a4:	ec41 0b10 	vmov	d0, r0, r1
 80080a8:	b003      	add	sp, #12
 80080aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080ae <__copybits>:
 80080ae:	3901      	subs	r1, #1
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	1149      	asrs	r1, r1, #5
 80080b4:	6914      	ldr	r4, [r2, #16]
 80080b6:	3101      	adds	r1, #1
 80080b8:	f102 0314 	add.w	r3, r2, #20
 80080bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080c4:	1f05      	subs	r5, r0, #4
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	d30c      	bcc.n	80080e4 <__copybits+0x36>
 80080ca:	1aa3      	subs	r3, r4, r2
 80080cc:	3b11      	subs	r3, #17
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	3211      	adds	r2, #17
 80080d4:	42a2      	cmp	r2, r4
 80080d6:	bf88      	it	hi
 80080d8:	2300      	movhi	r3, #0
 80080da:	4418      	add	r0, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	4288      	cmp	r0, r1
 80080e0:	d305      	bcc.n	80080ee <__copybits+0x40>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80080e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80080ec:	e7eb      	b.n	80080c6 <__copybits+0x18>
 80080ee:	f840 3b04 	str.w	r3, [r0], #4
 80080f2:	e7f4      	b.n	80080de <__copybits+0x30>

080080f4 <__any_on>:
 80080f4:	f100 0214 	add.w	r2, r0, #20
 80080f8:	6900      	ldr	r0, [r0, #16]
 80080fa:	114b      	asrs	r3, r1, #5
 80080fc:	4298      	cmp	r0, r3
 80080fe:	b510      	push	{r4, lr}
 8008100:	db11      	blt.n	8008126 <__any_on+0x32>
 8008102:	dd0a      	ble.n	800811a <__any_on+0x26>
 8008104:	f011 011f 	ands.w	r1, r1, #31
 8008108:	d007      	beq.n	800811a <__any_on+0x26>
 800810a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800810e:	fa24 f001 	lsr.w	r0, r4, r1
 8008112:	fa00 f101 	lsl.w	r1, r0, r1
 8008116:	428c      	cmp	r4, r1
 8008118:	d10b      	bne.n	8008132 <__any_on+0x3e>
 800811a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800811e:	4293      	cmp	r3, r2
 8008120:	d803      	bhi.n	800812a <__any_on+0x36>
 8008122:	2000      	movs	r0, #0
 8008124:	bd10      	pop	{r4, pc}
 8008126:	4603      	mov	r3, r0
 8008128:	e7f7      	b.n	800811a <__any_on+0x26>
 800812a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800812e:	2900      	cmp	r1, #0
 8008130:	d0f5      	beq.n	800811e <__any_on+0x2a>
 8008132:	2001      	movs	r0, #1
 8008134:	e7f6      	b.n	8008124 <__any_on+0x30>

08008136 <sulp>:
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	ec45 4b10 	vmov	d0, r4, r5
 8008140:	4616      	mov	r6, r2
 8008142:	f7ff feb7 	bl	8007eb4 <__ulp>
 8008146:	ec51 0b10 	vmov	r0, r1, d0
 800814a:	b17e      	cbz	r6, 800816c <sulp+0x36>
 800814c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd09      	ble.n	800816c <sulp+0x36>
 8008158:	051b      	lsls	r3, r3, #20
 800815a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800815e:	2400      	movs	r4, #0
 8008160:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	f7f8 fa4e 	bl	8000608 <__aeabi_dmul>
 800816c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008170 <_strtod_l>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	ed2d 8b02 	vpush	{d8}
 8008178:	b09b      	sub	sp, #108	; 0x6c
 800817a:	4604      	mov	r4, r0
 800817c:	9213      	str	r2, [sp, #76]	; 0x4c
 800817e:	2200      	movs	r2, #0
 8008180:	9216      	str	r2, [sp, #88]	; 0x58
 8008182:	460d      	mov	r5, r1
 8008184:	f04f 0800 	mov.w	r8, #0
 8008188:	f04f 0900 	mov.w	r9, #0
 800818c:	460a      	mov	r2, r1
 800818e:	9215      	str	r2, [sp, #84]	; 0x54
 8008190:	7811      	ldrb	r1, [r2, #0]
 8008192:	292b      	cmp	r1, #43	; 0x2b
 8008194:	d04c      	beq.n	8008230 <_strtod_l+0xc0>
 8008196:	d83a      	bhi.n	800820e <_strtod_l+0x9e>
 8008198:	290d      	cmp	r1, #13
 800819a:	d834      	bhi.n	8008206 <_strtod_l+0x96>
 800819c:	2908      	cmp	r1, #8
 800819e:	d834      	bhi.n	800820a <_strtod_l+0x9a>
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d03d      	beq.n	8008220 <_strtod_l+0xb0>
 80081a4:	2200      	movs	r2, #0
 80081a6:	920a      	str	r2, [sp, #40]	; 0x28
 80081a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80081aa:	7832      	ldrb	r2, [r6, #0]
 80081ac:	2a30      	cmp	r2, #48	; 0x30
 80081ae:	f040 80b4 	bne.w	800831a <_strtod_l+0x1aa>
 80081b2:	7872      	ldrb	r2, [r6, #1]
 80081b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80081b8:	2a58      	cmp	r2, #88	; 0x58
 80081ba:	d170      	bne.n	800829e <_strtod_l+0x12e>
 80081bc:	9302      	str	r3, [sp, #8]
 80081be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	ab16      	add	r3, sp, #88	; 0x58
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4a8e      	ldr	r2, [pc, #568]	; (8008400 <_strtod_l+0x290>)
 80081c8:	ab17      	add	r3, sp, #92	; 0x5c
 80081ca:	a915      	add	r1, sp, #84	; 0x54
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 f92f 	bl	8009430 <__gethex>
 80081d2:	f010 070f 	ands.w	r7, r0, #15
 80081d6:	4605      	mov	r5, r0
 80081d8:	d005      	beq.n	80081e6 <_strtod_l+0x76>
 80081da:	2f06      	cmp	r7, #6
 80081dc:	d12a      	bne.n	8008234 <_strtod_l+0xc4>
 80081de:	3601      	adds	r6, #1
 80081e0:	2300      	movs	r3, #0
 80081e2:	9615      	str	r6, [sp, #84]	; 0x54
 80081e4:	930a      	str	r3, [sp, #40]	; 0x28
 80081e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 857f 	bne.w	8008cec <_strtod_l+0xb7c>
 80081ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f0:	b1db      	cbz	r3, 800822a <_strtod_l+0xba>
 80081f2:	4642      	mov	r2, r8
 80081f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081f8:	ec43 2b10 	vmov	d0, r2, r3
 80081fc:	b01b      	add	sp, #108	; 0x6c
 80081fe:	ecbd 8b02 	vpop	{d8}
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	2920      	cmp	r1, #32
 8008208:	d1cc      	bne.n	80081a4 <_strtod_l+0x34>
 800820a:	3201      	adds	r2, #1
 800820c:	e7bf      	b.n	800818e <_strtod_l+0x1e>
 800820e:	292d      	cmp	r1, #45	; 0x2d
 8008210:	d1c8      	bne.n	80081a4 <_strtod_l+0x34>
 8008212:	2101      	movs	r1, #1
 8008214:	910a      	str	r1, [sp, #40]	; 0x28
 8008216:	1c51      	adds	r1, r2, #1
 8008218:	9115      	str	r1, [sp, #84]	; 0x54
 800821a:	7852      	ldrb	r2, [r2, #1]
 800821c:	2a00      	cmp	r2, #0
 800821e:	d1c3      	bne.n	80081a8 <_strtod_l+0x38>
 8008220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008222:	9515      	str	r5, [sp, #84]	; 0x54
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 855f 	bne.w	8008ce8 <_strtod_l+0xb78>
 800822a:	4642      	mov	r2, r8
 800822c:	464b      	mov	r3, r9
 800822e:	e7e3      	b.n	80081f8 <_strtod_l+0x88>
 8008230:	2100      	movs	r1, #0
 8008232:	e7ef      	b.n	8008214 <_strtod_l+0xa4>
 8008234:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008236:	b13a      	cbz	r2, 8008248 <_strtod_l+0xd8>
 8008238:	2135      	movs	r1, #53	; 0x35
 800823a:	a818      	add	r0, sp, #96	; 0x60
 800823c:	f7ff ff37 	bl	80080ae <__copybits>
 8008240:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff fb0a 	bl	800785c <_Bfree>
 8008248:	3f01      	subs	r7, #1
 800824a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800824c:	2f04      	cmp	r7, #4
 800824e:	d806      	bhi.n	800825e <_strtod_l+0xee>
 8008250:	e8df f007 	tbb	[pc, r7]
 8008254:	201d0314 	.word	0x201d0314
 8008258:	14          	.byte	0x14
 8008259:	00          	.byte	0x00
 800825a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800825e:	05e9      	lsls	r1, r5, #23
 8008260:	bf48      	it	mi
 8008262:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008266:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800826a:	0d1b      	lsrs	r3, r3, #20
 800826c:	051b      	lsls	r3, r3, #20
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1b9      	bne.n	80081e6 <_strtod_l+0x76>
 8008272:	f7fe faf7 	bl	8006864 <__errno>
 8008276:	2322      	movs	r3, #34	; 0x22
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	e7b4      	b.n	80081e6 <_strtod_l+0x76>
 800827c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008280:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008284:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008288:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800828c:	e7e7      	b.n	800825e <_strtod_l+0xee>
 800828e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008408 <_strtod_l+0x298>
 8008292:	e7e4      	b.n	800825e <_strtod_l+0xee>
 8008294:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008298:	f04f 38ff 	mov.w	r8, #4294967295
 800829c:	e7df      	b.n	800825e <_strtod_l+0xee>
 800829e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	9215      	str	r2, [sp, #84]	; 0x54
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b30      	cmp	r3, #48	; 0x30
 80082a8:	d0f9      	beq.n	800829e <_strtod_l+0x12e>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d09b      	beq.n	80081e6 <_strtod_l+0x76>
 80082ae:	2301      	movs	r3, #1
 80082b0:	f04f 0a00 	mov.w	sl, #0
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082be:	46d3      	mov	fp, sl
 80082c0:	220a      	movs	r2, #10
 80082c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80082c4:	7806      	ldrb	r6, [r0, #0]
 80082c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082ca:	b2d9      	uxtb	r1, r3
 80082cc:	2909      	cmp	r1, #9
 80082ce:	d926      	bls.n	800831e <_strtod_l+0x1ae>
 80082d0:	494c      	ldr	r1, [pc, #304]	; (8008404 <_strtod_l+0x294>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	f000 ffe6 	bl	80092a4 <strncmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d030      	beq.n	800833e <_strtod_l+0x1ce>
 80082dc:	2000      	movs	r0, #0
 80082de:	4632      	mov	r2, r6
 80082e0:	9005      	str	r0, [sp, #20]
 80082e2:	465e      	mov	r6, fp
 80082e4:	4603      	mov	r3, r0
 80082e6:	2a65      	cmp	r2, #101	; 0x65
 80082e8:	d001      	beq.n	80082ee <_strtod_l+0x17e>
 80082ea:	2a45      	cmp	r2, #69	; 0x45
 80082ec:	d113      	bne.n	8008316 <_strtod_l+0x1a6>
 80082ee:	b91e      	cbnz	r6, 80082f8 <_strtod_l+0x188>
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	4302      	orrs	r2, r0
 80082f4:	d094      	beq.n	8008220 <_strtod_l+0xb0>
 80082f6:	2600      	movs	r6, #0
 80082f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80082fa:	1c6a      	adds	r2, r5, #1
 80082fc:	9215      	str	r2, [sp, #84]	; 0x54
 80082fe:	786a      	ldrb	r2, [r5, #1]
 8008300:	2a2b      	cmp	r2, #43	; 0x2b
 8008302:	d074      	beq.n	80083ee <_strtod_l+0x27e>
 8008304:	2a2d      	cmp	r2, #45	; 0x2d
 8008306:	d078      	beq.n	80083fa <_strtod_l+0x28a>
 8008308:	f04f 0c00 	mov.w	ip, #0
 800830c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008310:	2909      	cmp	r1, #9
 8008312:	d97f      	bls.n	8008414 <_strtod_l+0x2a4>
 8008314:	9515      	str	r5, [sp, #84]	; 0x54
 8008316:	2700      	movs	r7, #0
 8008318:	e09e      	b.n	8008458 <_strtod_l+0x2e8>
 800831a:	2300      	movs	r3, #0
 800831c:	e7c8      	b.n	80082b0 <_strtod_l+0x140>
 800831e:	f1bb 0f08 	cmp.w	fp, #8
 8008322:	bfd8      	it	le
 8008324:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008326:	f100 0001 	add.w	r0, r0, #1
 800832a:	bfda      	itte	le
 800832c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008330:	9309      	strle	r3, [sp, #36]	; 0x24
 8008332:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008336:	f10b 0b01 	add.w	fp, fp, #1
 800833a:	9015      	str	r0, [sp, #84]	; 0x54
 800833c:	e7c1      	b.n	80082c2 <_strtod_l+0x152>
 800833e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	9215      	str	r2, [sp, #84]	; 0x54
 8008344:	785a      	ldrb	r2, [r3, #1]
 8008346:	f1bb 0f00 	cmp.w	fp, #0
 800834a:	d037      	beq.n	80083bc <_strtod_l+0x24c>
 800834c:	9005      	str	r0, [sp, #20]
 800834e:	465e      	mov	r6, fp
 8008350:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008354:	2b09      	cmp	r3, #9
 8008356:	d912      	bls.n	800837e <_strtod_l+0x20e>
 8008358:	2301      	movs	r3, #1
 800835a:	e7c4      	b.n	80082e6 <_strtod_l+0x176>
 800835c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	9215      	str	r2, [sp, #84]	; 0x54
 8008362:	785a      	ldrb	r2, [r3, #1]
 8008364:	3001      	adds	r0, #1
 8008366:	2a30      	cmp	r2, #48	; 0x30
 8008368:	d0f8      	beq.n	800835c <_strtod_l+0x1ec>
 800836a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800836e:	2b08      	cmp	r3, #8
 8008370:	f200 84c1 	bhi.w	8008cf6 <_strtod_l+0xb86>
 8008374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008376:	9005      	str	r0, [sp, #20]
 8008378:	2000      	movs	r0, #0
 800837a:	930b      	str	r3, [sp, #44]	; 0x2c
 800837c:	4606      	mov	r6, r0
 800837e:	3a30      	subs	r2, #48	; 0x30
 8008380:	f100 0301 	add.w	r3, r0, #1
 8008384:	d014      	beq.n	80083b0 <_strtod_l+0x240>
 8008386:	9905      	ldr	r1, [sp, #20]
 8008388:	4419      	add	r1, r3
 800838a:	9105      	str	r1, [sp, #20]
 800838c:	4633      	mov	r3, r6
 800838e:	eb00 0c06 	add.w	ip, r0, r6
 8008392:	210a      	movs	r1, #10
 8008394:	4563      	cmp	r3, ip
 8008396:	d113      	bne.n	80083c0 <_strtod_l+0x250>
 8008398:	1833      	adds	r3, r6, r0
 800839a:	2b08      	cmp	r3, #8
 800839c:	f106 0601 	add.w	r6, r6, #1
 80083a0:	4406      	add	r6, r0
 80083a2:	dc1a      	bgt.n	80083da <_strtod_l+0x26a>
 80083a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083a6:	230a      	movs	r3, #10
 80083a8:	fb03 2301 	mla	r3, r3, r1, r2
 80083ac:	9309      	str	r3, [sp, #36]	; 0x24
 80083ae:	2300      	movs	r3, #0
 80083b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b2:	1c51      	adds	r1, r2, #1
 80083b4:	9115      	str	r1, [sp, #84]	; 0x54
 80083b6:	7852      	ldrb	r2, [r2, #1]
 80083b8:	4618      	mov	r0, r3
 80083ba:	e7c9      	b.n	8008350 <_strtod_l+0x1e0>
 80083bc:	4658      	mov	r0, fp
 80083be:	e7d2      	b.n	8008366 <_strtod_l+0x1f6>
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	f103 0301 	add.w	r3, r3, #1
 80083c6:	dc03      	bgt.n	80083d0 <_strtod_l+0x260>
 80083c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083ca:	434f      	muls	r7, r1
 80083cc:	9709      	str	r7, [sp, #36]	; 0x24
 80083ce:	e7e1      	b.n	8008394 <_strtod_l+0x224>
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	bfd8      	it	le
 80083d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80083d8:	e7dc      	b.n	8008394 <_strtod_l+0x224>
 80083da:	2e10      	cmp	r6, #16
 80083dc:	bfdc      	itt	le
 80083de:	230a      	movle	r3, #10
 80083e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80083e4:	e7e3      	b.n	80083ae <_strtod_l+0x23e>
 80083e6:	2300      	movs	r3, #0
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	2301      	movs	r3, #1
 80083ec:	e780      	b.n	80082f0 <_strtod_l+0x180>
 80083ee:	f04f 0c00 	mov.w	ip, #0
 80083f2:	1caa      	adds	r2, r5, #2
 80083f4:	9215      	str	r2, [sp, #84]	; 0x54
 80083f6:	78aa      	ldrb	r2, [r5, #2]
 80083f8:	e788      	b.n	800830c <_strtod_l+0x19c>
 80083fa:	f04f 0c01 	mov.w	ip, #1
 80083fe:	e7f8      	b.n	80083f2 <_strtod_l+0x282>
 8008400:	0800a398 	.word	0x0800a398
 8008404:	0800a394 	.word	0x0800a394
 8008408:	7ff00000 	.word	0x7ff00000
 800840c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800840e:	1c51      	adds	r1, r2, #1
 8008410:	9115      	str	r1, [sp, #84]	; 0x54
 8008412:	7852      	ldrb	r2, [r2, #1]
 8008414:	2a30      	cmp	r2, #48	; 0x30
 8008416:	d0f9      	beq.n	800840c <_strtod_l+0x29c>
 8008418:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800841c:	2908      	cmp	r1, #8
 800841e:	f63f af7a 	bhi.w	8008316 <_strtod_l+0x1a6>
 8008422:	3a30      	subs	r2, #48	; 0x30
 8008424:	9208      	str	r2, [sp, #32]
 8008426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008428:	920c      	str	r2, [sp, #48]	; 0x30
 800842a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800842c:	1c57      	adds	r7, r2, #1
 800842e:	9715      	str	r7, [sp, #84]	; 0x54
 8008430:	7852      	ldrb	r2, [r2, #1]
 8008432:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008436:	f1be 0f09 	cmp.w	lr, #9
 800843a:	d938      	bls.n	80084ae <_strtod_l+0x33e>
 800843c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800843e:	1a7f      	subs	r7, r7, r1
 8008440:	2f08      	cmp	r7, #8
 8008442:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008446:	dc03      	bgt.n	8008450 <_strtod_l+0x2e0>
 8008448:	9908      	ldr	r1, [sp, #32]
 800844a:	428f      	cmp	r7, r1
 800844c:	bfa8      	it	ge
 800844e:	460f      	movge	r7, r1
 8008450:	f1bc 0f00 	cmp.w	ip, #0
 8008454:	d000      	beq.n	8008458 <_strtod_l+0x2e8>
 8008456:	427f      	negs	r7, r7
 8008458:	2e00      	cmp	r6, #0
 800845a:	d14f      	bne.n	80084fc <_strtod_l+0x38c>
 800845c:	9904      	ldr	r1, [sp, #16]
 800845e:	4301      	orrs	r1, r0
 8008460:	f47f aec1 	bne.w	80081e6 <_strtod_l+0x76>
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f aedb 	bne.w	8008220 <_strtod_l+0xb0>
 800846a:	2a69      	cmp	r2, #105	; 0x69
 800846c:	d029      	beq.n	80084c2 <_strtod_l+0x352>
 800846e:	dc26      	bgt.n	80084be <_strtod_l+0x34e>
 8008470:	2a49      	cmp	r2, #73	; 0x49
 8008472:	d026      	beq.n	80084c2 <_strtod_l+0x352>
 8008474:	2a4e      	cmp	r2, #78	; 0x4e
 8008476:	f47f aed3 	bne.w	8008220 <_strtod_l+0xb0>
 800847a:	499b      	ldr	r1, [pc, #620]	; (80086e8 <_strtod_l+0x578>)
 800847c:	a815      	add	r0, sp, #84	; 0x54
 800847e:	f001 fa17 	bl	80098b0 <__match>
 8008482:	2800      	cmp	r0, #0
 8008484:	f43f aecc 	beq.w	8008220 <_strtod_l+0xb0>
 8008488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b28      	cmp	r3, #40	; 0x28
 800848e:	d12f      	bne.n	80084f0 <_strtod_l+0x380>
 8008490:	4996      	ldr	r1, [pc, #600]	; (80086ec <_strtod_l+0x57c>)
 8008492:	aa18      	add	r2, sp, #96	; 0x60
 8008494:	a815      	add	r0, sp, #84	; 0x54
 8008496:	f001 fa1f 	bl	80098d8 <__hexnan>
 800849a:	2805      	cmp	r0, #5
 800849c:	d128      	bne.n	80084f0 <_strtod_l+0x380>
 800849e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80084a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80084ac:	e69b      	b.n	80081e6 <_strtod_l+0x76>
 80084ae:	9f08      	ldr	r7, [sp, #32]
 80084b0:	210a      	movs	r1, #10
 80084b2:	fb01 2107 	mla	r1, r1, r7, r2
 80084b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80084ba:	9208      	str	r2, [sp, #32]
 80084bc:	e7b5      	b.n	800842a <_strtod_l+0x2ba>
 80084be:	2a6e      	cmp	r2, #110	; 0x6e
 80084c0:	e7d9      	b.n	8008476 <_strtod_l+0x306>
 80084c2:	498b      	ldr	r1, [pc, #556]	; (80086f0 <_strtod_l+0x580>)
 80084c4:	a815      	add	r0, sp, #84	; 0x54
 80084c6:	f001 f9f3 	bl	80098b0 <__match>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	f43f aea8 	beq.w	8008220 <_strtod_l+0xb0>
 80084d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084d2:	4988      	ldr	r1, [pc, #544]	; (80086f4 <_strtod_l+0x584>)
 80084d4:	3b01      	subs	r3, #1
 80084d6:	a815      	add	r0, sp, #84	; 0x54
 80084d8:	9315      	str	r3, [sp, #84]	; 0x54
 80084da:	f001 f9e9 	bl	80098b0 <__match>
 80084de:	b910      	cbnz	r0, 80084e6 <_strtod_l+0x376>
 80084e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084e2:	3301      	adds	r3, #1
 80084e4:	9315      	str	r3, [sp, #84]	; 0x54
 80084e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008704 <_strtod_l+0x594>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	e67a      	b.n	80081e6 <_strtod_l+0x76>
 80084f0:	4881      	ldr	r0, [pc, #516]	; (80086f8 <_strtod_l+0x588>)
 80084f2:	f000 fef9 	bl	80092e8 <nan>
 80084f6:	ec59 8b10 	vmov	r8, r9, d0
 80084fa:	e674      	b.n	80081e6 <_strtod_l+0x76>
 80084fc:	9b05      	ldr	r3, [sp, #20]
 80084fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008500:	1afb      	subs	r3, r7, r3
 8008502:	f1bb 0f00 	cmp.w	fp, #0
 8008506:	bf08      	it	eq
 8008508:	46b3      	moveq	fp, r6
 800850a:	2e10      	cmp	r6, #16
 800850c:	9308      	str	r3, [sp, #32]
 800850e:	4635      	mov	r5, r6
 8008510:	bfa8      	it	ge
 8008512:	2510      	movge	r5, #16
 8008514:	f7f7 fffe 	bl	8000514 <__aeabi_ui2d>
 8008518:	2e09      	cmp	r6, #9
 800851a:	4680      	mov	r8, r0
 800851c:	4689      	mov	r9, r1
 800851e:	dd13      	ble.n	8008548 <_strtod_l+0x3d8>
 8008520:	4b76      	ldr	r3, [pc, #472]	; (80086fc <_strtod_l+0x58c>)
 8008522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008526:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800852a:	f7f8 f86d 	bl	8000608 <__aeabi_dmul>
 800852e:	4680      	mov	r8, r0
 8008530:	4650      	mov	r0, sl
 8008532:	4689      	mov	r9, r1
 8008534:	f7f7 ffee 	bl	8000514 <__aeabi_ui2d>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f7 feac 	bl	800029c <__adddf3>
 8008544:	4680      	mov	r8, r0
 8008546:	4689      	mov	r9, r1
 8008548:	2e0f      	cmp	r6, #15
 800854a:	dc38      	bgt.n	80085be <_strtod_l+0x44e>
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f43f ae49 	beq.w	80081e6 <_strtod_l+0x76>
 8008554:	dd24      	ble.n	80085a0 <_strtod_l+0x430>
 8008556:	2b16      	cmp	r3, #22
 8008558:	dc0b      	bgt.n	8008572 <_strtod_l+0x402>
 800855a:	4968      	ldr	r1, [pc, #416]	; (80086fc <_strtod_l+0x58c>)
 800855c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	f7f8 f84e 	bl	8000608 <__aeabi_dmul>
 800856c:	4680      	mov	r8, r0
 800856e:	4689      	mov	r9, r1
 8008570:	e639      	b.n	80081e6 <_strtod_l+0x76>
 8008572:	9a08      	ldr	r2, [sp, #32]
 8008574:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008578:	4293      	cmp	r3, r2
 800857a:	db20      	blt.n	80085be <_strtod_l+0x44e>
 800857c:	4c5f      	ldr	r4, [pc, #380]	; (80086fc <_strtod_l+0x58c>)
 800857e:	f1c6 060f 	rsb	r6, r6, #15
 8008582:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008586:	4642      	mov	r2, r8
 8008588:	464b      	mov	r3, r9
 800858a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858e:	f7f8 f83b 	bl	8000608 <__aeabi_dmul>
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	1b9e      	subs	r6, r3, r6
 8008596:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800859a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800859e:	e7e3      	b.n	8008568 <_strtod_l+0x3f8>
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	3316      	adds	r3, #22
 80085a4:	db0b      	blt.n	80085be <_strtod_l+0x44e>
 80085a6:	9b05      	ldr	r3, [sp, #20]
 80085a8:	1bdf      	subs	r7, r3, r7
 80085aa:	4b54      	ldr	r3, [pc, #336]	; (80086fc <_strtod_l+0x58c>)
 80085ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80085b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f8 f950 	bl	800085c <__aeabi_ddiv>
 80085bc:	e7d6      	b.n	800856c <_strtod_l+0x3fc>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	1b75      	subs	r5, r6, r5
 80085c2:	441d      	add	r5, r3
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	dd70      	ble.n	80086aa <_strtod_l+0x53a>
 80085c8:	f015 030f 	ands.w	r3, r5, #15
 80085cc:	d00a      	beq.n	80085e4 <_strtod_l+0x474>
 80085ce:	494b      	ldr	r1, [pc, #300]	; (80086fc <_strtod_l+0x58c>)
 80085d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085dc:	f7f8 f814 	bl	8000608 <__aeabi_dmul>
 80085e0:	4680      	mov	r8, r0
 80085e2:	4689      	mov	r9, r1
 80085e4:	f035 050f 	bics.w	r5, r5, #15
 80085e8:	d04d      	beq.n	8008686 <_strtod_l+0x516>
 80085ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80085ee:	dd22      	ble.n	8008636 <_strtod_l+0x4c6>
 80085f0:	2500      	movs	r5, #0
 80085f2:	46ab      	mov	fp, r5
 80085f4:	9509      	str	r5, [sp, #36]	; 0x24
 80085f6:	9505      	str	r5, [sp, #20]
 80085f8:	2322      	movs	r3, #34	; 0x22
 80085fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008704 <_strtod_l+0x594>
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	f04f 0800 	mov.w	r8, #0
 8008604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	f43f aded 	beq.w	80081e6 <_strtod_l+0x76>
 800860c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800860e:	4620      	mov	r0, r4
 8008610:	f7ff f924 	bl	800785c <_Bfree>
 8008614:	9905      	ldr	r1, [sp, #20]
 8008616:	4620      	mov	r0, r4
 8008618:	f7ff f920 	bl	800785c <_Bfree>
 800861c:	4659      	mov	r1, fp
 800861e:	4620      	mov	r0, r4
 8008620:	f7ff f91c 	bl	800785c <_Bfree>
 8008624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff f918 	bl	800785c <_Bfree>
 800862c:	4629      	mov	r1, r5
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff f914 	bl	800785c <_Bfree>
 8008634:	e5d7      	b.n	80081e6 <_strtod_l+0x76>
 8008636:	4b32      	ldr	r3, [pc, #200]	; (8008700 <_strtod_l+0x590>)
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	2300      	movs	r3, #0
 800863c:	112d      	asrs	r5, r5, #4
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	469a      	mov	sl, r3
 8008644:	2d01      	cmp	r5, #1
 8008646:	dc21      	bgt.n	800868c <_strtod_l+0x51c>
 8008648:	b10b      	cbz	r3, 800864e <_strtod_l+0x4de>
 800864a:	4680      	mov	r8, r0
 800864c:	4689      	mov	r9, r1
 800864e:	492c      	ldr	r1, [pc, #176]	; (8008700 <_strtod_l+0x590>)
 8008650:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008654:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008660:	f7f7 ffd2 	bl	8000608 <__aeabi_dmul>
 8008664:	4b27      	ldr	r3, [pc, #156]	; (8008704 <_strtod_l+0x594>)
 8008666:	460a      	mov	r2, r1
 8008668:	400b      	ands	r3, r1
 800866a:	4927      	ldr	r1, [pc, #156]	; (8008708 <_strtod_l+0x598>)
 800866c:	428b      	cmp	r3, r1
 800866e:	4680      	mov	r8, r0
 8008670:	d8be      	bhi.n	80085f0 <_strtod_l+0x480>
 8008672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008676:	428b      	cmp	r3, r1
 8008678:	bf86      	itte	hi
 800867a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800870c <_strtod_l+0x59c>
 800867e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008682:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008686:	2300      	movs	r3, #0
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	e07b      	b.n	8008784 <_strtod_l+0x614>
 800868c:	07ea      	lsls	r2, r5, #31
 800868e:	d505      	bpl.n	800869c <_strtod_l+0x52c>
 8008690:	9b04      	ldr	r3, [sp, #16]
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 ffb7 	bl	8000608 <__aeabi_dmul>
 800869a:	2301      	movs	r3, #1
 800869c:	9a04      	ldr	r2, [sp, #16]
 800869e:	3208      	adds	r2, #8
 80086a0:	f10a 0a01 	add.w	sl, sl, #1
 80086a4:	106d      	asrs	r5, r5, #1
 80086a6:	9204      	str	r2, [sp, #16]
 80086a8:	e7cc      	b.n	8008644 <_strtod_l+0x4d4>
 80086aa:	d0ec      	beq.n	8008686 <_strtod_l+0x516>
 80086ac:	426d      	negs	r5, r5
 80086ae:	f015 020f 	ands.w	r2, r5, #15
 80086b2:	d00a      	beq.n	80086ca <_strtod_l+0x55a>
 80086b4:	4b11      	ldr	r3, [pc, #68]	; (80086fc <_strtod_l+0x58c>)
 80086b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f8 f8cb 	bl	800085c <__aeabi_ddiv>
 80086c6:	4680      	mov	r8, r0
 80086c8:	4689      	mov	r9, r1
 80086ca:	112d      	asrs	r5, r5, #4
 80086cc:	d0db      	beq.n	8008686 <_strtod_l+0x516>
 80086ce:	2d1f      	cmp	r5, #31
 80086d0:	dd1e      	ble.n	8008710 <_strtod_l+0x5a0>
 80086d2:	2500      	movs	r5, #0
 80086d4:	46ab      	mov	fp, r5
 80086d6:	9509      	str	r5, [sp, #36]	; 0x24
 80086d8:	9505      	str	r5, [sp, #20]
 80086da:	2322      	movs	r3, #34	; 0x22
 80086dc:	f04f 0800 	mov.w	r8, #0
 80086e0:	f04f 0900 	mov.w	r9, #0
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	e78d      	b.n	8008604 <_strtod_l+0x494>
 80086e8:	0800a185 	.word	0x0800a185
 80086ec:	0800a3ac 	.word	0x0800a3ac
 80086f0:	0800a17d 	.word	0x0800a17d
 80086f4:	0800a1b4 	.word	0x0800a1b4
 80086f8:	0800a53d 	.word	0x0800a53d
 80086fc:	0800a2c0 	.word	0x0800a2c0
 8008700:	0800a298 	.word	0x0800a298
 8008704:	7ff00000 	.word	0x7ff00000
 8008708:	7ca00000 	.word	0x7ca00000
 800870c:	7fefffff 	.word	0x7fefffff
 8008710:	f015 0310 	ands.w	r3, r5, #16
 8008714:	bf18      	it	ne
 8008716:	236a      	movne	r3, #106	; 0x6a
 8008718:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008abc <_strtod_l+0x94c>
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	2300      	movs	r3, #0
 8008724:	07ea      	lsls	r2, r5, #31
 8008726:	d504      	bpl.n	8008732 <_strtod_l+0x5c2>
 8008728:	e9da 2300 	ldrd	r2, r3, [sl]
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	2301      	movs	r3, #1
 8008732:	106d      	asrs	r5, r5, #1
 8008734:	f10a 0a08 	add.w	sl, sl, #8
 8008738:	d1f4      	bne.n	8008724 <_strtod_l+0x5b4>
 800873a:	b10b      	cbz	r3, 8008740 <_strtod_l+0x5d0>
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	b1bb      	cbz	r3, 8008774 <_strtod_l+0x604>
 8008744:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008748:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800874c:	2b00      	cmp	r3, #0
 800874e:	4649      	mov	r1, r9
 8008750:	dd10      	ble.n	8008774 <_strtod_l+0x604>
 8008752:	2b1f      	cmp	r3, #31
 8008754:	f340 811e 	ble.w	8008994 <_strtod_l+0x824>
 8008758:	2b34      	cmp	r3, #52	; 0x34
 800875a:	bfde      	ittt	le
 800875c:	f04f 33ff 	movle.w	r3, #4294967295
 8008760:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008764:	4093      	lslle	r3, r2
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	bfcc      	ite	gt
 800876c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008770:	ea03 0901 	andle.w	r9, r3, r1
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f8 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008780:	2800      	cmp	r0, #0
 8008782:	d1a6      	bne.n	80086d2 <_strtod_l+0x562>
 8008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800878a:	4633      	mov	r3, r6
 800878c:	465a      	mov	r2, fp
 800878e:	4620      	mov	r0, r4
 8008790:	f7ff f8cc 	bl	800792c <__s2b>
 8008794:	9009      	str	r0, [sp, #36]	; 0x24
 8008796:	2800      	cmp	r0, #0
 8008798:	f43f af2a 	beq.w	80085f0 <_strtod_l+0x480>
 800879c:	9a08      	ldr	r2, [sp, #32]
 800879e:	9b05      	ldr	r3, [sp, #20]
 80087a0:	2a00      	cmp	r2, #0
 80087a2:	eba3 0307 	sub.w	r3, r3, r7
 80087a6:	bfa8      	it	ge
 80087a8:	2300      	movge	r3, #0
 80087aa:	930c      	str	r3, [sp, #48]	; 0x30
 80087ac:	2500      	movs	r5, #0
 80087ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087b2:	9312      	str	r3, [sp, #72]	; 0x48
 80087b4:	46ab      	mov	fp, r5
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	4620      	mov	r0, r4
 80087ba:	6859      	ldr	r1, [r3, #4]
 80087bc:	f7ff f80e 	bl	80077dc <_Balloc>
 80087c0:	9005      	str	r0, [sp, #20]
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f43f af18 	beq.w	80085f8 <_strtod_l+0x488>
 80087c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	3202      	adds	r2, #2
 80087ce:	f103 010c 	add.w	r1, r3, #12
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	300c      	adds	r0, #12
 80087d6:	f7fe f871 	bl	80068bc <memcpy>
 80087da:	ec49 8b10 	vmov	d0, r8, r9
 80087de:	aa18      	add	r2, sp, #96	; 0x60
 80087e0:	a917      	add	r1, sp, #92	; 0x5c
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff fbd6 	bl	8007f94 <__d2b>
 80087e8:	ec49 8b18 	vmov	d8, r8, r9
 80087ec:	9016      	str	r0, [sp, #88]	; 0x58
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f af02 	beq.w	80085f8 <_strtod_l+0x488>
 80087f4:	2101      	movs	r1, #1
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff f930 	bl	8007a5c <__i2b>
 80087fc:	4683      	mov	fp, r0
 80087fe:	2800      	cmp	r0, #0
 8008800:	f43f aefa 	beq.w	80085f8 <_strtod_l+0x488>
 8008804:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008806:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008808:	2e00      	cmp	r6, #0
 800880a:	bfab      	itete	ge
 800880c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800880e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008812:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008816:	bfac      	ite	ge
 8008818:	eb06 0a03 	addge.w	sl, r6, r3
 800881c:	1b9f      	sublt	r7, r3, r6
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	1af6      	subs	r6, r6, r3
 8008822:	4416      	add	r6, r2
 8008824:	4ba0      	ldr	r3, [pc, #640]	; (8008aa8 <_strtod_l+0x938>)
 8008826:	3e01      	subs	r6, #1
 8008828:	429e      	cmp	r6, r3
 800882a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800882e:	f280 80c4 	bge.w	80089ba <_strtod_l+0x84a>
 8008832:	1b9b      	subs	r3, r3, r6
 8008834:	2b1f      	cmp	r3, #31
 8008836:	eba2 0203 	sub.w	r2, r2, r3
 800883a:	f04f 0101 	mov.w	r1, #1
 800883e:	f300 80b0 	bgt.w	80089a2 <_strtod_l+0x832>
 8008842:	fa01 f303 	lsl.w	r3, r1, r3
 8008846:	930e      	str	r3, [sp, #56]	; 0x38
 8008848:	2300      	movs	r3, #0
 800884a:	930d      	str	r3, [sp, #52]	; 0x34
 800884c:	eb0a 0602 	add.w	r6, sl, r2
 8008850:	9b04      	ldr	r3, [sp, #16]
 8008852:	45b2      	cmp	sl, r6
 8008854:	4417      	add	r7, r2
 8008856:	441f      	add	r7, r3
 8008858:	4653      	mov	r3, sl
 800885a:	bfa8      	it	ge
 800885c:	4633      	movge	r3, r6
 800885e:	42bb      	cmp	r3, r7
 8008860:	bfa8      	it	ge
 8008862:	463b      	movge	r3, r7
 8008864:	2b00      	cmp	r3, #0
 8008866:	bfc2      	ittt	gt
 8008868:	1af6      	subgt	r6, r6, r3
 800886a:	1aff      	subgt	r7, r7, r3
 800886c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	dd17      	ble.n	80088a6 <_strtod_l+0x736>
 8008876:	4659      	mov	r1, fp
 8008878:	461a      	mov	r2, r3
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff f9ae 	bl	8007bdc <__pow5mult>
 8008880:	4683      	mov	fp, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	f43f aeb8 	beq.w	80085f8 <_strtod_l+0x488>
 8008888:	4601      	mov	r1, r0
 800888a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800888c:	4620      	mov	r0, r4
 800888e:	f7ff f8fb 	bl	8007a88 <__multiply>
 8008892:	900b      	str	r0, [sp, #44]	; 0x2c
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f aeaf 	beq.w	80085f8 <_strtod_l+0x488>
 800889a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800889c:	4620      	mov	r0, r4
 800889e:	f7fe ffdd 	bl	800785c <_Bfree>
 80088a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a4:	9316      	str	r3, [sp, #88]	; 0x58
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	f300 808c 	bgt.w	80089c4 <_strtod_l+0x854>
 80088ac:	9b08      	ldr	r3, [sp, #32]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd08      	ble.n	80088c4 <_strtod_l+0x754>
 80088b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088b4:	9905      	ldr	r1, [sp, #20]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff f990 	bl	8007bdc <__pow5mult>
 80088bc:	9005      	str	r0, [sp, #20]
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f ae9a 	beq.w	80085f8 <_strtod_l+0x488>
 80088c4:	2f00      	cmp	r7, #0
 80088c6:	dd08      	ble.n	80088da <_strtod_l+0x76a>
 80088c8:	9905      	ldr	r1, [sp, #20]
 80088ca:	463a      	mov	r2, r7
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff f9df 	bl	8007c90 <__lshift>
 80088d2:	9005      	str	r0, [sp, #20]
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f43f ae8f 	beq.w	80085f8 <_strtod_l+0x488>
 80088da:	f1ba 0f00 	cmp.w	sl, #0
 80088de:	dd08      	ble.n	80088f2 <_strtod_l+0x782>
 80088e0:	4659      	mov	r1, fp
 80088e2:	4652      	mov	r2, sl
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7ff f9d3 	bl	8007c90 <__lshift>
 80088ea:	4683      	mov	fp, r0
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f43f ae83 	beq.w	80085f8 <_strtod_l+0x488>
 80088f2:	9a05      	ldr	r2, [sp, #20]
 80088f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff fa52 	bl	8007da0 <__mdiff>
 80088fc:	4605      	mov	r5, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f ae7a 	beq.w	80085f8 <_strtod_l+0x488>
 8008904:	68c3      	ldr	r3, [r0, #12]
 8008906:	930b      	str	r3, [sp, #44]	; 0x2c
 8008908:	2300      	movs	r3, #0
 800890a:	60c3      	str	r3, [r0, #12]
 800890c:	4659      	mov	r1, fp
 800890e:	f7ff fa2b 	bl	8007d68 <__mcmp>
 8008912:	2800      	cmp	r0, #0
 8008914:	da60      	bge.n	80089d8 <_strtod_l+0x868>
 8008916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008918:	ea53 0308 	orrs.w	r3, r3, r8
 800891c:	f040 8084 	bne.w	8008a28 <_strtod_l+0x8b8>
 8008920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008924:	2b00      	cmp	r3, #0
 8008926:	d17f      	bne.n	8008a28 <_strtod_l+0x8b8>
 8008928:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800892c:	0d1b      	lsrs	r3, r3, #20
 800892e:	051b      	lsls	r3, r3, #20
 8008930:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008934:	d978      	bls.n	8008a28 <_strtod_l+0x8b8>
 8008936:	696b      	ldr	r3, [r5, #20]
 8008938:	b913      	cbnz	r3, 8008940 <_strtod_l+0x7d0>
 800893a:	692b      	ldr	r3, [r5, #16]
 800893c:	2b01      	cmp	r3, #1
 800893e:	dd73      	ble.n	8008a28 <_strtod_l+0x8b8>
 8008940:	4629      	mov	r1, r5
 8008942:	2201      	movs	r2, #1
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff f9a3 	bl	8007c90 <__lshift>
 800894a:	4659      	mov	r1, fp
 800894c:	4605      	mov	r5, r0
 800894e:	f7ff fa0b 	bl	8007d68 <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	dd68      	ble.n	8008a28 <_strtod_l+0x8b8>
 8008956:	9904      	ldr	r1, [sp, #16]
 8008958:	4a54      	ldr	r2, [pc, #336]	; (8008aac <_strtod_l+0x93c>)
 800895a:	464b      	mov	r3, r9
 800895c:	2900      	cmp	r1, #0
 800895e:	f000 8084 	beq.w	8008a6a <_strtod_l+0x8fa>
 8008962:	ea02 0109 	and.w	r1, r2, r9
 8008966:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800896a:	dc7e      	bgt.n	8008a6a <_strtod_l+0x8fa>
 800896c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008970:	f77f aeb3 	ble.w	80086da <_strtod_l+0x56a>
 8008974:	4b4e      	ldr	r3, [pc, #312]	; (8008ab0 <_strtod_l+0x940>)
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	2200      	movs	r2, #0
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	4b4a      	ldr	r3, [pc, #296]	; (8008aac <_strtod_l+0x93c>)
 8008982:	400b      	ands	r3, r1
 8008984:	4680      	mov	r8, r0
 8008986:	4689      	mov	r9, r1
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f ae3f 	bne.w	800860c <_strtod_l+0x49c>
 800898e:	2322      	movs	r3, #34	; 0x22
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	e63b      	b.n	800860c <_strtod_l+0x49c>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	ea03 0808 	and.w	r8, r3, r8
 80089a0:	e6e8      	b.n	8008774 <_strtod_l+0x604>
 80089a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80089a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80089aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80089ae:	36e2      	adds	r6, #226	; 0xe2
 80089b0:	fa01 f306 	lsl.w	r3, r1, r6
 80089b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80089b8:	e748      	b.n	800884c <_strtod_l+0x6dc>
 80089ba:	2100      	movs	r1, #0
 80089bc:	2301      	movs	r3, #1
 80089be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80089c2:	e743      	b.n	800884c <_strtod_l+0x6dc>
 80089c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089c6:	4632      	mov	r2, r6
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7ff f961 	bl	8007c90 <__lshift>
 80089ce:	9016      	str	r0, [sp, #88]	; 0x58
 80089d0:	2800      	cmp	r0, #0
 80089d2:	f47f af6b 	bne.w	80088ac <_strtod_l+0x73c>
 80089d6:	e60f      	b.n	80085f8 <_strtod_l+0x488>
 80089d8:	46ca      	mov	sl, r9
 80089da:	d171      	bne.n	8008ac0 <_strtod_l+0x950>
 80089dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089e2:	b352      	cbz	r2, 8008a3a <_strtod_l+0x8ca>
 80089e4:	4a33      	ldr	r2, [pc, #204]	; (8008ab4 <_strtod_l+0x944>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d12a      	bne.n	8008a40 <_strtod_l+0x8d0>
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	4641      	mov	r1, r8
 80089ee:	b1fb      	cbz	r3, 8008a30 <_strtod_l+0x8c0>
 80089f0:	4b2e      	ldr	r3, [pc, #184]	; (8008aac <_strtod_l+0x93c>)
 80089f2:	ea09 0303 	and.w	r3, r9, r3
 80089f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295
 80089fe:	d81a      	bhi.n	8008a36 <_strtod_l+0x8c6>
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	d118      	bne.n	8008a40 <_strtod_l+0x8d0>
 8008a0e:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <_strtod_l+0x948>)
 8008a10:	459a      	cmp	sl, r3
 8008a12:	d102      	bne.n	8008a1a <_strtod_l+0x8aa>
 8008a14:	3101      	adds	r1, #1
 8008a16:	f43f adef 	beq.w	80085f8 <_strtod_l+0x488>
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <_strtod_l+0x93c>)
 8008a1c:	ea0a 0303 	and.w	r3, sl, r3
 8008a20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008a24:	f04f 0800 	mov.w	r8, #0
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1a2      	bne.n	8008974 <_strtod_l+0x804>
 8008a2e:	e5ed      	b.n	800860c <_strtod_l+0x49c>
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	e7e9      	b.n	8008a0a <_strtod_l+0x89a>
 8008a36:	4613      	mov	r3, r2
 8008a38:	e7e7      	b.n	8008a0a <_strtod_l+0x89a>
 8008a3a:	ea53 0308 	orrs.w	r3, r3, r8
 8008a3e:	d08a      	beq.n	8008956 <_strtod_l+0x7e6>
 8008a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a42:	b1e3      	cbz	r3, 8008a7e <_strtod_l+0x90e>
 8008a44:	ea13 0f0a 	tst.w	r3, sl
 8008a48:	d0ee      	beq.n	8008a28 <_strtod_l+0x8b8>
 8008a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a4c:	9a04      	ldr	r2, [sp, #16]
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	b1c3      	cbz	r3, 8008a86 <_strtod_l+0x916>
 8008a54:	f7ff fb6f 	bl	8008136 <sulp>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	ec51 0b18 	vmov	r0, r1, d8
 8008a60:	f7f7 fc1c 	bl	800029c <__adddf3>
 8008a64:	4680      	mov	r8, r0
 8008a66:	4689      	mov	r9, r1
 8008a68:	e7de      	b.n	8008a28 <_strtod_l+0x8b8>
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008a74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a78:	f04f 38ff 	mov.w	r8, #4294967295
 8008a7c:	e7d4      	b.n	8008a28 <_strtod_l+0x8b8>
 8008a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a80:	ea13 0f08 	tst.w	r3, r8
 8008a84:	e7e0      	b.n	8008a48 <_strtod_l+0x8d8>
 8008a86:	f7ff fb56 	bl	8008136 <sulp>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	ec51 0b18 	vmov	r0, r1, d8
 8008a92:	f7f7 fc01 	bl	8000298 <__aeabi_dsub>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	4689      	mov	r9, r1
 8008a9e:	f7f8 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0c0      	beq.n	8008a28 <_strtod_l+0x8b8>
 8008aa6:	e618      	b.n	80086da <_strtod_l+0x56a>
 8008aa8:	fffffc02 	.word	0xfffffc02
 8008aac:	7ff00000 	.word	0x7ff00000
 8008ab0:	39500000 	.word	0x39500000
 8008ab4:	000fffff 	.word	0x000fffff
 8008ab8:	7fefffff 	.word	0x7fefffff
 8008abc:	0800a3c0 	.word	0x0800a3c0
 8008ac0:	4659      	mov	r1, fp
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7ff fac0 	bl	8008048 <__ratio>
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	ee10 0a10 	vmov	r0, s0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f8 f812 	bl	8000b00 <__aeabi_dcmple>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d071      	beq.n	8008bc4 <_strtod_l+0xa54>
 8008ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d17c      	bne.n	8008be0 <_strtod_l+0xa70>
 8008ae6:	f1b8 0f00 	cmp.w	r8, #0
 8008aea:	d15a      	bne.n	8008ba2 <_strtod_l+0xa32>
 8008aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d15d      	bne.n	8008bb0 <_strtod_l+0xa40>
 8008af4:	4b90      	ldr	r3, [pc, #576]	; (8008d38 <_strtod_l+0xbc8>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	4630      	mov	r0, r6
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 fff6 	bl	8000aec <__aeabi_dcmplt>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d15c      	bne.n	8008bbe <_strtod_l+0xa4e>
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	4b8c      	ldr	r3, [pc, #560]	; (8008d3c <_strtod_l+0xbcc>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f7f7 fd7c 	bl	8000608 <__aeabi_dmul>
 8008b10:	4606      	mov	r6, r0
 8008b12:	460f      	mov	r7, r1
 8008b14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b18:	9606      	str	r6, [sp, #24]
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b24:	4b86      	ldr	r3, [pc, #536]	; (8008d40 <_strtod_l+0xbd0>)
 8008b26:	ea0a 0303 	and.w	r3, sl, r3
 8008b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b2e:	4b85      	ldr	r3, [pc, #532]	; (8008d44 <_strtod_l+0xbd4>)
 8008b30:	429a      	cmp	r2, r3
 8008b32:	f040 8090 	bne.w	8008c56 <_strtod_l+0xae6>
 8008b36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008b3a:	ec49 8b10 	vmov	d0, r8, r9
 8008b3e:	f7ff f9b9 	bl	8007eb4 <__ulp>
 8008b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b46:	ec51 0b10 	vmov	r0, r1, d0
 8008b4a:	f7f7 fd5d 	bl	8000608 <__aeabi_dmul>
 8008b4e:	4642      	mov	r2, r8
 8008b50:	464b      	mov	r3, r9
 8008b52:	f7f7 fba3 	bl	800029c <__adddf3>
 8008b56:	460b      	mov	r3, r1
 8008b58:	4979      	ldr	r1, [pc, #484]	; (8008d40 <_strtod_l+0xbd0>)
 8008b5a:	4a7b      	ldr	r2, [pc, #492]	; (8008d48 <_strtod_l+0xbd8>)
 8008b5c:	4019      	ands	r1, r3
 8008b5e:	4291      	cmp	r1, r2
 8008b60:	4680      	mov	r8, r0
 8008b62:	d944      	bls.n	8008bee <_strtod_l+0xa7e>
 8008b64:	ee18 2a90 	vmov	r2, s17
 8008b68:	4b78      	ldr	r3, [pc, #480]	; (8008d4c <_strtod_l+0xbdc>)
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d104      	bne.n	8008b78 <_strtod_l+0xa08>
 8008b6e:	ee18 3a10 	vmov	r3, s16
 8008b72:	3301      	adds	r3, #1
 8008b74:	f43f ad40 	beq.w	80085f8 <_strtod_l+0x488>
 8008b78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008d4c <_strtod_l+0xbdc>
 8008b7c:	f04f 38ff 	mov.w	r8, #4294967295
 8008b80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7fe fe6a 	bl	800785c <_Bfree>
 8008b88:	9905      	ldr	r1, [sp, #20]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7fe fe66 	bl	800785c <_Bfree>
 8008b90:	4659      	mov	r1, fp
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7fe fe62 	bl	800785c <_Bfree>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7fe fe5e 	bl	800785c <_Bfree>
 8008ba0:	e609      	b.n	80087b6 <_strtod_l+0x646>
 8008ba2:	f1b8 0f01 	cmp.w	r8, #1
 8008ba6:	d103      	bne.n	8008bb0 <_strtod_l+0xa40>
 8008ba8:	f1b9 0f00 	cmp.w	r9, #0
 8008bac:	f43f ad95 	beq.w	80086da <_strtod_l+0x56a>
 8008bb0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008d08 <_strtod_l+0xb98>
 8008bb4:	4f60      	ldr	r7, [pc, #384]	; (8008d38 <_strtod_l+0xbc8>)
 8008bb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e7ae      	b.n	8008b1c <_strtod_l+0x9ac>
 8008bbe:	4f5f      	ldr	r7, [pc, #380]	; (8008d3c <_strtod_l+0xbcc>)
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	e7a7      	b.n	8008b14 <_strtod_l+0x9a4>
 8008bc4:	4b5d      	ldr	r3, [pc, #372]	; (8008d3c <_strtod_l+0xbcc>)
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4639      	mov	r1, r7
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f7f7 fd1c 	bl	8000608 <__aeabi_dmul>
 8008bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d09c      	beq.n	8008b14 <_strtod_l+0x9a4>
 8008bda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008bde:	e79d      	b.n	8008b1c <_strtod_l+0x9ac>
 8008be0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008d10 <_strtod_l+0xba0>
 8008be4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008be8:	ec57 6b17 	vmov	r6, r7, d7
 8008bec:	e796      	b.n	8008b1c <_strtod_l+0x9ac>
 8008bee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	46ca      	mov	sl, r9
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1c2      	bne.n	8008b80 <_strtod_l+0xa10>
 8008bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c00:	0d1b      	lsrs	r3, r3, #20
 8008c02:	051b      	lsls	r3, r3, #20
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d1bb      	bne.n	8008b80 <_strtod_l+0xa10>
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f8 f85c 	bl	8000cc8 <__aeabi_d2lz>
 8008c10:	f7f7 fccc 	bl	80005ac <__aeabi_l2d>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 fb3c 	bl	8000298 <__aeabi_dsub>
 8008c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c26:	ea43 0308 	orr.w	r3, r3, r8
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	460f      	mov	r7, r1
 8008c30:	d054      	beq.n	8008cdc <_strtod_l+0xb6c>
 8008c32:	a339      	add	r3, pc, #228	; (adr r3, 8008d18 <_strtod_l+0xba8>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 ff58 	bl	8000aec <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f47f ace5 	bne.w	800860c <_strtod_l+0x49c>
 8008c42:	a337      	add	r3, pc, #220	; (adr r3, 8008d20 <_strtod_l+0xbb0>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 ff6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d095      	beq.n	8008b80 <_strtod_l+0xa10>
 8008c54:	e4da      	b.n	800860c <_strtod_l+0x49c>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	b333      	cbz	r3, 8008ca8 <_strtod_l+0xb38>
 8008c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c60:	d822      	bhi.n	8008ca8 <_strtod_l+0xb38>
 8008c62:	a331      	add	r3, pc, #196	; (adr r3, 8008d28 <_strtod_l+0xbb8>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 ff48 	bl	8000b00 <__aeabi_dcmple>
 8008c70:	b1a0      	cbz	r0, 8008c9c <_strtod_l+0xb2c>
 8008c72:	4639      	mov	r1, r7
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7f7 ff9f 	bl	8000bb8 <__aeabi_d2uiz>
 8008c7a:	2801      	cmp	r0, #1
 8008c7c:	bf38      	it	cc
 8008c7e:	2001      	movcc	r0, #1
 8008c80:	f7f7 fc48 	bl	8000514 <__aeabi_ui2d>
 8008c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	bb23      	cbnz	r3, 8008cd6 <_strtod_l+0xb66>
 8008c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c90:	9010      	str	r0, [sp, #64]	; 0x40
 8008c92:	9311      	str	r3, [sp, #68]	; 0x44
 8008c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ca0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cac:	eeb0 0a48 	vmov.f32	s0, s16
 8008cb0:	eef0 0a68 	vmov.f32	s1, s17
 8008cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008cb8:	f7ff f8fc 	bl	8007eb4 <__ulp>
 8008cbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cc0:	ec53 2b10 	vmov	r2, r3, d0
 8008cc4:	f7f7 fca0 	bl	8000608 <__aeabi_dmul>
 8008cc8:	ec53 2b18 	vmov	r2, r3, d8
 8008ccc:	f7f7 fae6 	bl	800029c <__adddf3>
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4689      	mov	r9, r1
 8008cd4:	e78d      	b.n	8008bf2 <_strtod_l+0xa82>
 8008cd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008cda:	e7db      	b.n	8008c94 <_strtod_l+0xb24>
 8008cdc:	a314      	add	r3, pc, #80	; (adr r3, 8008d30 <_strtod_l+0xbc0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 ff03 	bl	8000aec <__aeabi_dcmplt>
 8008ce6:	e7b3      	b.n	8008c50 <_strtod_l+0xae0>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930a      	str	r3, [sp, #40]	; 0x28
 8008cec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	f7ff ba7c 	b.w	80081ee <_strtod_l+0x7e>
 8008cf6:	2a65      	cmp	r2, #101	; 0x65
 8008cf8:	f43f ab75 	beq.w	80083e6 <_strtod_l+0x276>
 8008cfc:	2a45      	cmp	r2, #69	; 0x45
 8008cfe:	f43f ab72 	beq.w	80083e6 <_strtod_l+0x276>
 8008d02:	2301      	movs	r3, #1
 8008d04:	f7ff bbaa 	b.w	800845c <_strtod_l+0x2ec>
 8008d08:	00000000 	.word	0x00000000
 8008d0c:	bff00000 	.word	0xbff00000
 8008d10:	00000000 	.word	0x00000000
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	94a03595 	.word	0x94a03595
 8008d1c:	3fdfffff 	.word	0x3fdfffff
 8008d20:	35afe535 	.word	0x35afe535
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	ffc00000 	.word	0xffc00000
 8008d2c:	41dfffff 	.word	0x41dfffff
 8008d30:	94a03595 	.word	0x94a03595
 8008d34:	3fcfffff 	.word	0x3fcfffff
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	3fe00000 	.word	0x3fe00000
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	7fe00000 	.word	0x7fe00000
 8008d48:	7c9fffff 	.word	0x7c9fffff
 8008d4c:	7fefffff 	.word	0x7fefffff

08008d50 <_strtod_r>:
 8008d50:	4b01      	ldr	r3, [pc, #4]	; (8008d58 <_strtod_r+0x8>)
 8008d52:	f7ff ba0d 	b.w	8008170 <_strtod_l>
 8008d56:	bf00      	nop
 8008d58:	2000006c 	.word	0x2000006c

08008d5c <_strtol_l.constprop.0>:
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d62:	d001      	beq.n	8008d68 <_strtol_l.constprop.0+0xc>
 8008d64:	2b24      	cmp	r3, #36	; 0x24
 8008d66:	d906      	bls.n	8008d76 <_strtol_l.constprop.0+0x1a>
 8008d68:	f7fd fd7c 	bl	8006864 <__errno>
 8008d6c:	2316      	movs	r3, #22
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e5c <_strtol_l.constprop.0+0x100>
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	462e      	mov	r6, r5
 8008d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008d86:	f017 0708 	ands.w	r7, r7, #8
 8008d8a:	d1f7      	bne.n	8008d7c <_strtol_l.constprop.0+0x20>
 8008d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d8e:	d132      	bne.n	8008df6 <_strtol_l.constprop.0+0x9a>
 8008d90:	782c      	ldrb	r4, [r5, #0]
 8008d92:	2701      	movs	r7, #1
 8008d94:	1cb5      	adds	r5, r6, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d05b      	beq.n	8008e52 <_strtol_l.constprop.0+0xf6>
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d109      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008d9e:	2c30      	cmp	r4, #48	; 0x30
 8008da0:	d107      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008da2:	782c      	ldrb	r4, [r5, #0]
 8008da4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008da8:	2c58      	cmp	r4, #88	; 0x58
 8008daa:	d14d      	bne.n	8008e48 <_strtol_l.constprop.0+0xec>
 8008dac:	786c      	ldrb	r4, [r5, #1]
 8008dae:	2310      	movs	r3, #16
 8008db0:	3502      	adds	r5, #2
 8008db2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008db6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dba:	f04f 0e00 	mov.w	lr, #0
 8008dbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dc2:	4676      	mov	r6, lr
 8008dc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008dc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008dcc:	f1bc 0f09 	cmp.w	ip, #9
 8008dd0:	d816      	bhi.n	8008e00 <_strtol_l.constprop.0+0xa4>
 8008dd2:	4664      	mov	r4, ip
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	dd24      	ble.n	8008e22 <_strtol_l.constprop.0+0xc6>
 8008dd8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008ddc:	d008      	beq.n	8008df0 <_strtol_l.constprop.0+0x94>
 8008dde:	45b1      	cmp	r9, r6
 8008de0:	d31c      	bcc.n	8008e1c <_strtol_l.constprop.0+0xc0>
 8008de2:	d101      	bne.n	8008de8 <_strtol_l.constprop.0+0x8c>
 8008de4:	45a2      	cmp	sl, r4
 8008de6:	db19      	blt.n	8008e1c <_strtol_l.constprop.0+0xc0>
 8008de8:	fb06 4603 	mla	r6, r6, r3, r4
 8008dec:	f04f 0e01 	mov.w	lr, #1
 8008df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008df4:	e7e8      	b.n	8008dc8 <_strtol_l.constprop.0+0x6c>
 8008df6:	2c2b      	cmp	r4, #43	; 0x2b
 8008df8:	bf04      	itt	eq
 8008dfa:	782c      	ldrbeq	r4, [r5, #0]
 8008dfc:	1cb5      	addeq	r5, r6, #2
 8008dfe:	e7ca      	b.n	8008d96 <_strtol_l.constprop.0+0x3a>
 8008e00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e04:	f1bc 0f19 	cmp.w	ip, #25
 8008e08:	d801      	bhi.n	8008e0e <_strtol_l.constprop.0+0xb2>
 8008e0a:	3c37      	subs	r4, #55	; 0x37
 8008e0c:	e7e2      	b.n	8008dd4 <_strtol_l.constprop.0+0x78>
 8008e0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e12:	f1bc 0f19 	cmp.w	ip, #25
 8008e16:	d804      	bhi.n	8008e22 <_strtol_l.constprop.0+0xc6>
 8008e18:	3c57      	subs	r4, #87	; 0x57
 8008e1a:	e7db      	b.n	8008dd4 <_strtol_l.constprop.0+0x78>
 8008e1c:	f04f 3eff 	mov.w	lr, #4294967295
 8008e20:	e7e6      	b.n	8008df0 <_strtol_l.constprop.0+0x94>
 8008e22:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e26:	d105      	bne.n	8008e34 <_strtol_l.constprop.0+0xd8>
 8008e28:	2322      	movs	r3, #34	; 0x22
 8008e2a:	6003      	str	r3, [r0, #0]
 8008e2c:	4646      	mov	r6, r8
 8008e2e:	b942      	cbnz	r2, 8008e42 <_strtol_l.constprop.0+0xe6>
 8008e30:	4630      	mov	r0, r6
 8008e32:	e79e      	b.n	8008d72 <_strtol_l.constprop.0+0x16>
 8008e34:	b107      	cbz	r7, 8008e38 <_strtol_l.constprop.0+0xdc>
 8008e36:	4276      	negs	r6, r6
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d0f9      	beq.n	8008e30 <_strtol_l.constprop.0+0xd4>
 8008e3c:	f1be 0f00 	cmp.w	lr, #0
 8008e40:	d000      	beq.n	8008e44 <_strtol_l.constprop.0+0xe8>
 8008e42:	1e69      	subs	r1, r5, #1
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	e7f3      	b.n	8008e30 <_strtol_l.constprop.0+0xd4>
 8008e48:	2430      	movs	r4, #48	; 0x30
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1b1      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e4e:	2308      	movs	r3, #8
 8008e50:	e7af      	b.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e52:	2c30      	cmp	r4, #48	; 0x30
 8008e54:	d0a5      	beq.n	8008da2 <_strtol_l.constprop.0+0x46>
 8008e56:	230a      	movs	r3, #10
 8008e58:	e7ab      	b.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e5a:	bf00      	nop
 8008e5c:	0800a3e9 	.word	0x0800a3e9

08008e60 <_strtol_r>:
 8008e60:	f7ff bf7c 	b.w	8008d5c <_strtol_l.constprop.0>

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	42be      	cmp	r6, r7
 8008e6e:	680b      	ldr	r3, [r1, #0]
 8008e70:	4682      	mov	sl, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4690      	mov	r8, r2
 8008e76:	d82c      	bhi.n	8008ed2 <__ssputs_r+0x6e>
 8008e78:	898a      	ldrh	r2, [r1, #12]
 8008e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e7e:	d026      	beq.n	8008ece <__ssputs_r+0x6a>
 8008e80:	6965      	ldr	r5, [r4, #20]
 8008e82:	6909      	ldr	r1, [r1, #16]
 8008e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e88:	eba3 0901 	sub.w	r9, r3, r1
 8008e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e90:	1c7b      	adds	r3, r7, #1
 8008e92:	444b      	add	r3, r9
 8008e94:	106d      	asrs	r5, r5, #1
 8008e96:	429d      	cmp	r5, r3
 8008e98:	bf38      	it	cc
 8008e9a:	461d      	movcc	r5, r3
 8008e9c:	0553      	lsls	r3, r2, #21
 8008e9e:	d527      	bpl.n	8008ef0 <__ssputs_r+0x8c>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7fe fc0f 	bl	80076c4 <_malloc_r>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	b360      	cbz	r0, 8008f04 <__ssputs_r+0xa0>
 8008eaa:	6921      	ldr	r1, [r4, #16]
 8008eac:	464a      	mov	r2, r9
 8008eae:	f7fd fd05 	bl	80068bc <memcpy>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6126      	str	r6, [r4, #16]
 8008ec0:	6165      	str	r5, [r4, #20]
 8008ec2:	444e      	add	r6, r9
 8008ec4:	eba5 0509 	sub.w	r5, r5, r9
 8008ec8:	6026      	str	r6, [r4, #0]
 8008eca:	60a5      	str	r5, [r4, #8]
 8008ecc:	463e      	mov	r6, r7
 8008ece:	42be      	cmp	r6, r7
 8008ed0:	d900      	bls.n	8008ed4 <__ssputs_r+0x70>
 8008ed2:	463e      	mov	r6, r7
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	4641      	mov	r1, r8
 8008eda:	f000 f9c9 	bl	8009270 <memmove>
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	1b9b      	subs	r3, r3, r6
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	4433      	add	r3, r6
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	2000      	movs	r0, #0
 8008eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	f000 fd9e 	bl	8009a32 <_realloc_r>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d1e0      	bne.n	8008ebe <__ssputs_r+0x5a>
 8008efc:	6921      	ldr	r1, [r4, #16]
 8008efe:	4650      	mov	r0, sl
 8008f00:	f7fe fb6c 	bl	80075dc <_free_r>
 8008f04:	230c      	movs	r3, #12
 8008f06:	f8ca 3000 	str.w	r3, [sl]
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295
 8008f16:	e7e9      	b.n	8008eec <__ssputs_r+0x88>

08008f18 <_svfiprintf_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4698      	mov	r8, r3
 8008f1e:	898b      	ldrh	r3, [r1, #12]
 8008f20:	061b      	lsls	r3, r3, #24
 8008f22:	b09d      	sub	sp, #116	; 0x74
 8008f24:	4607      	mov	r7, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	d50e      	bpl.n	8008f4a <_svfiprintf_r+0x32>
 8008f2c:	690b      	ldr	r3, [r1, #16]
 8008f2e:	b963      	cbnz	r3, 8008f4a <_svfiprintf_r+0x32>
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	f7fe fbc7 	bl	80076c4 <_malloc_r>
 8008f36:	6028      	str	r0, [r5, #0]
 8008f38:	6128      	str	r0, [r5, #16]
 8008f3a:	b920      	cbnz	r0, 8008f46 <_svfiprintf_r+0x2e>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e0d0      	b.n	80090e8 <_svfiprintf_r+0x1d0>
 8008f46:	2340      	movs	r3, #64	; 0x40
 8008f48:	616b      	str	r3, [r5, #20]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4e:	2320      	movs	r3, #32
 8008f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f58:	2330      	movs	r3, #48	; 0x30
 8008f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009100 <_svfiprintf_r+0x1e8>
 8008f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f62:	f04f 0901 	mov.w	r9, #1
 8008f66:	4623      	mov	r3, r4
 8008f68:	469a      	mov	sl, r3
 8008f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6e:	b10a      	cbz	r2, 8008f74 <_svfiprintf_r+0x5c>
 8008f70:	2a25      	cmp	r2, #37	; 0x25
 8008f72:	d1f9      	bne.n	8008f68 <_svfiprintf_r+0x50>
 8008f74:	ebba 0b04 	subs.w	fp, sl, r4
 8008f78:	d00b      	beq.n	8008f92 <_svfiprintf_r+0x7a>
 8008f7a:	465b      	mov	r3, fp
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff ff6f 	bl	8008e64 <__ssputs_r>
 8008f86:	3001      	adds	r0, #1
 8008f88:	f000 80a9 	beq.w	80090de <_svfiprintf_r+0x1c6>
 8008f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f8e:	445a      	add	r2, fp
 8008f90:	9209      	str	r2, [sp, #36]	; 0x24
 8008f92:	f89a 3000 	ldrb.w	r3, [sl]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80a1 	beq.w	80090de <_svfiprintf_r+0x1c6>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa6:	f10a 0a01 	add.w	sl, sl, #1
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	9307      	str	r3, [sp, #28]
 8008fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb4:	4654      	mov	r4, sl
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbc:	4850      	ldr	r0, [pc, #320]	; (8009100 <_svfiprintf_r+0x1e8>)
 8008fbe:	f7f7 f90f 	bl	80001e0 <memchr>
 8008fc2:	9a04      	ldr	r2, [sp, #16]
 8008fc4:	b9d8      	cbnz	r0, 8008ffe <_svfiprintf_r+0xe6>
 8008fc6:	06d0      	lsls	r0, r2, #27
 8008fc8:	bf44      	itt	mi
 8008fca:	2320      	movmi	r3, #32
 8008fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd0:	0711      	lsls	r1, r2, #28
 8008fd2:	bf44      	itt	mi
 8008fd4:	232b      	movmi	r3, #43	; 0x2b
 8008fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fda:	f89a 3000 	ldrb.w	r3, [sl]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d015      	beq.n	800900e <_svfiprintf_r+0xf6>
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f04f 0c0a 	mov.w	ip, #10
 8008fec:	4621      	mov	r1, r4
 8008fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff2:	3b30      	subs	r3, #48	; 0x30
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	d94d      	bls.n	8009094 <_svfiprintf_r+0x17c>
 8008ff8:	b1b0      	cbz	r0, 8009028 <_svfiprintf_r+0x110>
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	e014      	b.n	8009028 <_svfiprintf_r+0x110>
 8008ffe:	eba0 0308 	sub.w	r3, r0, r8
 8009002:	fa09 f303 	lsl.w	r3, r9, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	46a2      	mov	sl, r4
 800900c:	e7d2      	b.n	8008fb4 <_svfiprintf_r+0x9c>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	1d19      	adds	r1, r3, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	9103      	str	r1, [sp, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfbb      	ittet	lt
 800901a:	425b      	neglt	r3, r3
 800901c:	f042 0202 	orrlt.w	r2, r2, #2
 8009020:	9307      	strge	r3, [sp, #28]
 8009022:	9307      	strlt	r3, [sp, #28]
 8009024:	bfb8      	it	lt
 8009026:	9204      	strlt	r2, [sp, #16]
 8009028:	7823      	ldrb	r3, [r4, #0]
 800902a:	2b2e      	cmp	r3, #46	; 0x2e
 800902c:	d10c      	bne.n	8009048 <_svfiprintf_r+0x130>
 800902e:	7863      	ldrb	r3, [r4, #1]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d134      	bne.n	800909e <_svfiprintf_r+0x186>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	1d1a      	adds	r2, r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb8      	it	lt
 8009040:	f04f 33ff 	movlt.w	r3, #4294967295
 8009044:	3402      	adds	r4, #2
 8009046:	9305      	str	r3, [sp, #20]
 8009048:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009110 <_svfiprintf_r+0x1f8>
 800904c:	7821      	ldrb	r1, [r4, #0]
 800904e:	2203      	movs	r2, #3
 8009050:	4650      	mov	r0, sl
 8009052:	f7f7 f8c5 	bl	80001e0 <memchr>
 8009056:	b138      	cbz	r0, 8009068 <_svfiprintf_r+0x150>
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	eba0 000a 	sub.w	r0, r0, sl
 800905e:	2240      	movs	r2, #64	; 0x40
 8009060:	4082      	lsls	r2, r0
 8009062:	4313      	orrs	r3, r2
 8009064:	3401      	adds	r4, #1
 8009066:	9304      	str	r3, [sp, #16]
 8009068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906c:	4825      	ldr	r0, [pc, #148]	; (8009104 <_svfiprintf_r+0x1ec>)
 800906e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009072:	2206      	movs	r2, #6
 8009074:	f7f7 f8b4 	bl	80001e0 <memchr>
 8009078:	2800      	cmp	r0, #0
 800907a:	d038      	beq.n	80090ee <_svfiprintf_r+0x1d6>
 800907c:	4b22      	ldr	r3, [pc, #136]	; (8009108 <_svfiprintf_r+0x1f0>)
 800907e:	bb1b      	cbnz	r3, 80090c8 <_svfiprintf_r+0x1b0>
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	3307      	adds	r3, #7
 8009084:	f023 0307 	bic.w	r3, r3, #7
 8009088:	3308      	adds	r3, #8
 800908a:	9303      	str	r3, [sp, #12]
 800908c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908e:	4433      	add	r3, r6
 8009090:	9309      	str	r3, [sp, #36]	; 0x24
 8009092:	e768      	b.n	8008f66 <_svfiprintf_r+0x4e>
 8009094:	fb0c 3202 	mla	r2, ip, r2, r3
 8009098:	460c      	mov	r4, r1
 800909a:	2001      	movs	r0, #1
 800909c:	e7a6      	b.n	8008fec <_svfiprintf_r+0xd4>
 800909e:	2300      	movs	r3, #0
 80090a0:	3401      	adds	r4, #1
 80090a2:	9305      	str	r3, [sp, #20]
 80090a4:	4619      	mov	r1, r3
 80090a6:	f04f 0c0a 	mov.w	ip, #10
 80090aa:	4620      	mov	r0, r4
 80090ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b0:	3a30      	subs	r2, #48	; 0x30
 80090b2:	2a09      	cmp	r2, #9
 80090b4:	d903      	bls.n	80090be <_svfiprintf_r+0x1a6>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0c6      	beq.n	8009048 <_svfiprintf_r+0x130>
 80090ba:	9105      	str	r1, [sp, #20]
 80090bc:	e7c4      	b.n	8009048 <_svfiprintf_r+0x130>
 80090be:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c2:	4604      	mov	r4, r0
 80090c4:	2301      	movs	r3, #1
 80090c6:	e7f0      	b.n	80090aa <_svfiprintf_r+0x192>
 80090c8:	ab03      	add	r3, sp, #12
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	462a      	mov	r2, r5
 80090ce:	4b0f      	ldr	r3, [pc, #60]	; (800910c <_svfiprintf_r+0x1f4>)
 80090d0:	a904      	add	r1, sp, #16
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7fc fc6a 	bl	80059ac <_printf_float>
 80090d8:	1c42      	adds	r2, r0, #1
 80090da:	4606      	mov	r6, r0
 80090dc:	d1d6      	bne.n	800908c <_svfiprintf_r+0x174>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	065b      	lsls	r3, r3, #25
 80090e2:	f53f af2d 	bmi.w	8008f40 <_svfiprintf_r+0x28>
 80090e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e8:	b01d      	add	sp, #116	; 0x74
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <_svfiprintf_r+0x1f4>)
 80090f6:	a904      	add	r1, sp, #16
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7fc fefb 	bl	8005ef4 <_printf_i>
 80090fe:	e7eb      	b.n	80090d8 <_svfiprintf_r+0x1c0>
 8009100:	0800a4e9 	.word	0x0800a4e9
 8009104:	0800a4f3 	.word	0x0800a4f3
 8009108:	080059ad 	.word	0x080059ad
 800910c:	08008e65 	.word	0x08008e65
 8009110:	0800a4ef 	.word	0x0800a4ef

08009114 <__sflush_r>:
 8009114:	898a      	ldrh	r2, [r1, #12]
 8009116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	0710      	lsls	r0, r2, #28
 800911e:	460c      	mov	r4, r1
 8009120:	d458      	bmi.n	80091d4 <__sflush_r+0xc0>
 8009122:	684b      	ldr	r3, [r1, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc05      	bgt.n	8009134 <__sflush_r+0x20>
 8009128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc02      	bgt.n	8009134 <__sflush_r+0x20>
 800912e:	2000      	movs	r0, #0
 8009130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009136:	2e00      	cmp	r6, #0
 8009138:	d0f9      	beq.n	800912e <__sflush_r+0x1a>
 800913a:	2300      	movs	r3, #0
 800913c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009140:	682f      	ldr	r7, [r5, #0]
 8009142:	6a21      	ldr	r1, [r4, #32]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	d032      	beq.n	80091ae <__sflush_r+0x9a>
 8009148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	075a      	lsls	r2, r3, #29
 800914e:	d505      	bpl.n	800915c <__sflush_r+0x48>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	1ac0      	subs	r0, r0, r3
 8009154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009156:	b10b      	cbz	r3, 800915c <__sflush_r+0x48>
 8009158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915a:	1ac0      	subs	r0, r0, r3
 800915c:	2300      	movs	r3, #0
 800915e:	4602      	mov	r2, r0
 8009160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009162:	6a21      	ldr	r1, [r4, #32]
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	d106      	bne.n	800917c <__sflush_r+0x68>
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	291d      	cmp	r1, #29
 8009172:	d82b      	bhi.n	80091cc <__sflush_r+0xb8>
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <__sflush_r+0x108>)
 8009176:	410a      	asrs	r2, r1
 8009178:	07d6      	lsls	r6, r2, #31
 800917a:	d427      	bmi.n	80091cc <__sflush_r+0xb8>
 800917c:	2200      	movs	r2, #0
 800917e:	6062      	str	r2, [r4, #4]
 8009180:	04d9      	lsls	r1, r3, #19
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	d504      	bpl.n	8009192 <__sflush_r+0x7e>
 8009188:	1c42      	adds	r2, r0, #1
 800918a:	d101      	bne.n	8009190 <__sflush_r+0x7c>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b903      	cbnz	r3, 8009192 <__sflush_r+0x7e>
 8009190:	6560      	str	r0, [r4, #84]	; 0x54
 8009192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009194:	602f      	str	r7, [r5, #0]
 8009196:	2900      	cmp	r1, #0
 8009198:	d0c9      	beq.n	800912e <__sflush_r+0x1a>
 800919a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800919e:	4299      	cmp	r1, r3
 80091a0:	d002      	beq.n	80091a8 <__sflush_r+0x94>
 80091a2:	4628      	mov	r0, r5
 80091a4:	f7fe fa1a 	bl	80075dc <_free_r>
 80091a8:	2000      	movs	r0, #0
 80091aa:	6360      	str	r0, [r4, #52]	; 0x34
 80091ac:	e7c0      	b.n	8009130 <__sflush_r+0x1c>
 80091ae:	2301      	movs	r3, #1
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b0      	blx	r6
 80091b4:	1c41      	adds	r1, r0, #1
 80091b6:	d1c8      	bne.n	800914a <__sflush_r+0x36>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0c5      	beq.n	800914a <__sflush_r+0x36>
 80091be:	2b1d      	cmp	r3, #29
 80091c0:	d001      	beq.n	80091c6 <__sflush_r+0xb2>
 80091c2:	2b16      	cmp	r3, #22
 80091c4:	d101      	bne.n	80091ca <__sflush_r+0xb6>
 80091c6:	602f      	str	r7, [r5, #0]
 80091c8:	e7b1      	b.n	800912e <__sflush_r+0x1a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	e7ad      	b.n	8009130 <__sflush_r+0x1c>
 80091d4:	690f      	ldr	r7, [r1, #16]
 80091d6:	2f00      	cmp	r7, #0
 80091d8:	d0a9      	beq.n	800912e <__sflush_r+0x1a>
 80091da:	0793      	lsls	r3, r2, #30
 80091dc:	680e      	ldr	r6, [r1, #0]
 80091de:	bf08      	it	eq
 80091e0:	694b      	ldreq	r3, [r1, #20]
 80091e2:	600f      	str	r7, [r1, #0]
 80091e4:	bf18      	it	ne
 80091e6:	2300      	movne	r3, #0
 80091e8:	eba6 0807 	sub.w	r8, r6, r7
 80091ec:	608b      	str	r3, [r1, #8]
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	dd9c      	ble.n	800912e <__sflush_r+0x1a>
 80091f4:	6a21      	ldr	r1, [r4, #32]
 80091f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091f8:	4643      	mov	r3, r8
 80091fa:	463a      	mov	r2, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b0      	blx	r6
 8009200:	2800      	cmp	r0, #0
 8009202:	dc06      	bgt.n	8009212 <__sflush_r+0xfe>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e78e      	b.n	8009130 <__sflush_r+0x1c>
 8009212:	4407      	add	r7, r0
 8009214:	eba8 0800 	sub.w	r8, r8, r0
 8009218:	e7e9      	b.n	80091ee <__sflush_r+0xda>
 800921a:	bf00      	nop
 800921c:	dfbffffe 	.word	0xdfbffffe

08009220 <_fflush_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	4605      	mov	r5, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b913      	cbnz	r3, 8009230 <_fflush_r+0x10>
 800922a:	2500      	movs	r5, #0
 800922c:	4628      	mov	r0, r5
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	b118      	cbz	r0, 800923a <_fflush_r+0x1a>
 8009232:	6a03      	ldr	r3, [r0, #32]
 8009234:	b90b      	cbnz	r3, 800923a <_fflush_r+0x1a>
 8009236:	f7fd fa09 	bl	800664c <__sinit>
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f3      	beq.n	800922a <_fflush_r+0xa>
 8009242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d404      	bmi.n	8009252 <_fflush_r+0x32>
 8009248:	0599      	lsls	r1, r3, #22
 800924a:	d402      	bmi.n	8009252 <_fflush_r+0x32>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f7fd fb33 	bl	80068b8 <__retarget_lock_acquire_recursive>
 8009252:	4628      	mov	r0, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff ff5d 	bl	8009114 <__sflush_r>
 800925a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	4605      	mov	r5, r0
 8009260:	d4e4      	bmi.n	800922c <_fflush_r+0xc>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d4e1      	bmi.n	800922c <_fflush_r+0xc>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f7fd fb26 	bl	80068ba <__retarget_lock_release_recursive>
 800926e:	e7dd      	b.n	800922c <_fflush_r+0xc>

08009270 <memmove>:
 8009270:	4288      	cmp	r0, r1
 8009272:	b510      	push	{r4, lr}
 8009274:	eb01 0402 	add.w	r4, r1, r2
 8009278:	d902      	bls.n	8009280 <memmove+0x10>
 800927a:	4284      	cmp	r4, r0
 800927c:	4623      	mov	r3, r4
 800927e:	d807      	bhi.n	8009290 <memmove+0x20>
 8009280:	1e43      	subs	r3, r0, #1
 8009282:	42a1      	cmp	r1, r4
 8009284:	d008      	beq.n	8009298 <memmove+0x28>
 8009286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800928a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928e:	e7f8      	b.n	8009282 <memmove+0x12>
 8009290:	4402      	add	r2, r0
 8009292:	4601      	mov	r1, r0
 8009294:	428a      	cmp	r2, r1
 8009296:	d100      	bne.n	800929a <memmove+0x2a>
 8009298:	bd10      	pop	{r4, pc}
 800929a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800929e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092a2:	e7f7      	b.n	8009294 <memmove+0x24>

080092a4 <strncmp>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	b16a      	cbz	r2, 80092c4 <strncmp+0x20>
 80092a8:	3901      	subs	r1, #1
 80092aa:	1884      	adds	r4, r0, r2
 80092ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d103      	bne.n	80092c0 <strncmp+0x1c>
 80092b8:	42a0      	cmp	r0, r4
 80092ba:	d001      	beq.n	80092c0 <strncmp+0x1c>
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d1f5      	bne.n	80092ac <strncmp+0x8>
 80092c0:	1ad0      	subs	r0, r2, r3
 80092c2:	bd10      	pop	{r4, pc}
 80092c4:	4610      	mov	r0, r2
 80092c6:	e7fc      	b.n	80092c2 <strncmp+0x1e>

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_sbrk_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f8 fafe 	bl	80018d4 <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200050a4 	.word	0x200050a4

080092e8 <nan>:
 80092e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092f0 <nan+0x8>
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	00000000 	.word	0x00000000
 80092f4:	7ff80000 	.word	0x7ff80000

080092f8 <__assert_func>:
 80092f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092fa:	4614      	mov	r4, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <__assert_func+0x2c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4605      	mov	r5, r0
 8009304:	68d8      	ldr	r0, [r3, #12]
 8009306:	b14c      	cbz	r4, 800931c <__assert_func+0x24>
 8009308:	4b07      	ldr	r3, [pc, #28]	; (8009328 <__assert_func+0x30>)
 800930a:	9100      	str	r1, [sp, #0]
 800930c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009310:	4906      	ldr	r1, [pc, #24]	; (800932c <__assert_func+0x34>)
 8009312:	462b      	mov	r3, r5
 8009314:	f000 fbca 	bl	8009aac <fiprintf>
 8009318:	f000 fbda 	bl	8009ad0 <abort>
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <__assert_func+0x38>)
 800931e:	461c      	mov	r4, r3
 8009320:	e7f3      	b.n	800930a <__assert_func+0x12>
 8009322:	bf00      	nop
 8009324:	20000068 	.word	0x20000068
 8009328:	0800a502 	.word	0x0800a502
 800932c:	0800a50f 	.word	0x0800a50f
 8009330:	0800a53d 	.word	0x0800a53d

08009334 <_calloc_r>:
 8009334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009336:	fba1 2402 	umull	r2, r4, r1, r2
 800933a:	b94c      	cbnz	r4, 8009350 <_calloc_r+0x1c>
 800933c:	4611      	mov	r1, r2
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	f7fe f9c0 	bl	80076c4 <_malloc_r>
 8009344:	9a01      	ldr	r2, [sp, #4]
 8009346:	4605      	mov	r5, r0
 8009348:	b930      	cbnz	r0, 8009358 <_calloc_r+0x24>
 800934a:	4628      	mov	r0, r5
 800934c:	b003      	add	sp, #12
 800934e:	bd30      	pop	{r4, r5, pc}
 8009350:	220c      	movs	r2, #12
 8009352:	6002      	str	r2, [r0, #0]
 8009354:	2500      	movs	r5, #0
 8009356:	e7f8      	b.n	800934a <_calloc_r+0x16>
 8009358:	4621      	mov	r1, r4
 800935a:	f7fd fa31 	bl	80067c0 <memset>
 800935e:	e7f4      	b.n	800934a <_calloc_r+0x16>

08009360 <rshift>:
 8009360:	6903      	ldr	r3, [r0, #16]
 8009362:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800936a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800936e:	f100 0414 	add.w	r4, r0, #20
 8009372:	dd45      	ble.n	8009400 <rshift+0xa0>
 8009374:	f011 011f 	ands.w	r1, r1, #31
 8009378:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800937c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009380:	d10c      	bne.n	800939c <rshift+0x3c>
 8009382:	f100 0710 	add.w	r7, r0, #16
 8009386:	4629      	mov	r1, r5
 8009388:	42b1      	cmp	r1, r6
 800938a:	d334      	bcc.n	80093f6 <rshift+0x96>
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	1eea      	subs	r2, r5, #3
 8009392:	4296      	cmp	r6, r2
 8009394:	bf38      	it	cc
 8009396:	2300      	movcc	r3, #0
 8009398:	4423      	add	r3, r4
 800939a:	e015      	b.n	80093c8 <rshift+0x68>
 800939c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093a0:	f1c1 0820 	rsb	r8, r1, #32
 80093a4:	40cf      	lsrs	r7, r1
 80093a6:	f105 0e04 	add.w	lr, r5, #4
 80093aa:	46a1      	mov	r9, r4
 80093ac:	4576      	cmp	r6, lr
 80093ae:	46f4      	mov	ip, lr
 80093b0:	d815      	bhi.n	80093de <rshift+0x7e>
 80093b2:	1a9a      	subs	r2, r3, r2
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	3a04      	subs	r2, #4
 80093b8:	3501      	adds	r5, #1
 80093ba:	42ae      	cmp	r6, r5
 80093bc:	bf38      	it	cc
 80093be:	2200      	movcc	r2, #0
 80093c0:	18a3      	adds	r3, r4, r2
 80093c2:	50a7      	str	r7, [r4, r2]
 80093c4:	b107      	cbz	r7, 80093c8 <rshift+0x68>
 80093c6:	3304      	adds	r3, #4
 80093c8:	1b1a      	subs	r2, r3, r4
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093d0:	bf08      	it	eq
 80093d2:	2300      	moveq	r3, #0
 80093d4:	6102      	str	r2, [r0, #16]
 80093d6:	bf08      	it	eq
 80093d8:	6143      	streq	r3, [r0, #20]
 80093da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093de:	f8dc c000 	ldr.w	ip, [ip]
 80093e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80093e6:	ea4c 0707 	orr.w	r7, ip, r7
 80093ea:	f849 7b04 	str.w	r7, [r9], #4
 80093ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093f2:	40cf      	lsrs	r7, r1
 80093f4:	e7da      	b.n	80093ac <rshift+0x4c>
 80093f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80093fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80093fe:	e7c3      	b.n	8009388 <rshift+0x28>
 8009400:	4623      	mov	r3, r4
 8009402:	e7e1      	b.n	80093c8 <rshift+0x68>

08009404 <__hexdig_fun>:
 8009404:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009408:	2b09      	cmp	r3, #9
 800940a:	d802      	bhi.n	8009412 <__hexdig_fun+0xe>
 800940c:	3820      	subs	r0, #32
 800940e:	b2c0      	uxtb	r0, r0
 8009410:	4770      	bx	lr
 8009412:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009416:	2b05      	cmp	r3, #5
 8009418:	d801      	bhi.n	800941e <__hexdig_fun+0x1a>
 800941a:	3847      	subs	r0, #71	; 0x47
 800941c:	e7f7      	b.n	800940e <__hexdig_fun+0xa>
 800941e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009422:	2b05      	cmp	r3, #5
 8009424:	d801      	bhi.n	800942a <__hexdig_fun+0x26>
 8009426:	3827      	subs	r0, #39	; 0x27
 8009428:	e7f1      	b.n	800940e <__hexdig_fun+0xa>
 800942a:	2000      	movs	r0, #0
 800942c:	4770      	bx	lr
	...

08009430 <__gethex>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	4617      	mov	r7, r2
 8009436:	680a      	ldr	r2, [r1, #0]
 8009438:	b085      	sub	sp, #20
 800943a:	f102 0b02 	add.w	fp, r2, #2
 800943e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009446:	4681      	mov	r9, r0
 8009448:	468a      	mov	sl, r1
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	32fe      	adds	r2, #254	; 0xfe
 800944e:	eb02 030b 	add.w	r3, r2, fp
 8009452:	46d8      	mov	r8, fp
 8009454:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	2830      	cmp	r0, #48	; 0x30
 800945c:	d0f7      	beq.n	800944e <__gethex+0x1e>
 800945e:	f7ff ffd1 	bl	8009404 <__hexdig_fun>
 8009462:	4604      	mov	r4, r0
 8009464:	2800      	cmp	r0, #0
 8009466:	d138      	bne.n	80094da <__gethex+0xaa>
 8009468:	49a7      	ldr	r1, [pc, #668]	; (8009708 <__gethex+0x2d8>)
 800946a:	2201      	movs	r2, #1
 800946c:	4640      	mov	r0, r8
 800946e:	f7ff ff19 	bl	80092a4 <strncmp>
 8009472:	4606      	mov	r6, r0
 8009474:	2800      	cmp	r0, #0
 8009476:	d169      	bne.n	800954c <__gethex+0x11c>
 8009478:	f898 0001 	ldrb.w	r0, [r8, #1]
 800947c:	465d      	mov	r5, fp
 800947e:	f7ff ffc1 	bl	8009404 <__hexdig_fun>
 8009482:	2800      	cmp	r0, #0
 8009484:	d064      	beq.n	8009550 <__gethex+0x120>
 8009486:	465a      	mov	r2, fp
 8009488:	7810      	ldrb	r0, [r2, #0]
 800948a:	2830      	cmp	r0, #48	; 0x30
 800948c:	4690      	mov	r8, r2
 800948e:	f102 0201 	add.w	r2, r2, #1
 8009492:	d0f9      	beq.n	8009488 <__gethex+0x58>
 8009494:	f7ff ffb6 	bl	8009404 <__hexdig_fun>
 8009498:	2301      	movs	r3, #1
 800949a:	fab0 f480 	clz	r4, r0
 800949e:	0964      	lsrs	r4, r4, #5
 80094a0:	465e      	mov	r6, fp
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	4642      	mov	r2, r8
 80094a6:	4615      	mov	r5, r2
 80094a8:	3201      	adds	r2, #1
 80094aa:	7828      	ldrb	r0, [r5, #0]
 80094ac:	f7ff ffaa 	bl	8009404 <__hexdig_fun>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1f8      	bne.n	80094a6 <__gethex+0x76>
 80094b4:	4994      	ldr	r1, [pc, #592]	; (8009708 <__gethex+0x2d8>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff fef3 	bl	80092a4 <strncmp>
 80094be:	b978      	cbnz	r0, 80094e0 <__gethex+0xb0>
 80094c0:	b946      	cbnz	r6, 80094d4 <__gethex+0xa4>
 80094c2:	1c6e      	adds	r6, r5, #1
 80094c4:	4632      	mov	r2, r6
 80094c6:	4615      	mov	r5, r2
 80094c8:	3201      	adds	r2, #1
 80094ca:	7828      	ldrb	r0, [r5, #0]
 80094cc:	f7ff ff9a 	bl	8009404 <__hexdig_fun>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d1f8      	bne.n	80094c6 <__gethex+0x96>
 80094d4:	1b73      	subs	r3, r6, r5
 80094d6:	009e      	lsls	r6, r3, #2
 80094d8:	e004      	b.n	80094e4 <__gethex+0xb4>
 80094da:	2400      	movs	r4, #0
 80094dc:	4626      	mov	r6, r4
 80094de:	e7e1      	b.n	80094a4 <__gethex+0x74>
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	d1f7      	bne.n	80094d4 <__gethex+0xa4>
 80094e4:	782b      	ldrb	r3, [r5, #0]
 80094e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094ea:	2b50      	cmp	r3, #80	; 0x50
 80094ec:	d13d      	bne.n	800956a <__gethex+0x13a>
 80094ee:	786b      	ldrb	r3, [r5, #1]
 80094f0:	2b2b      	cmp	r3, #43	; 0x2b
 80094f2:	d02f      	beq.n	8009554 <__gethex+0x124>
 80094f4:	2b2d      	cmp	r3, #45	; 0x2d
 80094f6:	d031      	beq.n	800955c <__gethex+0x12c>
 80094f8:	1c69      	adds	r1, r5, #1
 80094fa:	f04f 0b00 	mov.w	fp, #0
 80094fe:	7808      	ldrb	r0, [r1, #0]
 8009500:	f7ff ff80 	bl	8009404 <__hexdig_fun>
 8009504:	1e42      	subs	r2, r0, #1
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	2a18      	cmp	r2, #24
 800950a:	d82e      	bhi.n	800956a <__gethex+0x13a>
 800950c:	f1a0 0210 	sub.w	r2, r0, #16
 8009510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009514:	f7ff ff76 	bl	8009404 <__hexdig_fun>
 8009518:	f100 3cff 	add.w	ip, r0, #4294967295
 800951c:	fa5f fc8c 	uxtb.w	ip, ip
 8009520:	f1bc 0f18 	cmp.w	ip, #24
 8009524:	d91d      	bls.n	8009562 <__gethex+0x132>
 8009526:	f1bb 0f00 	cmp.w	fp, #0
 800952a:	d000      	beq.n	800952e <__gethex+0xfe>
 800952c:	4252      	negs	r2, r2
 800952e:	4416      	add	r6, r2
 8009530:	f8ca 1000 	str.w	r1, [sl]
 8009534:	b1dc      	cbz	r4, 800956e <__gethex+0x13e>
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf14      	ite	ne
 800953c:	f04f 0800 	movne.w	r8, #0
 8009540:	f04f 0806 	moveq.w	r8, #6
 8009544:	4640      	mov	r0, r8
 8009546:	b005      	add	sp, #20
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	4645      	mov	r5, r8
 800954e:	4626      	mov	r6, r4
 8009550:	2401      	movs	r4, #1
 8009552:	e7c7      	b.n	80094e4 <__gethex+0xb4>
 8009554:	f04f 0b00 	mov.w	fp, #0
 8009558:	1ca9      	adds	r1, r5, #2
 800955a:	e7d0      	b.n	80094fe <__gethex+0xce>
 800955c:	f04f 0b01 	mov.w	fp, #1
 8009560:	e7fa      	b.n	8009558 <__gethex+0x128>
 8009562:	230a      	movs	r3, #10
 8009564:	fb03 0002 	mla	r0, r3, r2, r0
 8009568:	e7d0      	b.n	800950c <__gethex+0xdc>
 800956a:	4629      	mov	r1, r5
 800956c:	e7e0      	b.n	8009530 <__gethex+0x100>
 800956e:	eba5 0308 	sub.w	r3, r5, r8
 8009572:	3b01      	subs	r3, #1
 8009574:	4621      	mov	r1, r4
 8009576:	2b07      	cmp	r3, #7
 8009578:	dc0a      	bgt.n	8009590 <__gethex+0x160>
 800957a:	4648      	mov	r0, r9
 800957c:	f7fe f92e 	bl	80077dc <_Balloc>
 8009580:	4604      	mov	r4, r0
 8009582:	b940      	cbnz	r0, 8009596 <__gethex+0x166>
 8009584:	4b61      	ldr	r3, [pc, #388]	; (800970c <__gethex+0x2dc>)
 8009586:	4602      	mov	r2, r0
 8009588:	21e4      	movs	r1, #228	; 0xe4
 800958a:	4861      	ldr	r0, [pc, #388]	; (8009710 <__gethex+0x2e0>)
 800958c:	f7ff feb4 	bl	80092f8 <__assert_func>
 8009590:	3101      	adds	r1, #1
 8009592:	105b      	asrs	r3, r3, #1
 8009594:	e7ef      	b.n	8009576 <__gethex+0x146>
 8009596:	f100 0a14 	add.w	sl, r0, #20
 800959a:	2300      	movs	r3, #0
 800959c:	495a      	ldr	r1, [pc, #360]	; (8009708 <__gethex+0x2d8>)
 800959e:	f8cd a004 	str.w	sl, [sp, #4]
 80095a2:	469b      	mov	fp, r3
 80095a4:	45a8      	cmp	r8, r5
 80095a6:	d342      	bcc.n	800962e <__gethex+0x1fe>
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	f840 bb04 	str.w	fp, [r0], #4
 80095ae:	eba0 000a 	sub.w	r0, r0, sl
 80095b2:	1080      	asrs	r0, r0, #2
 80095b4:	6120      	str	r0, [r4, #16]
 80095b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80095ba:	4658      	mov	r0, fp
 80095bc:	f7fe fa00 	bl	80079c0 <__hi0bits>
 80095c0:	683d      	ldr	r5, [r7, #0]
 80095c2:	eba8 0000 	sub.w	r0, r8, r0
 80095c6:	42a8      	cmp	r0, r5
 80095c8:	dd59      	ble.n	800967e <__gethex+0x24e>
 80095ca:	eba0 0805 	sub.w	r8, r0, r5
 80095ce:	4641      	mov	r1, r8
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7fe fd8f 	bl	80080f4 <__any_on>
 80095d6:	4683      	mov	fp, r0
 80095d8:	b1b8      	cbz	r0, 800960a <__gethex+0x1da>
 80095da:	f108 33ff 	add.w	r3, r8, #4294967295
 80095de:	1159      	asrs	r1, r3, #5
 80095e0:	f003 021f 	and.w	r2, r3, #31
 80095e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095e8:	f04f 0b01 	mov.w	fp, #1
 80095ec:	fa0b f202 	lsl.w	r2, fp, r2
 80095f0:	420a      	tst	r2, r1
 80095f2:	d00a      	beq.n	800960a <__gethex+0x1da>
 80095f4:	455b      	cmp	r3, fp
 80095f6:	dd06      	ble.n	8009606 <__gethex+0x1d6>
 80095f8:	f1a8 0102 	sub.w	r1, r8, #2
 80095fc:	4620      	mov	r0, r4
 80095fe:	f7fe fd79 	bl	80080f4 <__any_on>
 8009602:	2800      	cmp	r0, #0
 8009604:	d138      	bne.n	8009678 <__gethex+0x248>
 8009606:	f04f 0b02 	mov.w	fp, #2
 800960a:	4641      	mov	r1, r8
 800960c:	4620      	mov	r0, r4
 800960e:	f7ff fea7 	bl	8009360 <rshift>
 8009612:	4446      	add	r6, r8
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	42b3      	cmp	r3, r6
 8009618:	da41      	bge.n	800969e <__gethex+0x26e>
 800961a:	4621      	mov	r1, r4
 800961c:	4648      	mov	r0, r9
 800961e:	f7fe f91d 	bl	800785c <_Bfree>
 8009622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009624:	2300      	movs	r3, #0
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800962c:	e78a      	b.n	8009544 <__gethex+0x114>
 800962e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009632:	2a2e      	cmp	r2, #46	; 0x2e
 8009634:	d014      	beq.n	8009660 <__gethex+0x230>
 8009636:	2b20      	cmp	r3, #32
 8009638:	d106      	bne.n	8009648 <__gethex+0x218>
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	f843 bb04 	str.w	fp, [r3], #4
 8009640:	f04f 0b00 	mov.w	fp, #0
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	465b      	mov	r3, fp
 8009648:	7828      	ldrb	r0, [r5, #0]
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	f7ff feda 	bl	8009404 <__hexdig_fun>
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	f000 000f 	and.w	r0, r0, #15
 8009656:	4098      	lsls	r0, r3
 8009658:	ea4b 0b00 	orr.w	fp, fp, r0
 800965c:	3304      	adds	r3, #4
 800965e:	e7a1      	b.n	80095a4 <__gethex+0x174>
 8009660:	45a8      	cmp	r8, r5
 8009662:	d8e8      	bhi.n	8009636 <__gethex+0x206>
 8009664:	2201      	movs	r2, #1
 8009666:	4628      	mov	r0, r5
 8009668:	9303      	str	r3, [sp, #12]
 800966a:	f7ff fe1b 	bl	80092a4 <strncmp>
 800966e:	4926      	ldr	r1, [pc, #152]	; (8009708 <__gethex+0x2d8>)
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	2800      	cmp	r0, #0
 8009674:	d1df      	bne.n	8009636 <__gethex+0x206>
 8009676:	e795      	b.n	80095a4 <__gethex+0x174>
 8009678:	f04f 0b03 	mov.w	fp, #3
 800967c:	e7c5      	b.n	800960a <__gethex+0x1da>
 800967e:	da0b      	bge.n	8009698 <__gethex+0x268>
 8009680:	eba5 0800 	sub.w	r8, r5, r0
 8009684:	4621      	mov	r1, r4
 8009686:	4642      	mov	r2, r8
 8009688:	4648      	mov	r0, r9
 800968a:	f7fe fb01 	bl	8007c90 <__lshift>
 800968e:	eba6 0608 	sub.w	r6, r6, r8
 8009692:	4604      	mov	r4, r0
 8009694:	f100 0a14 	add.w	sl, r0, #20
 8009698:	f04f 0b00 	mov.w	fp, #0
 800969c:	e7ba      	b.n	8009614 <__gethex+0x1e4>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	42b3      	cmp	r3, r6
 80096a2:	dd73      	ble.n	800978c <__gethex+0x35c>
 80096a4:	1b9e      	subs	r6, r3, r6
 80096a6:	42b5      	cmp	r5, r6
 80096a8:	dc34      	bgt.n	8009714 <__gethex+0x2e4>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d023      	beq.n	80096f8 <__gethex+0x2c8>
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d025      	beq.n	8009700 <__gethex+0x2d0>
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d115      	bne.n	80096e4 <__gethex+0x2b4>
 80096b8:	42b5      	cmp	r5, r6
 80096ba:	d113      	bne.n	80096e4 <__gethex+0x2b4>
 80096bc:	2d01      	cmp	r5, #1
 80096be:	d10b      	bne.n	80096d8 <__gethex+0x2a8>
 80096c0:	9a02      	ldr	r2, [sp, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	2301      	movs	r3, #1
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	f8ca 3000 	str.w	r3, [sl]
 80096ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80096d4:	601c      	str	r4, [r3, #0]
 80096d6:	e735      	b.n	8009544 <__gethex+0x114>
 80096d8:	1e69      	subs	r1, r5, #1
 80096da:	4620      	mov	r0, r4
 80096dc:	f7fe fd0a 	bl	80080f4 <__any_on>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1ed      	bne.n	80096c0 <__gethex+0x290>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4648      	mov	r0, r9
 80096e8:	f7fe f8b8 	bl	800785c <_Bfree>
 80096ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ee:	2300      	movs	r3, #0
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80096f6:	e725      	b.n	8009544 <__gethex+0x114>
 80096f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1f2      	bne.n	80096e4 <__gethex+0x2b4>
 80096fe:	e7df      	b.n	80096c0 <__gethex+0x290>
 8009700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1dc      	bne.n	80096c0 <__gethex+0x290>
 8009706:	e7ed      	b.n	80096e4 <__gethex+0x2b4>
 8009708:	0800a394 	.word	0x0800a394
 800970c:	0800a22d 	.word	0x0800a22d
 8009710:	0800a53e 	.word	0x0800a53e
 8009714:	f106 38ff 	add.w	r8, r6, #4294967295
 8009718:	f1bb 0f00 	cmp.w	fp, #0
 800971c:	d133      	bne.n	8009786 <__gethex+0x356>
 800971e:	f1b8 0f00 	cmp.w	r8, #0
 8009722:	d004      	beq.n	800972e <__gethex+0x2fe>
 8009724:	4641      	mov	r1, r8
 8009726:	4620      	mov	r0, r4
 8009728:	f7fe fce4 	bl	80080f4 <__any_on>
 800972c:	4683      	mov	fp, r0
 800972e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009732:	2301      	movs	r3, #1
 8009734:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009738:	f008 081f 	and.w	r8, r8, #31
 800973c:	fa03 f308 	lsl.w	r3, r3, r8
 8009740:	4213      	tst	r3, r2
 8009742:	4631      	mov	r1, r6
 8009744:	4620      	mov	r0, r4
 8009746:	bf18      	it	ne
 8009748:	f04b 0b02 	orrne.w	fp, fp, #2
 800974c:	1bad      	subs	r5, r5, r6
 800974e:	f7ff fe07 	bl	8009360 <rshift>
 8009752:	687e      	ldr	r6, [r7, #4]
 8009754:	f04f 0802 	mov.w	r8, #2
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	d04a      	beq.n	80097f4 <__gethex+0x3c4>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d016      	beq.n	8009792 <__gethex+0x362>
 8009764:	2b03      	cmp	r3, #3
 8009766:	d018      	beq.n	800979a <__gethex+0x36a>
 8009768:	2b01      	cmp	r3, #1
 800976a:	d109      	bne.n	8009780 <__gethex+0x350>
 800976c:	f01b 0f02 	tst.w	fp, #2
 8009770:	d006      	beq.n	8009780 <__gethex+0x350>
 8009772:	f8da 3000 	ldr.w	r3, [sl]
 8009776:	ea4b 0b03 	orr.w	fp, fp, r3
 800977a:	f01b 0f01 	tst.w	fp, #1
 800977e:	d10f      	bne.n	80097a0 <__gethex+0x370>
 8009780:	f048 0810 	orr.w	r8, r8, #16
 8009784:	e036      	b.n	80097f4 <__gethex+0x3c4>
 8009786:	f04f 0b01 	mov.w	fp, #1
 800978a:	e7d0      	b.n	800972e <__gethex+0x2fe>
 800978c:	f04f 0801 	mov.w	r8, #1
 8009790:	e7e2      	b.n	8009758 <__gethex+0x328>
 8009792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009794:	f1c3 0301 	rsb	r3, r3, #1
 8009798:	930f      	str	r3, [sp, #60]	; 0x3c
 800979a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0ef      	beq.n	8009780 <__gethex+0x350>
 80097a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097a4:	f104 0214 	add.w	r2, r4, #20
 80097a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80097b2:	2300      	movs	r3, #0
 80097b4:	4694      	mov	ip, r2
 80097b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80097ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80097be:	d01e      	beq.n	80097fe <__gethex+0x3ce>
 80097c0:	3101      	adds	r1, #1
 80097c2:	f8cc 1000 	str.w	r1, [ip]
 80097c6:	f1b8 0f02 	cmp.w	r8, #2
 80097ca:	f104 0214 	add.w	r2, r4, #20
 80097ce:	d13d      	bne.n	800984c <__gethex+0x41c>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	d10b      	bne.n	80097f0 <__gethex+0x3c0>
 80097d8:	1169      	asrs	r1, r5, #5
 80097da:	2301      	movs	r3, #1
 80097dc:	f005 051f 	and.w	r5, r5, #31
 80097e0:	fa03 f505 	lsl.w	r5, r3, r5
 80097e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e8:	421d      	tst	r5, r3
 80097ea:	bf18      	it	ne
 80097ec:	f04f 0801 	movne.w	r8, #1
 80097f0:	f048 0820 	orr.w	r8, r8, #32
 80097f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f6:	601c      	str	r4, [r3, #0]
 80097f8:	9b02      	ldr	r3, [sp, #8]
 80097fa:	601e      	str	r6, [r3, #0]
 80097fc:	e6a2      	b.n	8009544 <__gethex+0x114>
 80097fe:	4290      	cmp	r0, r2
 8009800:	f842 3c04 	str.w	r3, [r2, #-4]
 8009804:	d8d6      	bhi.n	80097b4 <__gethex+0x384>
 8009806:	68a2      	ldr	r2, [r4, #8]
 8009808:	4593      	cmp	fp, r2
 800980a:	db17      	blt.n	800983c <__gethex+0x40c>
 800980c:	6861      	ldr	r1, [r4, #4]
 800980e:	4648      	mov	r0, r9
 8009810:	3101      	adds	r1, #1
 8009812:	f7fd ffe3 	bl	80077dc <_Balloc>
 8009816:	4682      	mov	sl, r0
 8009818:	b918      	cbnz	r0, 8009822 <__gethex+0x3f2>
 800981a:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <__gethex+0x458>)
 800981c:	4602      	mov	r2, r0
 800981e:	2184      	movs	r1, #132	; 0x84
 8009820:	e6b3      	b.n	800958a <__gethex+0x15a>
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	3202      	adds	r2, #2
 8009826:	f104 010c 	add.w	r1, r4, #12
 800982a:	0092      	lsls	r2, r2, #2
 800982c:	300c      	adds	r0, #12
 800982e:	f7fd f845 	bl	80068bc <memcpy>
 8009832:	4621      	mov	r1, r4
 8009834:	4648      	mov	r0, r9
 8009836:	f7fe f811 	bl	800785c <_Bfree>
 800983a:	4654      	mov	r4, sl
 800983c:	6922      	ldr	r2, [r4, #16]
 800983e:	1c51      	adds	r1, r2, #1
 8009840:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009844:	6121      	str	r1, [r4, #16]
 8009846:	2101      	movs	r1, #1
 8009848:	6151      	str	r1, [r2, #20]
 800984a:	e7bc      	b.n	80097c6 <__gethex+0x396>
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	4559      	cmp	r1, fp
 8009850:	dd0b      	ble.n	800986a <__gethex+0x43a>
 8009852:	2101      	movs	r1, #1
 8009854:	4620      	mov	r0, r4
 8009856:	f7ff fd83 	bl	8009360 <rshift>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3601      	adds	r6, #1
 800985e:	42b3      	cmp	r3, r6
 8009860:	f6ff aedb 	blt.w	800961a <__gethex+0x1ea>
 8009864:	f04f 0801 	mov.w	r8, #1
 8009868:	e7c2      	b.n	80097f0 <__gethex+0x3c0>
 800986a:	f015 051f 	ands.w	r5, r5, #31
 800986e:	d0f9      	beq.n	8009864 <__gethex+0x434>
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	441a      	add	r2, r3
 8009874:	f1c5 0520 	rsb	r5, r5, #32
 8009878:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800987c:	f7fe f8a0 	bl	80079c0 <__hi0bits>
 8009880:	42a8      	cmp	r0, r5
 8009882:	dbe6      	blt.n	8009852 <__gethex+0x422>
 8009884:	e7ee      	b.n	8009864 <__gethex+0x434>
 8009886:	bf00      	nop
 8009888:	0800a22d 	.word	0x0800a22d

0800988c <L_shift>:
 800988c:	f1c2 0208 	rsb	r2, r2, #8
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	b570      	push	{r4, r5, r6, lr}
 8009894:	f1c2 0620 	rsb	r6, r2, #32
 8009898:	6843      	ldr	r3, [r0, #4]
 800989a:	6804      	ldr	r4, [r0, #0]
 800989c:	fa03 f506 	lsl.w	r5, r3, r6
 80098a0:	432c      	orrs	r4, r5
 80098a2:	40d3      	lsrs	r3, r2
 80098a4:	6004      	str	r4, [r0, #0]
 80098a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80098aa:	4288      	cmp	r0, r1
 80098ac:	d3f4      	bcc.n	8009898 <L_shift+0xc>
 80098ae:	bd70      	pop	{r4, r5, r6, pc}

080098b0 <__match>:
 80098b0:	b530      	push	{r4, r5, lr}
 80098b2:	6803      	ldr	r3, [r0, #0]
 80098b4:	3301      	adds	r3, #1
 80098b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ba:	b914      	cbnz	r4, 80098c2 <__match+0x12>
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	2001      	movs	r0, #1
 80098c0:	bd30      	pop	{r4, r5, pc}
 80098c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098ca:	2d19      	cmp	r5, #25
 80098cc:	bf98      	it	ls
 80098ce:	3220      	addls	r2, #32
 80098d0:	42a2      	cmp	r2, r4
 80098d2:	d0f0      	beq.n	80098b6 <__match+0x6>
 80098d4:	2000      	movs	r0, #0
 80098d6:	e7f3      	b.n	80098c0 <__match+0x10>

080098d8 <__hexnan>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	680b      	ldr	r3, [r1, #0]
 80098de:	6801      	ldr	r1, [r0, #0]
 80098e0:	115e      	asrs	r6, r3, #5
 80098e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098e6:	f013 031f 	ands.w	r3, r3, #31
 80098ea:	b087      	sub	sp, #28
 80098ec:	bf18      	it	ne
 80098ee:	3604      	addne	r6, #4
 80098f0:	2500      	movs	r5, #0
 80098f2:	1f37      	subs	r7, r6, #4
 80098f4:	4682      	mov	sl, r0
 80098f6:	4690      	mov	r8, r2
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80098fe:	46b9      	mov	r9, r7
 8009900:	463c      	mov	r4, r7
 8009902:	9502      	str	r5, [sp, #8]
 8009904:	46ab      	mov	fp, r5
 8009906:	784a      	ldrb	r2, [r1, #1]
 8009908:	1c4b      	adds	r3, r1, #1
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	b342      	cbz	r2, 8009960 <__hexnan+0x88>
 800990e:	4610      	mov	r0, r2
 8009910:	9105      	str	r1, [sp, #20]
 8009912:	9204      	str	r2, [sp, #16]
 8009914:	f7ff fd76 	bl	8009404 <__hexdig_fun>
 8009918:	2800      	cmp	r0, #0
 800991a:	d14f      	bne.n	80099bc <__hexnan+0xe4>
 800991c:	9a04      	ldr	r2, [sp, #16]
 800991e:	9905      	ldr	r1, [sp, #20]
 8009920:	2a20      	cmp	r2, #32
 8009922:	d818      	bhi.n	8009956 <__hexnan+0x7e>
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	459b      	cmp	fp, r3
 8009928:	dd13      	ble.n	8009952 <__hexnan+0x7a>
 800992a:	454c      	cmp	r4, r9
 800992c:	d206      	bcs.n	800993c <__hexnan+0x64>
 800992e:	2d07      	cmp	r5, #7
 8009930:	dc04      	bgt.n	800993c <__hexnan+0x64>
 8009932:	462a      	mov	r2, r5
 8009934:	4649      	mov	r1, r9
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff ffa8 	bl	800988c <L_shift>
 800993c:	4544      	cmp	r4, r8
 800993e:	d950      	bls.n	80099e2 <__hexnan+0x10a>
 8009940:	2300      	movs	r3, #0
 8009942:	f1a4 0904 	sub.w	r9, r4, #4
 8009946:	f844 3c04 	str.w	r3, [r4, #-4]
 800994a:	f8cd b008 	str.w	fp, [sp, #8]
 800994e:	464c      	mov	r4, r9
 8009950:	461d      	mov	r5, r3
 8009952:	9903      	ldr	r1, [sp, #12]
 8009954:	e7d7      	b.n	8009906 <__hexnan+0x2e>
 8009956:	2a29      	cmp	r2, #41	; 0x29
 8009958:	d155      	bne.n	8009a06 <__hexnan+0x12e>
 800995a:	3102      	adds	r1, #2
 800995c:	f8ca 1000 	str.w	r1, [sl]
 8009960:	f1bb 0f00 	cmp.w	fp, #0
 8009964:	d04f      	beq.n	8009a06 <__hexnan+0x12e>
 8009966:	454c      	cmp	r4, r9
 8009968:	d206      	bcs.n	8009978 <__hexnan+0xa0>
 800996a:	2d07      	cmp	r5, #7
 800996c:	dc04      	bgt.n	8009978 <__hexnan+0xa0>
 800996e:	462a      	mov	r2, r5
 8009970:	4649      	mov	r1, r9
 8009972:	4620      	mov	r0, r4
 8009974:	f7ff ff8a 	bl	800988c <L_shift>
 8009978:	4544      	cmp	r4, r8
 800997a:	d934      	bls.n	80099e6 <__hexnan+0x10e>
 800997c:	f1a8 0204 	sub.w	r2, r8, #4
 8009980:	4623      	mov	r3, r4
 8009982:	f853 1b04 	ldr.w	r1, [r3], #4
 8009986:	f842 1f04 	str.w	r1, [r2, #4]!
 800998a:	429f      	cmp	r7, r3
 800998c:	d2f9      	bcs.n	8009982 <__hexnan+0xaa>
 800998e:	1b3b      	subs	r3, r7, r4
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	3304      	adds	r3, #4
 8009996:	3e03      	subs	r6, #3
 8009998:	3401      	adds	r4, #1
 800999a:	42a6      	cmp	r6, r4
 800999c:	bf38      	it	cc
 800999e:	2304      	movcc	r3, #4
 80099a0:	4443      	add	r3, r8
 80099a2:	2200      	movs	r2, #0
 80099a4:	f843 2b04 	str.w	r2, [r3], #4
 80099a8:	429f      	cmp	r7, r3
 80099aa:	d2fb      	bcs.n	80099a4 <__hexnan+0xcc>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	b91b      	cbnz	r3, 80099b8 <__hexnan+0xe0>
 80099b0:	4547      	cmp	r7, r8
 80099b2:	d126      	bne.n	8009a02 <__hexnan+0x12a>
 80099b4:	2301      	movs	r3, #1
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	2005      	movs	r0, #5
 80099ba:	e025      	b.n	8009a08 <__hexnan+0x130>
 80099bc:	3501      	adds	r5, #1
 80099be:	2d08      	cmp	r5, #8
 80099c0:	f10b 0b01 	add.w	fp, fp, #1
 80099c4:	dd06      	ble.n	80099d4 <__hexnan+0xfc>
 80099c6:	4544      	cmp	r4, r8
 80099c8:	d9c3      	bls.n	8009952 <__hexnan+0x7a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80099d0:	2501      	movs	r5, #1
 80099d2:	3c04      	subs	r4, #4
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	f000 000f 	and.w	r0, r0, #15
 80099da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	e7b7      	b.n	8009952 <__hexnan+0x7a>
 80099e2:	2508      	movs	r5, #8
 80099e4:	e7b5      	b.n	8009952 <__hexnan+0x7a>
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0df      	beq.n	80099ac <__hexnan+0xd4>
 80099ec:	f1c3 0320 	rsb	r3, r3, #32
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295
 80099f4:	40da      	lsrs	r2, r3
 80099f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80099fa:	4013      	ands	r3, r2
 80099fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a00:	e7d4      	b.n	80099ac <__hexnan+0xd4>
 8009a02:	3f04      	subs	r7, #4
 8009a04:	e7d2      	b.n	80099ac <__hexnan+0xd4>
 8009a06:	2004      	movs	r0, #4
 8009a08:	b007      	add	sp, #28
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a0e <__ascii_mbtowc>:
 8009a0e:	b082      	sub	sp, #8
 8009a10:	b901      	cbnz	r1, 8009a14 <__ascii_mbtowc+0x6>
 8009a12:	a901      	add	r1, sp, #4
 8009a14:	b142      	cbz	r2, 8009a28 <__ascii_mbtowc+0x1a>
 8009a16:	b14b      	cbz	r3, 8009a2c <__ascii_mbtowc+0x1e>
 8009a18:	7813      	ldrb	r3, [r2, #0]
 8009a1a:	600b      	str	r3, [r1, #0]
 8009a1c:	7812      	ldrb	r2, [r2, #0]
 8009a1e:	1e10      	subs	r0, r2, #0
 8009a20:	bf18      	it	ne
 8009a22:	2001      	movne	r0, #1
 8009a24:	b002      	add	sp, #8
 8009a26:	4770      	bx	lr
 8009a28:	4610      	mov	r0, r2
 8009a2a:	e7fb      	b.n	8009a24 <__ascii_mbtowc+0x16>
 8009a2c:	f06f 0001 	mvn.w	r0, #1
 8009a30:	e7f8      	b.n	8009a24 <__ascii_mbtowc+0x16>

08009a32 <_realloc_r>:
 8009a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	4680      	mov	r8, r0
 8009a38:	4614      	mov	r4, r2
 8009a3a:	460e      	mov	r6, r1
 8009a3c:	b921      	cbnz	r1, 8009a48 <_realloc_r+0x16>
 8009a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a42:	4611      	mov	r1, r2
 8009a44:	f7fd be3e 	b.w	80076c4 <_malloc_r>
 8009a48:	b92a      	cbnz	r2, 8009a56 <_realloc_r+0x24>
 8009a4a:	f7fd fdc7 	bl	80075dc <_free_r>
 8009a4e:	4625      	mov	r5, r4
 8009a50:	4628      	mov	r0, r5
 8009a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a56:	f000 f842 	bl	8009ade <_malloc_usable_size_r>
 8009a5a:	4284      	cmp	r4, r0
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	d802      	bhi.n	8009a66 <_realloc_r+0x34>
 8009a60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a64:	d812      	bhi.n	8009a8c <_realloc_r+0x5a>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4640      	mov	r0, r8
 8009a6a:	f7fd fe2b 	bl	80076c4 <_malloc_r>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0ed      	beq.n	8009a50 <_realloc_r+0x1e>
 8009a74:	42bc      	cmp	r4, r7
 8009a76:	4622      	mov	r2, r4
 8009a78:	4631      	mov	r1, r6
 8009a7a:	bf28      	it	cs
 8009a7c:	463a      	movcs	r2, r7
 8009a7e:	f7fc ff1d 	bl	80068bc <memcpy>
 8009a82:	4631      	mov	r1, r6
 8009a84:	4640      	mov	r0, r8
 8009a86:	f7fd fda9 	bl	80075dc <_free_r>
 8009a8a:	e7e1      	b.n	8009a50 <_realloc_r+0x1e>
 8009a8c:	4635      	mov	r5, r6
 8009a8e:	e7df      	b.n	8009a50 <_realloc_r+0x1e>

08009a90 <__ascii_wctomb>:
 8009a90:	b149      	cbz	r1, 8009aa6 <__ascii_wctomb+0x16>
 8009a92:	2aff      	cmp	r2, #255	; 0xff
 8009a94:	bf85      	ittet	hi
 8009a96:	238a      	movhi	r3, #138	; 0x8a
 8009a98:	6003      	strhi	r3, [r0, #0]
 8009a9a:	700a      	strbls	r2, [r1, #0]
 8009a9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa0:	bf98      	it	ls
 8009aa2:	2001      	movls	r0, #1
 8009aa4:	4770      	bx	lr
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4770      	bx	lr
	...

08009aac <fiprintf>:
 8009aac:	b40e      	push	{r1, r2, r3}
 8009aae:	b503      	push	{r0, r1, lr}
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	4805      	ldr	r0, [pc, #20]	; (8009acc <fiprintf+0x20>)
 8009ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	f000 f83f 	bl	8009b40 <_vfiprintf_r>
 8009ac2:	b002      	add	sp, #8
 8009ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ac8:	b003      	add	sp, #12
 8009aca:	4770      	bx	lr
 8009acc:	20000068 	.word	0x20000068

08009ad0 <abort>:
 8009ad0:	b508      	push	{r3, lr}
 8009ad2:	2006      	movs	r0, #6
 8009ad4:	f000 fa0c 	bl	8009ef0 <raise>
 8009ad8:	2001      	movs	r0, #1
 8009ada:	f7f7 fe84 	bl	80017e6 <_exit>

08009ade <_malloc_usable_size_r>:
 8009ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae2:	1f18      	subs	r0, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfbc      	itt	lt
 8009ae8:	580b      	ldrlt	r3, [r1, r0]
 8009aea:	18c0      	addlt	r0, r0, r3
 8009aec:	4770      	bx	lr

08009aee <__sfputc_r>:
 8009aee:	6893      	ldr	r3, [r2, #8]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	b410      	push	{r4}
 8009af6:	6093      	str	r3, [r2, #8]
 8009af8:	da08      	bge.n	8009b0c <__sfputc_r+0x1e>
 8009afa:	6994      	ldr	r4, [r2, #24]
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	db01      	blt.n	8009b04 <__sfputc_r+0x16>
 8009b00:	290a      	cmp	r1, #10
 8009b02:	d103      	bne.n	8009b0c <__sfputc_r+0x1e>
 8009b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b08:	f000 b934 	b.w	8009d74 <__swbuf_r>
 8009b0c:	6813      	ldr	r3, [r2, #0]
 8009b0e:	1c58      	adds	r0, r3, #1
 8009b10:	6010      	str	r0, [r2, #0]
 8009b12:	7019      	strb	r1, [r3, #0]
 8009b14:	4608      	mov	r0, r1
 8009b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <__sfputs_r>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	4614      	mov	r4, r2
 8009b24:	18d5      	adds	r5, r2, r3
 8009b26:	42ac      	cmp	r4, r5
 8009b28:	d101      	bne.n	8009b2e <__sfputs_r+0x12>
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e007      	b.n	8009b3e <__sfputs_r+0x22>
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	463a      	mov	r2, r7
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff ffda 	bl	8009aee <__sfputc_r>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	d1f3      	bne.n	8009b26 <__sfputs_r+0xa>
 8009b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b40 <_vfiprintf_r>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	460d      	mov	r5, r1
 8009b46:	b09d      	sub	sp, #116	; 0x74
 8009b48:	4614      	mov	r4, r2
 8009b4a:	4698      	mov	r8, r3
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	b118      	cbz	r0, 8009b58 <_vfiprintf_r+0x18>
 8009b50:	6a03      	ldr	r3, [r0, #32]
 8009b52:	b90b      	cbnz	r3, 8009b58 <_vfiprintf_r+0x18>
 8009b54:	f7fc fd7a 	bl	800664c <__sinit>
 8009b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b5a:	07d9      	lsls	r1, r3, #31
 8009b5c:	d405      	bmi.n	8009b6a <_vfiprintf_r+0x2a>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	059a      	lsls	r2, r3, #22
 8009b62:	d402      	bmi.n	8009b6a <_vfiprintf_r+0x2a>
 8009b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b66:	f7fc fea7 	bl	80068b8 <__retarget_lock_acquire_recursive>
 8009b6a:	89ab      	ldrh	r3, [r5, #12]
 8009b6c:	071b      	lsls	r3, r3, #28
 8009b6e:	d501      	bpl.n	8009b74 <_vfiprintf_r+0x34>
 8009b70:	692b      	ldr	r3, [r5, #16]
 8009b72:	b99b      	cbnz	r3, 8009b9c <_vfiprintf_r+0x5c>
 8009b74:	4629      	mov	r1, r5
 8009b76:	4630      	mov	r0, r6
 8009b78:	f000 f93a 	bl	8009df0 <__swsetup_r>
 8009b7c:	b170      	cbz	r0, 8009b9c <_vfiprintf_r+0x5c>
 8009b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b80:	07dc      	lsls	r4, r3, #31
 8009b82:	d504      	bpl.n	8009b8e <_vfiprintf_r+0x4e>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	b01d      	add	sp, #116	; 0x74
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	0598      	lsls	r0, r3, #22
 8009b92:	d4f7      	bmi.n	8009b84 <_vfiprintf_r+0x44>
 8009b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b96:	f7fc fe90 	bl	80068ba <__retarget_lock_release_recursive>
 8009b9a:	e7f3      	b.n	8009b84 <_vfiprintf_r+0x44>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba0:	2320      	movs	r3, #32
 8009ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009baa:	2330      	movs	r3, #48	; 0x30
 8009bac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d60 <_vfiprintf_r+0x220>
 8009bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb4:	f04f 0901 	mov.w	r9, #1
 8009bb8:	4623      	mov	r3, r4
 8009bba:	469a      	mov	sl, r3
 8009bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc0:	b10a      	cbz	r2, 8009bc6 <_vfiprintf_r+0x86>
 8009bc2:	2a25      	cmp	r2, #37	; 0x25
 8009bc4:	d1f9      	bne.n	8009bba <_vfiprintf_r+0x7a>
 8009bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bca:	d00b      	beq.n	8009be4 <_vfiprintf_r+0xa4>
 8009bcc:	465b      	mov	r3, fp
 8009bce:	4622      	mov	r2, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff ffa2 	bl	8009b1c <__sfputs_r>
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f000 80a9 	beq.w	8009d30 <_vfiprintf_r+0x1f0>
 8009bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be0:	445a      	add	r2, fp
 8009be2:	9209      	str	r2, [sp, #36]	; 0x24
 8009be4:	f89a 3000 	ldrb.w	r3, [sl]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80a1 	beq.w	8009d30 <_vfiprintf_r+0x1f0>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf8:	f10a 0a01 	add.w	sl, sl, #1
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c04:	931a      	str	r3, [sp, #104]	; 0x68
 8009c06:	4654      	mov	r4, sl
 8009c08:	2205      	movs	r2, #5
 8009c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0e:	4854      	ldr	r0, [pc, #336]	; (8009d60 <_vfiprintf_r+0x220>)
 8009c10:	f7f6 fae6 	bl	80001e0 <memchr>
 8009c14:	9a04      	ldr	r2, [sp, #16]
 8009c16:	b9d8      	cbnz	r0, 8009c50 <_vfiprintf_r+0x110>
 8009c18:	06d1      	lsls	r1, r2, #27
 8009c1a:	bf44      	itt	mi
 8009c1c:	2320      	movmi	r3, #32
 8009c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c22:	0713      	lsls	r3, r2, #28
 8009c24:	bf44      	itt	mi
 8009c26:	232b      	movmi	r3, #43	; 0x2b
 8009c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c30:	2b2a      	cmp	r3, #42	; 0x2a
 8009c32:	d015      	beq.n	8009c60 <_vfiprintf_r+0x120>
 8009c34:	9a07      	ldr	r2, [sp, #28]
 8009c36:	4654      	mov	r4, sl
 8009c38:	2000      	movs	r0, #0
 8009c3a:	f04f 0c0a 	mov.w	ip, #10
 8009c3e:	4621      	mov	r1, r4
 8009c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c44:	3b30      	subs	r3, #48	; 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d94d      	bls.n	8009ce6 <_vfiprintf_r+0x1a6>
 8009c4a:	b1b0      	cbz	r0, 8009c7a <_vfiprintf_r+0x13a>
 8009c4c:	9207      	str	r2, [sp, #28]
 8009c4e:	e014      	b.n	8009c7a <_vfiprintf_r+0x13a>
 8009c50:	eba0 0308 	sub.w	r3, r0, r8
 8009c54:	fa09 f303 	lsl.w	r3, r9, r3
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	46a2      	mov	sl, r4
 8009c5e:	e7d2      	b.n	8009c06 <_vfiprintf_r+0xc6>
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	1d19      	adds	r1, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	9103      	str	r1, [sp, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfbb      	ittet	lt
 8009c6c:	425b      	neglt	r3, r3
 8009c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c72:	9307      	strge	r3, [sp, #28]
 8009c74:	9307      	strlt	r3, [sp, #28]
 8009c76:	bfb8      	it	lt
 8009c78:	9204      	strlt	r2, [sp, #16]
 8009c7a:	7823      	ldrb	r3, [r4, #0]
 8009c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7e:	d10c      	bne.n	8009c9a <_vfiprintf_r+0x15a>
 8009c80:	7863      	ldrb	r3, [r4, #1]
 8009c82:	2b2a      	cmp	r3, #42	; 0x2a
 8009c84:	d134      	bne.n	8009cf0 <_vfiprintf_r+0x1b0>
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	1d1a      	adds	r2, r3, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	9203      	str	r2, [sp, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfb8      	it	lt
 8009c92:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c96:	3402      	adds	r4, #2
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d70 <_vfiprintf_r+0x230>
 8009c9e:	7821      	ldrb	r1, [r4, #0]
 8009ca0:	2203      	movs	r2, #3
 8009ca2:	4650      	mov	r0, sl
 8009ca4:	f7f6 fa9c 	bl	80001e0 <memchr>
 8009ca8:	b138      	cbz	r0, 8009cba <_vfiprintf_r+0x17a>
 8009caa:	9b04      	ldr	r3, [sp, #16]
 8009cac:	eba0 000a 	sub.w	r0, r0, sl
 8009cb0:	2240      	movs	r2, #64	; 0x40
 8009cb2:	4082      	lsls	r2, r0
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	3401      	adds	r4, #1
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbe:	4829      	ldr	r0, [pc, #164]	; (8009d64 <_vfiprintf_r+0x224>)
 8009cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cc4:	2206      	movs	r2, #6
 8009cc6:	f7f6 fa8b 	bl	80001e0 <memchr>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d03f      	beq.n	8009d4e <_vfiprintf_r+0x20e>
 8009cce:	4b26      	ldr	r3, [pc, #152]	; (8009d68 <_vfiprintf_r+0x228>)
 8009cd0:	bb1b      	cbnz	r3, 8009d1a <_vfiprintf_r+0x1da>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	3307      	adds	r3, #7
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	3308      	adds	r3, #8
 8009cdc:	9303      	str	r3, [sp, #12]
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	443b      	add	r3, r7
 8009ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce4:	e768      	b.n	8009bb8 <_vfiprintf_r+0x78>
 8009ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cea:	460c      	mov	r4, r1
 8009cec:	2001      	movs	r0, #1
 8009cee:	e7a6      	b.n	8009c3e <_vfiprintf_r+0xfe>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	3401      	adds	r4, #1
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f04f 0c0a 	mov.w	ip, #10
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d02:	3a30      	subs	r2, #48	; 0x30
 8009d04:	2a09      	cmp	r2, #9
 8009d06:	d903      	bls.n	8009d10 <_vfiprintf_r+0x1d0>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0c6      	beq.n	8009c9a <_vfiprintf_r+0x15a>
 8009d0c:	9105      	str	r1, [sp, #20]
 8009d0e:	e7c4      	b.n	8009c9a <_vfiprintf_r+0x15a>
 8009d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d14:	4604      	mov	r4, r0
 8009d16:	2301      	movs	r3, #1
 8009d18:	e7f0      	b.n	8009cfc <_vfiprintf_r+0x1bc>
 8009d1a:	ab03      	add	r3, sp, #12
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	462a      	mov	r2, r5
 8009d20:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <_vfiprintf_r+0x22c>)
 8009d22:	a904      	add	r1, sp, #16
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7fb fe41 	bl	80059ac <_printf_float>
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	1c78      	adds	r0, r7, #1
 8009d2e:	d1d6      	bne.n	8009cde <_vfiprintf_r+0x19e>
 8009d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d32:	07d9      	lsls	r1, r3, #31
 8009d34:	d405      	bmi.n	8009d42 <_vfiprintf_r+0x202>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	059a      	lsls	r2, r3, #22
 8009d3a:	d402      	bmi.n	8009d42 <_vfiprintf_r+0x202>
 8009d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3e:	f7fc fdbc 	bl	80068ba <__retarget_lock_release_recursive>
 8009d42:	89ab      	ldrh	r3, [r5, #12]
 8009d44:	065b      	lsls	r3, r3, #25
 8009d46:	f53f af1d 	bmi.w	8009b84 <_vfiprintf_r+0x44>
 8009d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4c:	e71c      	b.n	8009b88 <_vfiprintf_r+0x48>
 8009d4e:	ab03      	add	r3, sp, #12
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	462a      	mov	r2, r5
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <_vfiprintf_r+0x22c>)
 8009d56:	a904      	add	r1, sp, #16
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7fc f8cb 	bl	8005ef4 <_printf_i>
 8009d5e:	e7e4      	b.n	8009d2a <_vfiprintf_r+0x1ea>
 8009d60:	0800a4e9 	.word	0x0800a4e9
 8009d64:	0800a4f3 	.word	0x0800a4f3
 8009d68:	080059ad 	.word	0x080059ad
 8009d6c:	08009b1d 	.word	0x08009b1d
 8009d70:	0800a4ef 	.word	0x0800a4ef

08009d74 <__swbuf_r>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	460e      	mov	r6, r1
 8009d78:	4614      	mov	r4, r2
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	b118      	cbz	r0, 8009d86 <__swbuf_r+0x12>
 8009d7e:	6a03      	ldr	r3, [r0, #32]
 8009d80:	b90b      	cbnz	r3, 8009d86 <__swbuf_r+0x12>
 8009d82:	f7fc fc63 	bl	800664c <__sinit>
 8009d86:	69a3      	ldr	r3, [r4, #24]
 8009d88:	60a3      	str	r3, [r4, #8]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	071a      	lsls	r2, r3, #28
 8009d8e:	d525      	bpl.n	8009ddc <__swbuf_r+0x68>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	b31b      	cbz	r3, 8009ddc <__swbuf_r+0x68>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	6922      	ldr	r2, [r4, #16]
 8009d98:	1a98      	subs	r0, r3, r2
 8009d9a:	6963      	ldr	r3, [r4, #20]
 8009d9c:	b2f6      	uxtb	r6, r6
 8009d9e:	4283      	cmp	r3, r0
 8009da0:	4637      	mov	r7, r6
 8009da2:	dc04      	bgt.n	8009dae <__swbuf_r+0x3a>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f7ff fa3a 	bl	8009220 <_fflush_r>
 8009dac:	b9e0      	cbnz	r0, 8009de8 <__swbuf_r+0x74>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	60a3      	str	r3, [r4, #8]
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	6022      	str	r2, [r4, #0]
 8009dba:	701e      	strb	r6, [r3, #0]
 8009dbc:	6962      	ldr	r2, [r4, #20]
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d004      	beq.n	8009dce <__swbuf_r+0x5a>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	07db      	lsls	r3, r3, #31
 8009dc8:	d506      	bpl.n	8009dd8 <__swbuf_r+0x64>
 8009dca:	2e0a      	cmp	r6, #10
 8009dcc:	d104      	bne.n	8009dd8 <__swbuf_r+0x64>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7ff fa25 	bl	8009220 <_fflush_r>
 8009dd6:	b938      	cbnz	r0, 8009de8 <__swbuf_r+0x74>
 8009dd8:	4638      	mov	r0, r7
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f806 	bl	8009df0 <__swsetup_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d0d5      	beq.n	8009d94 <__swbuf_r+0x20>
 8009de8:	f04f 37ff 	mov.w	r7, #4294967295
 8009dec:	e7f4      	b.n	8009dd8 <__swbuf_r+0x64>
	...

08009df0 <__swsetup_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4b2a      	ldr	r3, [pc, #168]	; (8009e9c <__swsetup_r+0xac>)
 8009df4:	4605      	mov	r5, r0
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	460c      	mov	r4, r1
 8009dfa:	b118      	cbz	r0, 8009e04 <__swsetup_r+0x14>
 8009dfc:	6a03      	ldr	r3, [r0, #32]
 8009dfe:	b90b      	cbnz	r3, 8009e04 <__swsetup_r+0x14>
 8009e00:	f7fc fc24 	bl	800664c <__sinit>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e0a:	0718      	lsls	r0, r3, #28
 8009e0c:	d422      	bmi.n	8009e54 <__swsetup_r+0x64>
 8009e0e:	06d9      	lsls	r1, r3, #27
 8009e10:	d407      	bmi.n	8009e22 <__swsetup_r+0x32>
 8009e12:	2309      	movs	r3, #9
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	e034      	b.n	8009e8c <__swsetup_r+0x9c>
 8009e22:	0758      	lsls	r0, r3, #29
 8009e24:	d512      	bpl.n	8009e4c <__swsetup_r+0x5c>
 8009e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e28:	b141      	cbz	r1, 8009e3c <__swsetup_r+0x4c>
 8009e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e2e:	4299      	cmp	r1, r3
 8009e30:	d002      	beq.n	8009e38 <__swsetup_r+0x48>
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7fd fbd2 	bl	80075dc <_free_r>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	2300      	movs	r3, #0
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f043 0308 	orr.w	r3, r3, #8
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	b94b      	cbnz	r3, 8009e6c <__swsetup_r+0x7c>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e62:	d003      	beq.n	8009e6c <__swsetup_r+0x7c>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f884 	bl	8009f74 <__smakebuf_r>
 8009e6c:	89a0      	ldrh	r0, [r4, #12]
 8009e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e72:	f010 0301 	ands.w	r3, r0, #1
 8009e76:	d00a      	beq.n	8009e8e <__swsetup_r+0x9e>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6963      	ldr	r3, [r4, #20]
 8009e7e:	425b      	negs	r3, r3
 8009e80:	61a3      	str	r3, [r4, #24]
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	b943      	cbnz	r3, 8009e98 <__swsetup_r+0xa8>
 8009e86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e8a:	d1c4      	bne.n	8009e16 <__swsetup_r+0x26>
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	0781      	lsls	r1, r0, #30
 8009e90:	bf58      	it	pl
 8009e92:	6963      	ldrpl	r3, [r4, #20]
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	e7f4      	b.n	8009e82 <__swsetup_r+0x92>
 8009e98:	2000      	movs	r0, #0
 8009e9a:	e7f7      	b.n	8009e8c <__swsetup_r+0x9c>
 8009e9c:	20000068 	.word	0x20000068

08009ea0 <_raise_r>:
 8009ea0:	291f      	cmp	r1, #31
 8009ea2:	b538      	push	{r3, r4, r5, lr}
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	d904      	bls.n	8009eb4 <_raise_r+0x14>
 8009eaa:	2316      	movs	r3, #22
 8009eac:	6003      	str	r3, [r0, #0]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009eb6:	b112      	cbz	r2, 8009ebe <_raise_r+0x1e>
 8009eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ebc:	b94b      	cbnz	r3, 8009ed2 <_raise_r+0x32>
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f000 f830 	bl	8009f24 <_getpid_r>
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	4620      	mov	r0, r4
 8009eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ece:	f000 b817 	b.w	8009f00 <_kill_r>
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d00a      	beq.n	8009eec <_raise_r+0x4c>
 8009ed6:	1c59      	adds	r1, r3, #1
 8009ed8:	d103      	bne.n	8009ee2 <_raise_r+0x42>
 8009eda:	2316      	movs	r3, #22
 8009edc:	6003      	str	r3, [r0, #0]
 8009ede:	2001      	movs	r0, #1
 8009ee0:	e7e7      	b.n	8009eb2 <_raise_r+0x12>
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ee8:	4628      	mov	r0, r5
 8009eea:	4798      	blx	r3
 8009eec:	2000      	movs	r0, #0
 8009eee:	e7e0      	b.n	8009eb2 <_raise_r+0x12>

08009ef0 <raise>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <raise+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f7ff bfd3 	b.w	8009ea0 <_raise_r>
 8009efa:	bf00      	nop
 8009efc:	20000068 	.word	0x20000068

08009f00 <_kill_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	; (8009f20 <_kill_r+0x20>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	602b      	str	r3, [r5, #0]
 8009f0e:	f7f7 fc5a 	bl	80017c6 <_kill>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	d102      	bne.n	8009f1c <_kill_r+0x1c>
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	b103      	cbz	r3, 8009f1c <_kill_r+0x1c>
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	bd38      	pop	{r3, r4, r5, pc}
 8009f1e:	bf00      	nop
 8009f20:	200050a4 	.word	0x200050a4

08009f24 <_getpid_r>:
 8009f24:	f7f7 bc47 	b.w	80017b6 <_getpid>

08009f28 <__swhatbuf_r>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	b096      	sub	sp, #88	; 0x58
 8009f34:	4615      	mov	r5, r2
 8009f36:	461e      	mov	r6, r3
 8009f38:	da0d      	bge.n	8009f56 <__swhatbuf_r+0x2e>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f40:	f04f 0100 	mov.w	r1, #0
 8009f44:	bf0c      	ite	eq
 8009f46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f4a:	2340      	movne	r3, #64	; 0x40
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	6031      	str	r1, [r6, #0]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	b016      	add	sp, #88	; 0x58
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	466a      	mov	r2, sp
 8009f58:	f000 f848 	bl	8009fec <_fstat_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	dbec      	blt.n	8009f3a <__swhatbuf_r+0x12>
 8009f60:	9901      	ldr	r1, [sp, #4]
 8009f62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f6a:	4259      	negs	r1, r3
 8009f6c:	4159      	adcs	r1, r3
 8009f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f72:	e7eb      	b.n	8009f4c <__swhatbuf_r+0x24>

08009f74 <__smakebuf_r>:
 8009f74:	898b      	ldrh	r3, [r1, #12]
 8009f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f78:	079d      	lsls	r5, r3, #30
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	d507      	bpl.n	8009f90 <__smakebuf_r+0x1c>
 8009f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	6163      	str	r3, [r4, #20]
 8009f8c:	b002      	add	sp, #8
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	ab01      	add	r3, sp, #4
 8009f92:	466a      	mov	r2, sp
 8009f94:	f7ff ffc8 	bl	8009f28 <__swhatbuf_r>
 8009f98:	9900      	ldr	r1, [sp, #0]
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fd fb91 	bl	80076c4 <_malloc_r>
 8009fa2:	b948      	cbnz	r0, 8009fb8 <__smakebuf_r+0x44>
 8009fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa8:	059a      	lsls	r2, r3, #22
 8009faa:	d4ef      	bmi.n	8009f8c <__smakebuf_r+0x18>
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	f043 0302 	orr.w	r3, r3, #2
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	e7e3      	b.n	8009f80 <__smakebuf_r+0xc>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	6163      	str	r3, [r4, #20]
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	6120      	str	r0, [r4, #16]
 8009fca:	b15b      	cbz	r3, 8009fe4 <__smakebuf_r+0x70>
 8009fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f81d 	bl	800a010 <_isatty_r>
 8009fd6:	b128      	cbz	r0, 8009fe4 <__smakebuf_r+0x70>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	f043 0301 	orr.w	r3, r3, #1
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	431d      	orrs	r5, r3
 8009fe8:	81a5      	strh	r5, [r4, #12]
 8009fea:	e7cf      	b.n	8009f8c <__smakebuf_r+0x18>

08009fec <_fstat_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_fstat_r+0x20>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	f7f7 fc43 	bl	8001884 <_fstat>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d102      	bne.n	800a008 <_fstat_r+0x1c>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b103      	cbz	r3, 800a008 <_fstat_r+0x1c>
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	200050a4 	.word	0x200050a4

0800a010 <_isatty_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d06      	ldr	r5, [pc, #24]	; (800a02c <_isatty_r+0x1c>)
 800a014:	2300      	movs	r3, #0
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	f7f7 fc42 	bl	80018a4 <_isatty>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_isatty_r+0x1a>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_isatty_r+0x1a>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	200050a4 	.word	0x200050a4

0800a030 <_init>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr

0800a03c <_fini>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr
